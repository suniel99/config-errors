randoop.main.Main.<clinit>()V#New(Ljava/util/ArrayList;,0)#0
randoop.main.Main.<clinit>()V#Dup(1,0)#1
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.main.Main.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#3
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#4
randoop.main.Main.<clinit>()V#New(Lrandoop/main/GenTests;,0)#5
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#0
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#1
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,testclass)#3
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#4
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,classlist)#5
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#6
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,methodlist)#7
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#8
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/regex/Pattern;,STATIC,Lrandoop/main/GenInputsAbstract;,omitmethods)#9
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1)#10
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,public_only)#11
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#12
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,init_routine)#13
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#14
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,silently_ignore_bad_class_names)#15
randoop.main.GenInputsAbstract.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,NONE)#16
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,0)#0
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#1
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(Ljava/lang/String;,"NONE")#2
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,0)#3
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,<init>,(Ljava/lang/String;I)V)#4
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#LocalLoad(I,2)#2
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#Invoke(SPECIAL,Ljava/lang/Enum;,<init>,(Ljava/lang/String;I)V)#3
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#Return(V)#4
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,NONE)#5
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,0)#6
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#7
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(Ljava/lang/String;,"CLASS")#8
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,1)#9
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,<init>,(Ljava/lang/String;I)V)#10
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,CLASS)#11
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,0)#12
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#13
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(Ljava/lang/String;,"PACKAGE")#14
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,2)#15
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,<init>,(Ljava/lang/String;I)V)#16
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,PACKAGE)#17
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,0)#18
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#19
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(Ljava/lang/String;,"ALL")#20
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,3)#21
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,<init>,(Ljava/lang/String;I)V)#22
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,ALL)#23
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,4)#24
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New([Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,1)#25
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#26
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,0)#27
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,NONE)#28
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#29
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#30
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,1)#31
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,CLASS)#32
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#33
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#34
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,2)#35
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,PACKAGE)#36
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#37
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#38
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,3)#39
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,ALL)#40
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#41
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put([Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,ENUM$VALUES)#42
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Return(V)#43
randoop.main.GenInputsAbstract.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract;,literals_level)#17
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#18
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#19
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#20
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,literals_file)#21
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#22
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,randomseed)#23
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100)#24
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,timelimit)#25
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100000000)#26
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,inputlimit)#27
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100000000)#28
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,outputlimit)#29
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100)#30
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,maxsize)#31
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1)#32
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,forbid_null)#33
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,10000)#34
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,string_maxlen)#35
randoop.main.GenInputsAbstract.<clinit>()V#Constant(D,0.0)#36
randoop.main.GenInputsAbstract.<clinit>()V#Put(D,STATIC,Lrandoop/main/GenInputsAbstract;,null_ratio)#37
randoop.main.GenInputsAbstract.<clinit>()V#Constant(D,0.0)#38
randoop.main.GenInputsAbstract.<clinit>()V#Put(D,STATIC,Lrandoop/main/GenInputsAbstract;,alias_ratio)#39
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#40
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,small_tests)#41
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100000000)#42
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,clear)#43
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#44
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/io/File;,STATIC,Lrandoop/main/GenInputsAbstract;,observers)#45
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1)#46
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,check_object_contracts)#47
randoop.main.GenInputsAbstract.<clinit>()V#Constant(Ljava/lang/String;,"all")#48
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_tests)#49
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,500)#50
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,testsperfile)#51
randoop.main.GenInputsAbstract.<clinit>()V#Constant(Ljava/lang/String;,"RandoopTest")#52
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,junit_classname)#53
randoop.main.GenInputsAbstract.<clinit>()V#Constant(Ljava/lang/String;,"")#54
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,junit_package_name)#55
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#56
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,junit_output_dir)#57
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#58
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,dont_output_tests)#59
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#60
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,output_nonexec)#61
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#62
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/regex/Pattern;,STATIC,Lrandoop/main/GenInputsAbstract;,test_classes)#63
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#64
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#65
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#66
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,system_props)#67
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#68
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,agent)#69
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1000)#70
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,mem_megabytes)#71
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#72
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,capture_output)#73
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#74
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#75
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#76
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,componentfile_ser)#77
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#78
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#79
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#80
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,componentfile_txt)#81
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#82
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_components)#83
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#84
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_tests_serialized)#85
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,-1)#86
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,comm_port)#87
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#88
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,noprogressdisplay)#89
randoop.main.GenInputsAbstract.<clinit>()V#Constant(J,5000)#90
randoop.main.GenInputsAbstract.<clinit>()V#Put(J,STATIC,Lrandoop/main/GenInputsAbstract;,progressinterval)#91
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#92
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#93
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#94
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,visitor)#95
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#96
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#97
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#98
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/io/FileWriter;,STATIC,Lrandoop/main/GenInputsAbstract;,log)#99
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#100
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,dontexecute)#101
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#102
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,long_format)#103
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#104
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_covmap)#105
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#106
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,output_cov_witnesses)#107
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#108
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,always_use_ints_as_objects)#109
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#110
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,coverage_instrumented_classes)#111
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#112
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_branches)#113
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1)#114
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,remove_subsequences)#115
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#116
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,compare_checks)#117
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#118
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/io/File;,STATIC,Lrandoop/main/GenInputsAbstract;,clean_checks)#119
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#120
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,print_diff_obs)#121
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#122
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/io/FileWriter;,STATIC,Lrandoop/main/GenInputsAbstract;,expfile)#123
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#124
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,offline)#125
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#126
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,repeat_heuristic)#127
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#128
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,use_object_cache)#129
randoop.main.GenInputsAbstract.<clinit>()V#Return(V)#130
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e7e2da63)#0
randoop.main.GenTests.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.main.GenTests.<clinit>()V#Constant(I,0)#2
randoop.main.GenTests.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.main.GenTests.<clinit>()V#Constant(I,1)#4
randoop.main.GenTests.<clinit>()V#Goto(7)#5
randoop.main.GenTests.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenTests;,$assertionsDisabled)#7
randoop.main.GenTests.<clinit>()V#New(Ljava/util/ArrayList;,0)#8
randoop.main.GenTests.<clinit>()V#Dup(1,0)#9
randoop.main.GenTests.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#10
randoop.main.GenTests.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#11
randoop.main.GenTests.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#12
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/String;,"Randoop executes the code under test, with no mechanisms to protect your system from harm resulting from arbitrary code execution. If random execution of your code could have undesirable effects (e.g. deletion of files, opening network connections, etc.) make sure you execute Randoop in a sandbox machine.")#13
randoop.main.GenTests.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#14
randoop.main.GenTests.<clinit>()V#Pop(1)#15
randoop.main.GenTests.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#16
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/String;,"Randoop will only use methods from the classes that you specify for testing. If Randoop is not generating tests for a particular method, make sure that you are including classes for the types that the method requires. Otherwise, Randoop may fail to generate tests due to missing input parameters.")#17
randoop.main.GenTests.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#18
randoop.main.GenTests.<clinit>()V#Pop(1)#19
randoop.main.GenTests.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#20
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/String;,"Randoop is designed to be deterministic when the code under test is itself deterministic. This means that two runs of Randoop will generate the same tests. To get variation across runs, use the --randomseed option.")#21
randoop.main.GenTests.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#22
randoop.main.GenTests.<clinit>()V#Pop(1)#23
randoop.main.GenTests.<clinit>()V#Constant(I,0)#24
randoop.main.GenTests.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenTests;,system_test_run)#25
randoop.main.GenTests.<clinit>()V#Constant(L;,null)#26
randoop.main.GenTests.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,check_valid_objects)#27
randoop.main.GenTests.<clinit>()V#Constant(L;,null)#28
randoop.main.GenTests.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,inputsequences)#29
randoop.main.GenTests.<clinit>()V#New(Lplume/SimpleLog;,0)#30
randoop.main.GenTests.<clinit>()V#Dup(1,0)#31
randoop.main.GenTests.<clinit>()V#Constant(I,1)#32
randoop.main.GenTests.<clinit>()V#Invoke(SPECIAL,Lplume/SimpleLog;,<init>,(Z)V)#33
randoop.main.GenTests.<clinit>()V#Put(Lplume/SimpleLog;,STATIC,Lrandoop/main/GenTests;,progress)#34
randoop.main.GenTests.<clinit>()V#New(Lplume/Options;,0)#35
randoop.main.GenTests.<clinit>()V#Dup(1,0)#36
randoop.main.GenTests.<clinit>()V#Constant(I,5)#37
randoop.main.GenTests.<clinit>()V#New([Ljava/lang/Object;,1)#38
randoop.main.GenTests.<clinit>()V#Dup(1,0)#39
randoop.main.GenTests.<clinit>()V#Constant(I,0)#40
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e7e2da63)#41
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#42
randoop.main.GenTests.<clinit>()V#Dup(1,0)#43
randoop.main.GenTests.<clinit>()V#Constant(I,1)#44
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@93172fc5)#45
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#46
randoop.main.GenTests.<clinit>()V#Dup(1,0)#47
randoop.main.GenTests.<clinit>()V#Constant(I,2)#48
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@333eddf)#49
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#50
randoop.main.GenTests.<clinit>()V#Dup(1,0)#51
randoop.main.GenTests.<clinit>()V#Constant(I,3)#52
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@a89e04dc)#53
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#54
randoop.main.GenTests.<clinit>()V#Dup(1,0)#55
randoop.main.GenTests.<clinit>()V#Constant(I,4)#56
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@d9608b59)#57
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#58
randoop.main.GenTests.<clinit>()V#Invoke(SPECIAL,Lplume/Options;,<init>,([Ljava/lang/Object;)V)#59
randoop.util.ReflectionExecutor.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@333eddf)#0
randoop.util.ReflectionExecutor.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,0)#2
randoop.util.ReflectionExecutor.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,1)#4
randoop.util.ReflectionExecutor.<clinit>()V#Goto(7)#5
randoop.util.ReflectionExecutor.<clinit>()V#Put(Z,STATIC,Lrandoop/util/ReflectionExecutor;,$assertionsDisabled)#7
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,1)#8
randoop.util.ReflectionExecutor.<clinit>()V#Put(Z,STATIC,Lrandoop/util/ReflectionExecutor;,usethreads)#9
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,5000)#10
randoop.util.ReflectionExecutor.<clinit>()V#Put(I,STATIC,Lrandoop/util/ReflectionExecutor;,timeout)#11
randoop.util.ReflectionExecutor.<clinit>()V#Constant(J,0)#12
randoop.util.ReflectionExecutor.<clinit>()V#Put(J,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_accum)#13
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,0)#14
randoop.util.ReflectionExecutor.<clinit>()V#Put(I,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_count)#15
randoop.util.ReflectionExecutor.<clinit>()V#Constant(J,0)#16
randoop.util.ReflectionExecutor.<clinit>()V#Put(J,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_accum)#17
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,0)#18
randoop.util.ReflectionExecutor.<clinit>()V#Put(I,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_count)#19
randoop.util.ReflectionExecutor.<clinit>()V#Return(V)#20
randoop.AbstractGenerator.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@d9608b59)#0
randoop.AbstractGenerator.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.AbstractGenerator.<clinit>()V#Constant(I,0)#2
randoop.AbstractGenerator.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.AbstractGenerator.<clinit>()V#Constant(I,1)#4
randoop.AbstractGenerator.<clinit>()V#Goto(7)#5
randoop.AbstractGenerator.<clinit>()V#Put(Z,STATIC,Lrandoop/AbstractGenerator;,$assertionsDisabled)#7
randoop.AbstractGenerator.<clinit>()V#Constant(I,0)#8
randoop.AbstractGenerator.<clinit>()V#Put(Z,STATIC,Lrandoop/AbstractGenerator;,dump_sequences)#9
randoop.AbstractGenerator.<clinit>()V#Constant(L;,null)#10
randoop.AbstractGenerator.<clinit>()V#Put(Lrandoop/Sequence;,STATIC,Lrandoop/AbstractGenerator;,currSeq)#11
randoop.AbstractGenerator.<clinit>()V#Return(V)#12
randoop.main.GenTests.<clinit>()V#Put(Lplume/Options;,STATIC,Lrandoop/main/GenTests;,options)#60
randoop.main.GenTests.<clinit>()V#Return(V)#61
randoop.main.Main.<clinit>()V#Dup(1,0)#6
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenTests;,<init>,()V)#7
randoop.main.GenTests.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"gentests")#1
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"Generates unit tests for a set of classes.")#2
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"gentests OPTIONS")#3
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"At least one class is specified via `--testclass' or `--classlist'.")#4
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"Attempts to generate JUnit tests that capture the behavior of the classes under test and/or find contract violations. Randoop generates tests using feedback-directed random test generation. ")#5
randoop.main.GenTests.<init>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#6
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"One or more names of classes to test. A class to test can be specified via the `--testclass=<CLASSNAME>' or `--classlist=<FILENAME>' options.")#7
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"A JUnit test suite (as one or more Java source files). The tests in the suite will pass when executed using the classes under test.")#8
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"java randoop.main.Main gentests --testclass=java.util.Collections  --testclass=java.util.TreeSet")#9
randoop.main.GenTests.<init>()V#Get(Lplume/Options;,STATIC,Lrandoop/main/GenTests;,options)#10
randoop.main.GenTests.<init>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,2)#2
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,3)#3
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,4)#4
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,5)#5
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,6)#6
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,7)#7
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,8)#8
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,9)#9
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,10)#10
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#3
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#10
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fcommand)#12
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,2)#14
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#15
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,19)#16
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,2)#19
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fpitch)#20
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#21
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,3)#22
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#23
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,27)#24
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,3)#27
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fcommandGrammar)#28
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#29
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,4)#30
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#31
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,35)#32
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,4)#35
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fwhere)#36
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#37
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,5)#38
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#39
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,43)#40
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,5)#43
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fsummary)#44
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#45
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,6)#46
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#47
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,53)#48
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,6)#53
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/main/CommandHandler;,fnotes)#54
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#55
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,7)#56
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#57
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,61)#58
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,7)#61
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,finput)#62
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#63
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,8)#64
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#65
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,69)#66
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,8)#69
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,foutput)#70
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#71
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,9)#72
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#73
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,77)#74
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,9)#77
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fexample)#78
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#79
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,10)#80
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Lplume/Options;,NONSTATIC,Lrandoop/main/CommandHandler;,foptions)#81
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Return(V)#82
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Return(V)#12
randoop.main.GenTests.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#8
randoop.main.Main.<clinit>()V#Pop(1)#9
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#10
randoop.main.Main.<clinit>()V#New(Lrandoop/main/Help;,0)#11
randoop.main.Help.<clinit>()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#0
randoop.main.Help.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#1
randoop.main.Help.<clinit>()V#Constant(I,0)#2
randoop.main.Help.<clinit>()V#Put(Z,STATIC,Lrandoop/main/Help;,unpub)#3
randoop.main.Help.<clinit>()V#Return(V)#4
randoop.main.Main.<clinit>()V#Dup(1,0)#12
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/Help;,<init>,()V)#13
randoop.main.Help.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"help")#1
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"Displays a help message for a given command.")#2
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"help")#3
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"")#4
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"Displays a help message for a given command.")#5
randoop.main.Help.<init>()V#Constant(L;,null)#6
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"None (for the general help message), or the name of a command (for command-specific help).")#7
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"A help message is printed to stdout.")#8
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"")#9
randoop.main.Help.<init>()V#New(Lplume/Options;,0)#10
randoop.main.Help.<init>()V#Dup(1,0)#11
randoop.main.Help.<init>()V#Constant(I,1)#12
randoop.main.Help.<init>()V#New([Ljava/lang/Object;,1)#13
randoop.main.Help.<init>()V#Dup(1,0)#14
randoop.main.Help.<init>()V#Constant(I,0)#15
randoop.main.Help.<init>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@17d11ad3)#16
randoop.main.Help.<init>()V#ArrayStore(Ljava/lang/Object;)#17
randoop.main.Help.<init>()V#Invoke(SPECIAL,Lplume/Options;,<init>,([Ljava/lang/Object;)V)#18
randoop.main.Help.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#19
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#New(Ljava/util/ArrayList;,0)#49
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Dup(1,0)#50
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#51
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(54)#52
randoop.main.Help.<init>()V#Return(V)#20
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#14
randoop.main.Main.<clinit>()V#Pop(1)#15
randoop.main.Main.<clinit>()V#New(Ljava/util/ArrayList;,0)#16
randoop.main.Main.<clinit>()V#Dup(1,0)#17
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#18
randoop.main.Main.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#19
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#20
randoop.main.Main.<clinit>()V#New(Lrandoop/main/CovUtils;,0)#21
randoop.main.CovUtils.<clinit>()V#Constant(Ljava/lang/String;,"cov")#0
randoop.main.CovUtils.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/CovUtils;,command)#1
randoop.main.CovUtils.<clinit>()V#Return(V)#2
randoop.main.Main.<clinit>()V#Dup(1,0)#22
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/CovUtils;,<init>,()V)#23
randoop.main.CovUtils.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.CovUtils.<init>()V#Get(Ljava/lang/String;,STATIC,Lrandoop/main/CovUtils;,command)#1
randoop.main.CovUtils.<init>()V#Constant(L;,null)#2
randoop.main.CovUtils.<init>()V#Constant(L;,null)#3
randoop.main.CovUtils.<init>()V#Constant(L;,null)#4
randoop.main.CovUtils.<init>()V#Constant(L;,null)#5
randoop.main.CovUtils.<init>()V#Constant(L;,null)#6
randoop.main.CovUtils.<init>()V#Constant(L;,null)#7
randoop.main.CovUtils.<init>()V#Constant(L;,null)#8
randoop.main.CovUtils.<init>()V#Constant(L;,null)#9
randoop.main.CovUtils.<init>()V#Constant(L;,null)#10
randoop.main.CovUtils.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#17
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(20)#18
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#25
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(28)#26
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#33
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(36)#34
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#41
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(44)#42
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#59
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(62)#60
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#67
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(70)#68
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#75
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(78)#76
randoop.main.CovUtils.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#24
randoop.main.Main.<clinit>()V#Pop(1)#25
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#26
randoop.main.Main.<clinit>()V#New(Lrandoop/main/ExecuteSequence;,0)#27
randoop.main.ExecuteSequence.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@880916ea)#0
randoop.main.ExecuteSequence.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.main.ExecuteSequence.<clinit>()V#Constant(I,0)#2
randoop.main.ExecuteSequence.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.main.ExecuteSequence.<clinit>()V#Constant(I,1)#4
randoop.main.ExecuteSequence.<clinit>()V#Goto(7)#5
randoop.main.ExecuteSequence.<clinit>()V#Put(Z,STATIC,Lrandoop/main/ExecuteSequence;,$assertionsDisabled)#7
randoop.main.ExecuteSequence.<clinit>()V#Return(V)#8
randoop.main.Main.<clinit>()V#Dup(1,0)#28
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/ExecuteSequence;,<init>,()V)#29
randoop.main.ExecuteSequence.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.ExecuteSequence.<init>()V#Constant(Ljava/lang/String;,"exec")#1
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#2
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#3
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#4
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#5
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#6
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#7
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#8
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#9
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#10
randoop.main.ExecuteSequence.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.ExecuteSequence.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#30
randoop.main.Main.<clinit>()V#Pop(1)#31
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#32
randoop.main.Main.<clinit>()V#New(Lrandoop/main/CleanObservations;,0)#33
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@b7f22c50)#0
randoop.main.CleanObservations.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.main.CleanObservations.<clinit>()V#Constant(I,0)#2
randoop.main.CleanObservations.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.main.CleanObservations.<clinit>()V#Constant(I,1)#4
randoop.main.CleanObservations.<clinit>()V#Goto(7)#5
randoop.main.CleanObservations.<clinit>()V#Put(Z,STATIC,Lrandoop/main/CleanObservations;,$assertionsDisabled)#7
randoop.main.CleanObservations.<clinit>()V#Constant(L;,null)#8
randoop.main.CleanObservations.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/CleanObservations;,where)#9
randoop.main.CleanObservations.<clinit>()V#New(Ljava/util/ArrayList;,0)#10
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#11
randoop.main.CleanObservations.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#12
randoop.main.CleanObservations.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#13
randoop.main.CleanObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#14
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/String;,"This command is needed because discarded sequences in the ")#15
randoop.main.CleanObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#16
randoop.main.CleanObservations.<clinit>()V#Pop(1)#17
randoop.main.CleanObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#18
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/String;,"initial run of Randoop may have changed the global state in a ")#19
randoop.main.CleanObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#20
randoop.main.CleanObservations.<clinit>()V#Pop(1)#21
randoop.main.CleanObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#22
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/String;,"way that might change the values of the checks")#23
randoop.main.CleanObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#24
randoop.main.CleanObservations.<clinit>()V#Pop(1)#25
randoop.main.CleanObservations.<clinit>()V#New(Lplume/Options;,0)#26
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#27
randoop.main.CleanObservations.<clinit>()V#Constant(I,3)#28
randoop.main.CleanObservations.<clinit>()V#New([Ljava/lang/Object;,1)#29
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#30
randoop.main.CleanObservations.<clinit>()V#Constant(I,0)#31
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@b7f22c50)#32
randoop.main.CleanObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#33
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#34
randoop.main.CleanObservations.<clinit>()V#Constant(I,1)#35
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@93172fc5)#36
randoop.main.CleanObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#37
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#38
randoop.main.CleanObservations.<clinit>()V#Constant(I,2)#39
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@333eddf)#40
randoop.main.CleanObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#41
randoop.main.CleanObservations.<clinit>()V#Invoke(SPECIAL,Lplume/Options;,<init>,([Ljava/lang/Object;)V)#42
randoop.main.CleanObservations.<clinit>()V#Put(Lplume/Options;,STATIC,Lrandoop/main/CleanObservations;,options)#43
randoop.main.CleanObservations.<clinit>()V#Return(V)#44
randoop.main.Main.<clinit>()V#Dup(1,0)#34
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/CleanObservations;,<init>,()V)#35
randoop.main.CleanObservations.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"cleanobs")#1
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"Creates clean checks for a serialized sequence")#2
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"cleanobs OPTIONS")#3
randoop.main.CleanObservations.<init>()V#Get(Ljava/lang/String;,STATIC,Lrandoop/main/CleanObservations;,where)#4
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"Recreates checks for the sequence, thus ensuring that they are created with the correct global state")#5
randoop.main.CleanObservations.<init>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#6
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"Serialized file containing List<ExecutableSequence>")#7
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"Serialized file with List<ExecutableSequence> with clean checks")#8
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"java randoop.main.Main cleanobs in-seq-file out-seq-file")#9
randoop.main.CleanObservations.<init>()V#Get(Lplume/Options;,STATIC,Lrandoop/main/CleanObservations;,options)#10
randoop.main.CleanObservations.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.CleanObservations.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#36
randoop.main.Main.<clinit>()V#Pop(1)#37
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#38
randoop.main.Main.<clinit>()V#New(Lrandoop/main/RmDiffObservations;,0)#39
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1a9f5a8d)#0
randoop.main.RmDiffObservations.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,0)#2
randoop.main.RmDiffObservations.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,1)#4
randoop.main.RmDiffObservations.<clinit>()V#Goto(7)#5
randoop.main.RmDiffObservations.<clinit>()V#Put(Z,STATIC,Lrandoop/main/RmDiffObservations;,$assertionsDisabled)#7
randoop.main.RmDiffObservations.<clinit>()V#Constant(L;,null)#8
randoop.main.RmDiffObservations.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/RmDiffObservations;,where)#9
randoop.main.RmDiffObservations.<clinit>()V#New(Ljava/util/ArrayList;,0)#10
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#11
randoop.main.RmDiffObservations.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#12
randoop.main.RmDiffObservations.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#13
randoop.main.RmDiffObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#14
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/String;,"This command is needed because checks may cover ")#15
randoop.main.RmDiffObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#16
randoop.main.RmDiffObservations.<clinit>()V#Pop(1)#17
randoop.main.RmDiffObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#18
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/String;,"values that are not repeateable, such as values that depend")#19
randoop.main.RmDiffObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#20
randoop.main.RmDiffObservations.<clinit>()V#Pop(1)#21
randoop.main.RmDiffObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#22
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/String;,"on the current date/time")#23
randoop.main.RmDiffObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#24
randoop.main.RmDiffObservations.<clinit>()V#Pop(1)#25
randoop.main.RmDiffObservations.<clinit>()V#New(Lplume/Options;,0)#26
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#27
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,3)#28
randoop.main.RmDiffObservations.<clinit>()V#New([Ljava/lang/Object;,1)#29
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#30
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,0)#31
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1a9f5a8d)#32
randoop.main.RmDiffObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#33
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#34
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,1)#35
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@93172fc5)#36
randoop.main.RmDiffObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#37
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#38
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,2)#39
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@333eddf)#40
randoop.main.RmDiffObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#41
randoop.main.RmDiffObservations.<clinit>()V#Invoke(SPECIAL,Lplume/Options;,<init>,([Ljava/lang/Object;)V)#42
randoop.main.RmDiffObservations.<clinit>()V#Put(Lplume/Options;,STATIC,Lrandoop/main/RmDiffObservations;,options)#43
randoop.main.RmDiffObservations.<clinit>()V#Return(V)#44
randoop.main.Main.<clinit>()V#Dup(1,0)#40
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/RmDiffObservations;,<init>,()V)#41
randoop.main.RmDiffObservations.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"rm-diff-obs")#1
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"Removes any non-determinstic checks from a serialized sequence")#2
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"rm-diff-obs OPTIONS")#3
randoop.main.RmDiffObservations.<init>()V#Get(Ljava/lang/String;,STATIC,Lrandoop/main/RmDiffObservations;,where)#4
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"Recreates checks for the sequence, and removes any that don't match")#5
randoop.main.RmDiffObservations.<init>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#6
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"Serialized file containing List<ExecutableSequence>")#7
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"Serialized file with List<ExecutableSequence> with deterministic obs")#8
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"java randoop.main.Main rm-diff-obs in-seq-file out-seq-file")#9
randoop.main.RmDiffObservations.<init>()V#Get(Lplume/Options;,STATIC,Lrandoop/main/RmDiffObservations;,options)#10
randoop.main.RmDiffObservations.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.RmDiffObservations.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#42
randoop.main.Main.<clinit>()V#Pop(1)#43
randoop.main.Main.<clinit>()V#Return(V)#44
randoop.main.Main.main([Ljava/lang/String;)V#New(Lrandoop/main/Main;,0)#0
randoop.main.Main.main([Ljava/lang/String;)V#Dup(1,0)#1
randoop.main.Main.main([Ljava/lang/String;)V#Invoke(SPECIAL,Lrandoop/main/Main;,<init>,()V)#2
randoop.main.Main.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.Main.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.main.Main.<init>()V#Return(V)#2
randoop.main.Main.main([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,1)#3
randoop.main.Main.main([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#4
randoop.main.Main.main([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.main.Main.main([Ljava/lang/String;)V#Invoke(VIRTUAL,Lrandoop/main/Main;,nonStaticMain,([Ljava/lang/String;)V)#6
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLength()#1
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#2
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,ne,11)#3
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#12
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLoad(Ljava/lang/Object;)#13
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,2)#14
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#15
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLength()#16
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,1)#17
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#BinaryOp(I,sub)#18
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#New([Ljava/lang/String;,1)#19
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,3)#20
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,1)#21
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(I,4)#22
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Goto(36)#23
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,4)#36
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#37
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLength()#38
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,lt,24)#39
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(L;,null)#40
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,4)#41
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#New(Ljava/util/ArrayList;,0)#42
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Dup(1,0)#43
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#44
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,5)#45
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,5)#46
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#47
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#48
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Pop(1)#49
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,5)#50
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#51
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#52
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Pop(1)#53
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,5)#54
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#55
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,7)#56
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Goto(70)#57
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,7)#70
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#71
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#72
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,ne,58)#73
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,7)#58
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#59
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#CheckCast(Lrandoop/main/CommandHandler;)#60
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,6)#61
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,6)#62
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,2)#63
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(VIRTUAL,Lrandoop/main/CommandHandler;,handles,(Ljava/lang/String;)Z)#64
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Constant(L;,null)#1
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,ne,5)#2
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,1)#5
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,toUpperCase,()Ljava/lang/String;)#6
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#7
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Get(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fcommand)#8
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,toUpperCase,()Ljava/lang/String;)#9
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#10
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Constant(I,0)#11
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#ConditionalBranch(I,eq,15)#12
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Constant(I,0)#15
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Return(I)#16
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#65
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,eq,70)#66
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Constant(I,1)#13
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Return(I)#14
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,6)#67
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,4)#68
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Goto(74)#69
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,4)#74
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(L;,null)#75
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(Ljava/lang/Object;,ne,93)#76
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#93
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(I,6)#94
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,4)#95
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,3)#96
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(VIRTUAL,Lrandoop/main/CommandHandler;,handle,([Ljava/lang/String;)Z)#97
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(L;,null)#0
randoop.main.Help.handle([Ljava/lang/String;)Z#CheckCast([Ljava/lang/String;)#1
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,2)#2
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#3
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Lplume/Options;,NONSTATIC,Lrandoop/main/Help;,foptions)#4
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,1)#5
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Lplume/Options;,parse,([Ljava/lang/String;)[Ljava/lang/String;)#6
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,2)#7
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,2)#8
randoop.main.Help.handle([Ljava/lang/String;)Z#ArrayLength()#9
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(I,1)#10
randoop.main.Help.handle([Ljava/lang/String;)Z#ConditionalBranch(I,le,37)#11
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,2)#37
randoop.main.Help.handle([Ljava/lang/String;)Z#ArrayLength()#38
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(I,0)#39
randoop.main.Help.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,106)#40
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#41
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/main/Help;,introMessage,(Ljava/io/PrintStream;)V)#42
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#New(Ljava/lang/StringBuilder;,0)#1
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Dup(1,0)#2
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Constant(Ljava/lang/String;,"Randoop for Java version ")#3
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#4
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(STATIC,Lrandoop/Globals;,getRandoopVersion,()Ljava/lang/String;)#5
randoop.Globals.<clinit>()V#Constant(Ljava/lang/String;,"line.separator")#0
randoop.Globals.<clinit>()V#Invoke(STATIC,Ljava/lang/System;,getProperty,(Ljava/lang/String;)Ljava/lang/String;)#1
randoop.Globals.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/Globals;,lineSep)#2
randoop.Globals.<clinit>()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,err)#3
randoop.Globals.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/Globals;,oldStdErr)#4
randoop.Globals.<clinit>()V#New(Ljava/io/ByteArrayOutputStream;,0)#5
randoop.Globals.<clinit>()V#Dup(1,0)#6
randoop.Globals.<clinit>()V#Invoke(SPECIAL,Ljava/io/ByteArrayOutputStream;,<init>,()V)#7
randoop.Globals.<clinit>()V#Put(Ljava/io/ByteArrayOutputStream;,STATIC,Lrandoop/Globals;,bos)#8
randoop.Globals.<clinit>()V#New(Ljava/io/PrintStream;,0)#9
randoop.Globals.<clinit>()V#Dup(1,0)#10
randoop.Globals.<clinit>()V#Get(Ljava/io/ByteArrayOutputStream;,STATIC,Lrandoop/Globals;,bos)#11
randoop.Globals.<clinit>()V#Invoke(SPECIAL,Ljava/io/PrintStream;,<init>,(Ljava/io/OutputStream;)V)#12
randoop.Globals.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/Globals;,blackHole)#13
randoop.Globals.<clinit>()V#Return(V)#14
randoop.Globals.getRandoopVersion()Ljava/lang/String;#Constant(Ljava/lang/String;,"1.3.2")#0
randoop.Globals.getRandoopVersion()Ljava/lang/String;#Return(Ljava/lang/Object;)#1
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#6
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Constant(Ljava/lang/String;,".")#7
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#8
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#9
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#10
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#LocalLoad(Ljava/lang/Object;,0)#11
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,()V)#12
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Constant(Ljava/lang/String;,"Randoop  is a command-line tool that creates unit tests for Java.")#14
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#15
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#LocalLoad(Ljava/lang/Object;,0)#16
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Constant(Ljava/lang/String;,"It accepts one of the commands listed below. For the user manual,")#17
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#18
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#LocalLoad(Ljava/lang/Object;,0)#19
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Constant(Ljava/lang/String;,"please visit http://http://code.google.com/p/randoop/")#20
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#21
randoop.main.Help.introMessage(Ljava/io/PrintStream;)V#Return(V)#22
randoop.main.Help.handle([Ljava/lang/String;)Z#Goto(54)#43
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#54
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,()V)#55
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#56
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"Type `help' followed by a command name to see documentation.")#57
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#58
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#59
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,()V)#60
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#61
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"Type `help --unpub' followed by a command name to also see ")#62
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#63
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#64
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"unsupported command-line options.")#65
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#66
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#67
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,()V)#68
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#69
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"Commands:")#70
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#71
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#72
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,()V)#73
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#74
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#75
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,4)#76
randoop.main.Help.handle([Ljava/lang/String;)Z#Goto(99)#77
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,4)#99
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#100
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(I,0)#101
randoop.main.Help.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,78)#102
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,4)#78
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#79
randoop.main.Help.handle([Ljava/lang/String;)Z#CheckCast(Lrandoop/main/CommandHandler;)#80
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,3)#81
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#82
randoop.main.Help.handle([Ljava/lang/String;)Z#New(Ljava/lang/StringBuilder;,0)#83
randoop.main.Help.handle([Ljava/lang/String;)Z#Dup(1,0)#84
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,3)#85
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fcommand)#86
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(STATIC,Ljava/lang/String;,valueOf,(Ljava/lang/Object;)Ljava/lang/String;)#87
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#88
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;," -- ")#89
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#90
randoop.main.Help.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,3)#91
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fpitch)#92
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#93
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#94
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(I,70)#95
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(I,8)#96
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/util/Util;,hangingParagraph,(Ljava/lang/String;II)Ljava/lang/String;)#97
randoop.util.Util.<clinit>()V#Constant(Ljava/lang/String;,"line.separator")#0
randoop.util.Util.<clinit>()V#Invoke(STATIC,Ljava/lang/System;,getProperty,(Ljava/lang/String;)Ljava/lang/String;)#1
randoop.util.Util.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/util/Util;,newLine)#2
randoop.util.Util.<clinit>()V#Return(V)#3
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Constant(L;,null)#1
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(I,2)#8
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(I,1)#9
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#ConditionalBranch(I,le,16)#10
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#16
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Dup(1,0)#17
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,()V)#18
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,3)#19
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#New(Lrandoop/util/StringLineIterator;,0)#20
randoop.util.StringLineIterator.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@82f2736a)#0
randoop.util.StringLineIterator.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.util.StringLineIterator.<clinit>()V#Constant(I,0)#2
randoop.util.StringLineIterator.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.util.StringLineIterator.<clinit>()V#Constant(I,1)#4
randoop.util.StringLineIterator.<clinit>()V#Goto(7)#5
randoop.util.StringLineIterator.<clinit>()V#Put(Z,STATIC,Lrandoop/util/StringLineIterator;,$assertionsDisabled)#7
randoop.util.StringLineIterator.<clinit>()V#Return(V)#8
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Dup(1,0)#21
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#22
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Invoke(SPECIAL,Lrandoop/util/StringLineIterator;,<init>,(Ljava/lang/String;)V)#23
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Constant(L;,null)#3
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#10
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#New(Ljava/util/LinkedList;,0)#11
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Dup(1,0)#12
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#13
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Constant(Ljava/lang/String;,"\s")#14
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Invoke(VIRTUAL,Ljava/lang/String;,split,(Ljava/lang/String;)[Ljava/lang/String;)#15
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Invoke(STATIC,Ljava/util/Arrays;,asList,([Ljava/lang/Object;)Ljava/util/List;)#16
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Invoke(SPECIAL,Ljava/util/LinkedList;,<init>,(Ljava/util/Collection;)V)#17
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Put(Ljava/util/Queue;,NONSTATIC,Lrandoop/util/StringLineIterator;,words)#18
randoop.util.StringLineIterator.<init>(Ljava/lang/String;)V#Return(V)#19
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,4)#24
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Constant(I,1)#25
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalStore(I,5)#26
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Goto(78)#27
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,4)#78
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Invoke(VIRTUAL,Lrandoop/util/StringLineIterator;,hasMoreWords,()Z)#79
randoop.util.StringLineIterator.hasMoreWords()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.StringLineIterator.hasMoreWords()Z#Get(Ljava/util/Queue;,NONSTATIC,Lrandoop/util/StringLineIterator;,words)#1
randoop.util.StringLineIterator.hasMoreWords()Z#Invoke(INTERFACE,Ljava/util/Queue;,size,()I)#2
randoop.util.StringLineIterator.hasMoreWords()Z#Constant(I,0)#3
randoop.util.StringLineIterator.hasMoreWords()Z#ConditionalBranch(I,le,7)#4
randoop.util.StringLineIterator.hasMoreWords()Z#Constant(I,1)#5
randoop.util.StringLineIterator.hasMoreWords()Z#Return(I)#6
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Constant(I,0)#80
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#ConditionalBranch(I,ne,28)#81
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(I,5)#28
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Constant(I,0)#29
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#ConditionalBranch(I,eq,34)#30
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(I,1)#31
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalStore(I,6)#32
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Goto(38)#33
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,4)#38
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(I,6)#39
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Invoke(VIRTUAL,Lrandoop/util/StringLineIterator;,nextLine,(I)Ljava/lang/String;)#40
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(I,1)#0
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(I,0)#1
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#ConditionalBranch(I,ge,8)#2
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(VIRTUAL,Lrandoop/util/StringLineIterator;,hasMoreWords,()Z)#9
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(I,0)#10
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#ConditionalBranch(I,ne,17)#11
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#New(Ljava/lang/StringBuffer;,0)#17
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Dup(1,0)#18
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(Ljava/lang/String;,"")#19
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuffer;,<init>,(Ljava/lang/String;)V)#20
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,2)#21
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Get(Z,STATIC,Lrandoop/util/StringLineIterator;,$assertionsDisabled)#22
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(I,0)#23
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#ConditionalBranch(I,ne,33)#24
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#33
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Get(Ljava/util/Queue;,NONSTATIC,Lrandoop/util/StringLineIterator;,words)#34
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(INTERFACE,Ljava/util/Queue;,peek,()Ljava/lang/Object;)#35
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#CheckCast(Ljava/lang/String;)#36
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,3)#37
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,3)#38
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(L;,null)#39
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#ConditionalBranch(Ljava/lang/Object;,ne,44)#40
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#44
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuffer;,length,()I)#45
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#46
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuffer;,length,()I)#47
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(I,0)#48
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#ConditionalBranch(I,le,52)#49
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(I,0)#52
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#BinaryOp(I,add)#53
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,3)#54
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,length,()I)#55
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#BinaryOp(I,add)#56
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalStore(I,4)#57
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(I,4)#58
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(I,1)#59
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#ConditionalBranch(I,le,64)#60
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#64
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuffer;,length,()I)#65
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(I,0)#66
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#ConditionalBranch(I,le,72)#67
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#72
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,3)#73
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuffer;,append,(Ljava/lang/String;)Ljava/lang/StringBuffer;)#74
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Pop(1)#75
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#76
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Get(Ljava/util/Queue;,NONSTATIC,Lrandoop/util/StringLineIterator;,words)#77
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(INTERFACE,Ljava/util/Queue;,remove,()Ljava/lang/Object;)#78
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Pop(1)#79
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Goto(22)#80
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(I,1)#50
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Goto(53)#51
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#68
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Constant(Ljava/lang/String;," ")#69
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuffer;,append,(Ljava/lang/String;)Ljava/lang/StringBuffer;)#70
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Pop(1)#71
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#41
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuffer;,toString,()Ljava/lang/String;)#42
randoop.util.StringLineIterator.nextLine(I)Ljava/lang/String;#Return(Ljava/lang/Object;)#43
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,7)#41
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,7)#42
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,length,()I)#43
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Constant(I,0)#44
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#ConditionalBranch(I,ne,51)#45
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(I,5)#51
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Constant(I,0)#52
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#ConditionalBranch(I,ne,68)#53
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,3)#68
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,7)#69
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#70
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Pop(1)#71
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,3)#72
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Get(Ljava/lang/String;,STATIC,Lrandoop/Globals;,lineSep)#73
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#74
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Pop(1)#75
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Constant(I,0)#76
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalStore(I,5)#77
randoop.util.StringLineIterator.hasMoreWords()Z#Constant(I,0)#7
randoop.util.StringLineIterator.hasMoreWords()Z#Return(I)#8
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,3)#82
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#83
randoop.util.Util.hangingParagraph(Ljava/lang/String;II)Ljava/lang/String;#Return(Ljava/lang/Object;)#84
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#98
randoop.main.Help.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#103
randoop.main.Help.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,()V)#104
randoop.main.Help.handle([Ljava/lang/String;)Z#Goto(166)#105
randoop.main.Help.handle([Ljava/lang/String;)Z#Constant(I,1)#166
randoop.main.Help.handle([Ljava/lang/String;)Z#Return(I)#167
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(I,6)#98
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,6)#99
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#100
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,ne,200)#101
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,6)#200
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#201
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,ne,217)#202
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Return(V)#217
randoop.main.Main.main([Ljava/lang/String;)V#Return(V)#7
