randoop.main.Main.<clinit>()V#New(Ljava/util/ArrayList;,0)#0
randoop.main.Main.<clinit>()V#Dup(1,0)#1
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.main.Main.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#3
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#4
randoop.main.Main.<clinit>()V#New(Lrandoop/main/GenTests;,0)#5
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#0
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#1
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,testclass)#3
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#4
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,classlist)#5
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#6
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,methodlist)#7
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#8
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/regex/Pattern;,STATIC,Lrandoop/main/GenInputsAbstract;,omitmethods)#9
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1)#10
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,public_only)#11
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#12
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,init_routine)#13
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#14
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,silently_ignore_bad_class_names)#15
randoop.main.GenInputsAbstract.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,NONE)#16
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,0)#0
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#1
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(Ljava/lang/String;,"NONE")#2
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,0)#3
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,<init>,(Ljava/lang/String;I)V)#4
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#LocalLoad(I,2)#2
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#Invoke(SPECIAL,Ljava/lang/Enum;,<init>,(Ljava/lang/String;I)V)#3
randoop.main.GenInputsAbstract$ClassLiteralsMode.<init>(Ljava/lang/String;I)V#Return(V)#4
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,NONE)#5
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,0)#6
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#7
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(Ljava/lang/String;,"CLASS")#8
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,1)#9
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,<init>,(Ljava/lang/String;I)V)#10
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,CLASS)#11
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,0)#12
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#13
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(Ljava/lang/String;,"PACKAGE")#14
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,2)#15
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,<init>,(Ljava/lang/String;I)V)#16
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,PACKAGE)#17
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,0)#18
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#19
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(Ljava/lang/String;,"ALL")#20
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,3)#21
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,<init>,(Ljava/lang/String;I)V)#22
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,ALL)#23
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,4)#24
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#New([Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,1)#25
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#26
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,0)#27
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,NONE)#28
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#29
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#30
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,1)#31
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,CLASS)#32
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#33
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#34
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,2)#35
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,PACKAGE)#36
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#37
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Dup(1,0)#38
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Constant(I,3)#39
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,ALL)#40
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#41
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Put([Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,ENUM$VALUES)#42
randoop.main.GenInputsAbstract$ClassLiteralsMode.<clinit>()V#Return(V)#43
randoop.main.GenInputsAbstract.<clinit>()V#Put(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract;,literals_level)#17
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#18
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#19
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#20
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,literals_file)#21
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#22
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,randomseed)#23
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100)#24
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,timelimit)#25
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100000000)#26
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,inputlimit)#27
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100000000)#28
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,outputlimit)#29
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100)#30
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,maxsize)#31
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1)#32
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,forbid_null)#33
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,10000)#34
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,string_maxlen)#35
randoop.main.GenInputsAbstract.<clinit>()V#Constant(D,0.0)#36
randoop.main.GenInputsAbstract.<clinit>()V#Put(D,STATIC,Lrandoop/main/GenInputsAbstract;,null_ratio)#37
randoop.main.GenInputsAbstract.<clinit>()V#Constant(D,0.0)#38
randoop.main.GenInputsAbstract.<clinit>()V#Put(D,STATIC,Lrandoop/main/GenInputsAbstract;,alias_ratio)#39
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#40
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,small_tests)#41
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,100000000)#42
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,clear)#43
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#44
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/io/File;,STATIC,Lrandoop/main/GenInputsAbstract;,observers)#45
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1)#46
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,check_object_contracts)#47
randoop.main.GenInputsAbstract.<clinit>()V#Constant(Ljava/lang/String;,"all")#48
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_tests)#49
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,500)#50
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,testsperfile)#51
randoop.main.GenInputsAbstract.<clinit>()V#Constant(Ljava/lang/String;,"RandoopTest")#52
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,junit_classname)#53
randoop.main.GenInputsAbstract.<clinit>()V#Constant(Ljava/lang/String;,"")#54
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,junit_package_name)#55
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#56
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,junit_output_dir)#57
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#58
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,dont_output_tests)#59
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#60
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,output_nonexec)#61
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#62
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/regex/Pattern;,STATIC,Lrandoop/main/GenInputsAbstract;,test_classes)#63
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#64
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#65
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#66
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,system_props)#67
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#68
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,agent)#69
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1000)#70
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,mem_megabytes)#71
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#72
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,capture_output)#73
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#74
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#75
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#76
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,componentfile_ser)#77
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#78
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#79
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#80
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,componentfile_txt)#81
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#82
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_components)#83
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#84
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_tests_serialized)#85
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,-1)#86
randoop.main.GenInputsAbstract.<clinit>()V#Put(I,STATIC,Lrandoop/main/GenInputsAbstract;,comm_port)#87
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#88
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,noprogressdisplay)#89
randoop.main.GenInputsAbstract.<clinit>()V#Constant(J,5000)#90
randoop.main.GenInputsAbstract.<clinit>()V#Put(J,STATIC,Lrandoop/main/GenInputsAbstract;,progressinterval)#91
randoop.main.GenInputsAbstract.<clinit>()V#New(Ljava/util/ArrayList;,0)#92
randoop.main.GenInputsAbstract.<clinit>()V#Dup(1,0)#93
randoop.main.GenInputsAbstract.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#94
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,visitor)#95
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#96
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#97
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#98
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/io/FileWriter;,STATIC,Lrandoop/main/GenInputsAbstract;,log)#99
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#100
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,dontexecute)#101
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#102
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,long_format)#103
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#104
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_covmap)#105
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#106
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,output_cov_witnesses)#107
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#108
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,always_use_ints_as_objects)#109
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#110
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,coverage_instrumented_classes)#111
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#112
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_branches)#113
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,1)#114
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,remove_subsequences)#115
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#116
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,compare_checks)#117
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#118
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/io/File;,STATIC,Lrandoop/main/GenInputsAbstract;,clean_checks)#119
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#120
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,print_diff_obs)#121
randoop.main.GenInputsAbstract.<clinit>()V#Constant(L;,null)#122
randoop.main.GenInputsAbstract.<clinit>()V#Put(Ljava/io/FileWriter;,STATIC,Lrandoop/main/GenInputsAbstract;,expfile)#123
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#124
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,offline)#125
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#126
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,repeat_heuristic)#127
randoop.main.GenInputsAbstract.<clinit>()V#Constant(I,0)#128
randoop.main.GenInputsAbstract.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenInputsAbstract;,use_object_cache)#129
randoop.main.GenInputsAbstract.<clinit>()V#Return(V)#130
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e7e2da63)#0
randoop.main.GenTests.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.main.GenTests.<clinit>()V#Constant(I,0)#2
randoop.main.GenTests.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.main.GenTests.<clinit>()V#Constant(I,1)#4
randoop.main.GenTests.<clinit>()V#Goto(7)#5
randoop.main.GenTests.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenTests;,$assertionsDisabled)#7
randoop.main.GenTests.<clinit>()V#New(Ljava/util/ArrayList;,0)#8
randoop.main.GenTests.<clinit>()V#Dup(1,0)#9
randoop.main.GenTests.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#10
randoop.main.GenTests.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#11
randoop.main.GenTests.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#12
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/String;,"Randoop executes the code under test, with no mechanisms to protect your system from harm resulting from arbitrary code execution. If random execution of your code could have undesirable effects (e.g. deletion of files, opening network connections, etc.) make sure you execute Randoop in a sandbox machine.")#13
randoop.main.GenTests.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#14
randoop.main.GenTests.<clinit>()V#Pop(1)#15
randoop.main.GenTests.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#16
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/String;,"Randoop will only use methods from the classes that you specify for testing. If Randoop is not generating tests for a particular method, make sure that you are including classes for the types that the method requires. Otherwise, Randoop may fail to generate tests due to missing input parameters.")#17
randoop.main.GenTests.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#18
randoop.main.GenTests.<clinit>()V#Pop(1)#19
randoop.main.GenTests.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#20
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/String;,"Randoop is designed to be deterministic when the code under test is itself deterministic. This means that two runs of Randoop will generate the same tests. To get variation across runs, use the --randomseed option.")#21
randoop.main.GenTests.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#22
randoop.main.GenTests.<clinit>()V#Pop(1)#23
randoop.main.GenTests.<clinit>()V#Constant(I,0)#24
randoop.main.GenTests.<clinit>()V#Put(Z,STATIC,Lrandoop/main/GenTests;,system_test_run)#25
randoop.main.GenTests.<clinit>()V#Constant(L;,null)#26
randoop.main.GenTests.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,check_valid_objects)#27
randoop.main.GenTests.<clinit>()V#Constant(L;,null)#28
randoop.main.GenTests.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,inputsequences)#29
randoop.main.GenTests.<clinit>()V#New(Lplume/SimpleLog;,0)#30
randoop.main.GenTests.<clinit>()V#Dup(1,0)#31
randoop.main.GenTests.<clinit>()V#Constant(I,1)#32
randoop.main.GenTests.<clinit>()V#Invoke(SPECIAL,Lplume/SimpleLog;,<init>,(Z)V)#33
randoop.main.GenTests.<clinit>()V#Put(Lplume/SimpleLog;,STATIC,Lrandoop/main/GenTests;,progress)#34
randoop.main.GenTests.<clinit>()V#New(Lplume/Options;,0)#35
randoop.main.GenTests.<clinit>()V#Dup(1,0)#36
randoop.main.GenTests.<clinit>()V#Constant(I,5)#37
randoop.main.GenTests.<clinit>()V#New([Ljava/lang/Object;,1)#38
randoop.main.GenTests.<clinit>()V#Dup(1,0)#39
randoop.main.GenTests.<clinit>()V#Constant(I,0)#40
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e7e2da63)#41
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#42
randoop.main.GenTests.<clinit>()V#Dup(1,0)#43
randoop.main.GenTests.<clinit>()V#Constant(I,1)#44
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@93172fc5)#45
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#46
randoop.main.GenTests.<clinit>()V#Dup(1,0)#47
randoop.main.GenTests.<clinit>()V#Constant(I,2)#48
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@333eddf)#49
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#50
randoop.main.GenTests.<clinit>()V#Dup(1,0)#51
randoop.main.GenTests.<clinit>()V#Constant(I,3)#52
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@a89e04dc)#53
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#54
randoop.main.GenTests.<clinit>()V#Dup(1,0)#55
randoop.main.GenTests.<clinit>()V#Constant(I,4)#56
randoop.main.GenTests.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@d9608b59)#57
randoop.main.GenTests.<clinit>()V#ArrayStore(Ljava/lang/Object;)#58
randoop.main.GenTests.<clinit>()V#Invoke(SPECIAL,Lplume/Options;,<init>,([Ljava/lang/Object;)V)#59
randoop.util.ReflectionExecutor.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@333eddf)#0
randoop.util.ReflectionExecutor.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,0)#2
randoop.util.ReflectionExecutor.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,1)#4
randoop.util.ReflectionExecutor.<clinit>()V#Goto(7)#5
randoop.util.ReflectionExecutor.<clinit>()V#Put(Z,STATIC,Lrandoop/util/ReflectionExecutor;,$assertionsDisabled)#7
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,1)#8
randoop.util.ReflectionExecutor.<clinit>()V#Put(Z,STATIC,Lrandoop/util/ReflectionExecutor;,usethreads)#9
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,5000)#10
randoop.util.ReflectionExecutor.<clinit>()V#Put(I,STATIC,Lrandoop/util/ReflectionExecutor;,timeout)#11
randoop.util.ReflectionExecutor.<clinit>()V#Constant(J,0)#12
randoop.util.ReflectionExecutor.<clinit>()V#Put(J,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_accum)#13
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,0)#14
randoop.util.ReflectionExecutor.<clinit>()V#Put(I,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_count)#15
randoop.util.ReflectionExecutor.<clinit>()V#Constant(J,0)#16
randoop.util.ReflectionExecutor.<clinit>()V#Put(J,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_accum)#17
randoop.util.ReflectionExecutor.<clinit>()V#Constant(I,0)#18
randoop.util.ReflectionExecutor.<clinit>()V#Put(I,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_count)#19
randoop.util.ReflectionExecutor.<clinit>()V#Return(V)#20
randoop.AbstractGenerator.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@d9608b59)#0
randoop.AbstractGenerator.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.AbstractGenerator.<clinit>()V#Constant(I,0)#2
randoop.AbstractGenerator.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.AbstractGenerator.<clinit>()V#Constant(I,1)#4
randoop.AbstractGenerator.<clinit>()V#Goto(7)#5
randoop.AbstractGenerator.<clinit>()V#Put(Z,STATIC,Lrandoop/AbstractGenerator;,$assertionsDisabled)#7
randoop.AbstractGenerator.<clinit>()V#Constant(I,0)#8
randoop.AbstractGenerator.<clinit>()V#Put(Z,STATIC,Lrandoop/AbstractGenerator;,dump_sequences)#9
randoop.AbstractGenerator.<clinit>()V#Constant(L;,null)#10
randoop.AbstractGenerator.<clinit>()V#Put(Lrandoop/Sequence;,STATIC,Lrandoop/AbstractGenerator;,currSeq)#11
randoop.AbstractGenerator.<clinit>()V#Return(V)#12
randoop.main.GenTests.<clinit>()V#Put(Lplume/Options;,STATIC,Lrandoop/main/GenTests;,options)#60
randoop.main.GenTests.<clinit>()V#Return(V)#61
randoop.main.Main.<clinit>()V#Dup(1,0)#6
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/GenTests;,<init>,()V)#7
randoop.main.GenTests.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"gentests")#1
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"Generates unit tests for a set of classes.")#2
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"gentests OPTIONS")#3
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"At least one class is specified via `--testclass' or `--classlist'.")#4
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"Attempts to generate JUnit tests that capture the behavior of the classes under test and/or find contract violations. Randoop generates tests using feedback-directed random test generation. ")#5
randoop.main.GenTests.<init>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,notes)#6
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"One or more names of classes to test. A class to test can be specified via the `--testclass=<CLASSNAME>' or `--classlist=<FILENAME>' options.")#7
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"A JUnit test suite (as one or more Java source files). The tests in the suite will pass when executed using the classes under test.")#8
randoop.main.GenTests.<init>()V#Constant(Ljava/lang/String;,"java randoop.main.Main gentests --testclass=java.util.Collections  --testclass=java.util.TreeSet")#9
randoop.main.GenTests.<init>()V#Get(Lplume/Options;,STATIC,Lrandoop/main/GenTests;,options)#10
randoop.main.GenTests.<init>()V#Invoke(SPECIAL,Lrandoop/main/GenInputsAbstract;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,2)#2
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,3)#3
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,4)#4
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,5)#5
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,6)#6
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,7)#7
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,8)#8
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,9)#9
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,10)#10
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#3
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#10
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fcommand)#12
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,2)#14
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#15
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,19)#16
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,2)#19
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fpitch)#20
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#21
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,3)#22
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#23
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,27)#24
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,3)#27
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fcommandGrammar)#28
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#29
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,4)#30
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#31
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,35)#32
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,4)#35
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fwhere)#36
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#37
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,5)#38
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#39
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,43)#40
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,5)#43
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fsummary)#44
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#45
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,6)#46
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#47
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,53)#48
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,6)#53
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/main/CommandHandler;,fnotes)#54
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#55
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,7)#56
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#57
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,61)#58
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,7)#61
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,finput)#62
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#63
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,8)#64
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#65
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,69)#66
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,8)#69
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,foutput)#70
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#71
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,9)#72
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(L;,null)#73
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#ConditionalBranch(Ljava/lang/Object;,ne,77)#74
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,9)#77
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fexample)#78
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,0)#79
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#LocalLoad(Ljava/lang/Object;,10)#80
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Put(Lplume/Options;,NONSTATIC,Lrandoop/main/CommandHandler;,foptions)#81
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Return(V)#82
randoop.main.GenInputsAbstract.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Return(V)#12
randoop.main.GenTests.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#8
randoop.main.Main.<clinit>()V#Pop(1)#9
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#10
randoop.main.Main.<clinit>()V#New(Lrandoop/main/Help;,0)#11
randoop.main.Help.<clinit>()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#0
randoop.main.Help.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/main/Help;,out)#1
randoop.main.Help.<clinit>()V#Constant(I,0)#2
randoop.main.Help.<clinit>()V#Put(Z,STATIC,Lrandoop/main/Help;,unpub)#3
randoop.main.Help.<clinit>()V#Return(V)#4
randoop.main.Main.<clinit>()V#Dup(1,0)#12
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/Help;,<init>,()V)#13
randoop.main.Help.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"help")#1
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"Displays a help message for a given command.")#2
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"help")#3
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"")#4
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"Displays a help message for a given command.")#5
randoop.main.Help.<init>()V#Constant(L;,null)#6
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"None (for the general help message), or the name of a command (for command-specific help).")#7
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"A help message is printed to stdout.")#8
randoop.main.Help.<init>()V#Constant(Ljava/lang/String;,"")#9
randoop.main.Help.<init>()V#New(Lplume/Options;,0)#10
randoop.main.Help.<init>()V#Dup(1,0)#11
randoop.main.Help.<init>()V#Constant(I,1)#12
randoop.main.Help.<init>()V#New([Ljava/lang/Object;,1)#13
randoop.main.Help.<init>()V#Dup(1,0)#14
randoop.main.Help.<init>()V#Constant(I,0)#15
randoop.main.Help.<init>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@17d11ad3)#16
randoop.main.Help.<init>()V#ArrayStore(Ljava/lang/Object;)#17
randoop.main.Help.<init>()V#Invoke(SPECIAL,Lplume/Options;,<init>,([Ljava/lang/Object;)V)#18
randoop.main.Help.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#19
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#New(Ljava/util/ArrayList;,0)#49
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Dup(1,0)#50
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#51
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(54)#52
randoop.main.Help.<init>()V#Return(V)#20
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#14
randoop.main.Main.<clinit>()V#Pop(1)#15
randoop.main.Main.<clinit>()V#New(Ljava/util/ArrayList;,0)#16
randoop.main.Main.<clinit>()V#Dup(1,0)#17
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#18
randoop.main.Main.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#19
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#20
randoop.main.Main.<clinit>()V#New(Lrandoop/main/CovUtils;,0)#21
randoop.main.CovUtils.<clinit>()V#Constant(Ljava/lang/String;,"cov")#0
randoop.main.CovUtils.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/CovUtils;,command)#1
randoop.main.CovUtils.<clinit>()V#Return(V)#2
randoop.main.Main.<clinit>()V#Dup(1,0)#22
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/CovUtils;,<init>,()V)#23
randoop.main.CovUtils.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.CovUtils.<init>()V#Get(Ljava/lang/String;,STATIC,Lrandoop/main/CovUtils;,command)#1
randoop.main.CovUtils.<init>()V#Constant(L;,null)#2
randoop.main.CovUtils.<init>()V#Constant(L;,null)#3
randoop.main.CovUtils.<init>()V#Constant(L;,null)#4
randoop.main.CovUtils.<init>()V#Constant(L;,null)#5
randoop.main.CovUtils.<init>()V#Constant(L;,null)#6
randoop.main.CovUtils.<init>()V#Constant(L;,null)#7
randoop.main.CovUtils.<init>()V#Constant(L;,null)#8
randoop.main.CovUtils.<init>()V#Constant(L;,null)#9
randoop.main.CovUtils.<init>()V#Constant(L;,null)#10
randoop.main.CovUtils.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#17
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(20)#18
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#25
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(28)#26
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#33
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(36)#34
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#41
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(44)#42
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#59
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(62)#60
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#67
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(70)#68
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Constant(Ljava/lang/String;,"undocumented")#75
randoop.main.CommandHandler.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V#Goto(78)#76
randoop.main.CovUtils.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#24
randoop.main.Main.<clinit>()V#Pop(1)#25
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#26
randoop.main.Main.<clinit>()V#New(Lrandoop/main/ExecuteSequence;,0)#27
randoop.main.ExecuteSequence.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@880916ea)#0
randoop.main.ExecuteSequence.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.main.ExecuteSequence.<clinit>()V#Constant(I,0)#2
randoop.main.ExecuteSequence.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.main.ExecuteSequence.<clinit>()V#Constant(I,1)#4
randoop.main.ExecuteSequence.<clinit>()V#Goto(7)#5
randoop.main.ExecuteSequence.<clinit>()V#Put(Z,STATIC,Lrandoop/main/ExecuteSequence;,$assertionsDisabled)#7
randoop.main.ExecuteSequence.<clinit>()V#Return(V)#8
randoop.main.Main.<clinit>()V#Dup(1,0)#28
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/ExecuteSequence;,<init>,()V)#29
randoop.main.ExecuteSequence.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.ExecuteSequence.<init>()V#Constant(Ljava/lang/String;,"exec")#1
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#2
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#3
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#4
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#5
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#6
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#7
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#8
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#9
randoop.main.ExecuteSequence.<init>()V#Constant(L;,null)#10
randoop.main.ExecuteSequence.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.ExecuteSequence.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#30
randoop.main.Main.<clinit>()V#Pop(1)#31
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#32
randoop.main.Main.<clinit>()V#New(Lrandoop/main/CleanObservations;,0)#33
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@b7f22c50)#0
randoop.main.CleanObservations.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.main.CleanObservations.<clinit>()V#Constant(I,0)#2
randoop.main.CleanObservations.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.main.CleanObservations.<clinit>()V#Constant(I,1)#4
randoop.main.CleanObservations.<clinit>()V#Goto(7)#5
randoop.main.CleanObservations.<clinit>()V#Put(Z,STATIC,Lrandoop/main/CleanObservations;,$assertionsDisabled)#7
randoop.main.CleanObservations.<clinit>()V#Constant(L;,null)#8
randoop.main.CleanObservations.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/CleanObservations;,where)#9
randoop.main.CleanObservations.<clinit>()V#New(Ljava/util/ArrayList;,0)#10
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#11
randoop.main.CleanObservations.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#12
randoop.main.CleanObservations.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#13
randoop.main.CleanObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#14
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/String;,"This command is needed because discarded sequences in the ")#15
randoop.main.CleanObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#16
randoop.main.CleanObservations.<clinit>()V#Pop(1)#17
randoop.main.CleanObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#18
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/String;,"initial run of Randoop may have changed the global state in a ")#19
randoop.main.CleanObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#20
randoop.main.CleanObservations.<clinit>()V#Pop(1)#21
randoop.main.CleanObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#22
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/String;,"way that might change the values of the checks")#23
randoop.main.CleanObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#24
randoop.main.CleanObservations.<clinit>()V#Pop(1)#25
randoop.main.CleanObservations.<clinit>()V#New(Lplume/Options;,0)#26
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#27
randoop.main.CleanObservations.<clinit>()V#Constant(I,3)#28
randoop.main.CleanObservations.<clinit>()V#New([Ljava/lang/Object;,1)#29
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#30
randoop.main.CleanObservations.<clinit>()V#Constant(I,0)#31
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@b7f22c50)#32
randoop.main.CleanObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#33
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#34
randoop.main.CleanObservations.<clinit>()V#Constant(I,1)#35
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@93172fc5)#36
randoop.main.CleanObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#37
randoop.main.CleanObservations.<clinit>()V#Dup(1,0)#38
randoop.main.CleanObservations.<clinit>()V#Constant(I,2)#39
randoop.main.CleanObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@333eddf)#40
randoop.main.CleanObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#41
randoop.main.CleanObservations.<clinit>()V#Invoke(SPECIAL,Lplume/Options;,<init>,([Ljava/lang/Object;)V)#42
randoop.main.CleanObservations.<clinit>()V#Put(Lplume/Options;,STATIC,Lrandoop/main/CleanObservations;,options)#43
randoop.main.CleanObservations.<clinit>()V#Return(V)#44
randoop.main.Main.<clinit>()V#Dup(1,0)#34
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/CleanObservations;,<init>,()V)#35
randoop.main.CleanObservations.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"cleanobs")#1
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"Creates clean checks for a serialized sequence")#2
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"cleanobs OPTIONS")#3
randoop.main.CleanObservations.<init>()V#Get(Ljava/lang/String;,STATIC,Lrandoop/main/CleanObservations;,where)#4
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"Recreates checks for the sequence, thus ensuring that they are created with the correct global state")#5
randoop.main.CleanObservations.<init>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/CleanObservations;,notes)#6
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"Serialized file containing List<ExecutableSequence>")#7
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"Serialized file with List<ExecutableSequence> with clean checks")#8
randoop.main.CleanObservations.<init>()V#Constant(Ljava/lang/String;,"java randoop.main.Main cleanobs in-seq-file out-seq-file")#9
randoop.main.CleanObservations.<init>()V#Get(Lplume/Options;,STATIC,Lrandoop/main/CleanObservations;,options)#10
randoop.main.CleanObservations.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.CleanObservations.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#36
randoop.main.Main.<clinit>()V#Pop(1)#37
randoop.main.Main.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#38
randoop.main.Main.<clinit>()V#New(Lrandoop/main/RmDiffObservations;,0)#39
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1a9f5a8d)#0
randoop.main.RmDiffObservations.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,0)#2
randoop.main.RmDiffObservations.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,1)#4
randoop.main.RmDiffObservations.<clinit>()V#Goto(7)#5
randoop.main.RmDiffObservations.<clinit>()V#Put(Z,STATIC,Lrandoop/main/RmDiffObservations;,$assertionsDisabled)#7
randoop.main.RmDiffObservations.<clinit>()V#Constant(L;,null)#8
randoop.main.RmDiffObservations.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/main/RmDiffObservations;,where)#9
randoop.main.RmDiffObservations.<clinit>()V#New(Ljava/util/ArrayList;,0)#10
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#11
randoop.main.RmDiffObservations.<clinit>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#12
randoop.main.RmDiffObservations.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#13
randoop.main.RmDiffObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#14
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/String;,"This command is needed because checks may cover ")#15
randoop.main.RmDiffObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#16
randoop.main.RmDiffObservations.<clinit>()V#Pop(1)#17
randoop.main.RmDiffObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#18
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/String;,"values that are not repeateable, such as values that depend")#19
randoop.main.RmDiffObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#20
randoop.main.RmDiffObservations.<clinit>()V#Pop(1)#21
randoop.main.RmDiffObservations.<clinit>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#22
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/String;,"on the current date/time")#23
randoop.main.RmDiffObservations.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#24
randoop.main.RmDiffObservations.<clinit>()V#Pop(1)#25
randoop.main.RmDiffObservations.<clinit>()V#New(Lplume/Options;,0)#26
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#27
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,3)#28
randoop.main.RmDiffObservations.<clinit>()V#New([Ljava/lang/Object;,1)#29
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#30
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,0)#31
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1a9f5a8d)#32
randoop.main.RmDiffObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#33
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#34
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,1)#35
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@93172fc5)#36
randoop.main.RmDiffObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#37
randoop.main.RmDiffObservations.<clinit>()V#Dup(1,0)#38
randoop.main.RmDiffObservations.<clinit>()V#Constant(I,2)#39
randoop.main.RmDiffObservations.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@333eddf)#40
randoop.main.RmDiffObservations.<clinit>()V#ArrayStore(Ljava/lang/Object;)#41
randoop.main.RmDiffObservations.<clinit>()V#Invoke(SPECIAL,Lplume/Options;,<init>,([Ljava/lang/Object;)V)#42
randoop.main.RmDiffObservations.<clinit>()V#Put(Lplume/Options;,STATIC,Lrandoop/main/RmDiffObservations;,options)#43
randoop.main.RmDiffObservations.<clinit>()V#Return(V)#44
randoop.main.Main.<clinit>()V#Dup(1,0)#40
randoop.main.Main.<clinit>()V#Invoke(SPECIAL,Lrandoop/main/RmDiffObservations;,<init>,()V)#41
randoop.main.RmDiffObservations.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"rm-diff-obs")#1
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"Removes any non-determinstic checks from a serialized sequence")#2
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"rm-diff-obs OPTIONS")#3
randoop.main.RmDiffObservations.<init>()V#Get(Ljava/lang/String;,STATIC,Lrandoop/main/RmDiffObservations;,where)#4
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"Recreates checks for the sequence, and removes any that don't match")#5
randoop.main.RmDiffObservations.<init>()V#Get(Ljava/util/List;,STATIC,Lrandoop/main/RmDiffObservations;,notes)#6
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"Serialized file containing List<ExecutableSequence>")#7
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"Serialized file with List<ExecutableSequence> with deterministic obs")#8
randoop.main.RmDiffObservations.<init>()V#Constant(Ljava/lang/String;,"java randoop.main.Main rm-diff-obs in-seq-file out-seq-file")#9
randoop.main.RmDiffObservations.<init>()V#Get(Lplume/Options;,STATIC,Lrandoop/main/RmDiffObservations;,options)#10
randoop.main.RmDiffObservations.<init>()V#Invoke(SPECIAL,Lrandoop/main/CommandHandler;,<init>,(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/util/List;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Lplume/Options;)V)#11
randoop.main.RmDiffObservations.<init>()V#Return(V)#12
randoop.main.Main.<clinit>()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#42
randoop.main.Main.<clinit>()V#Pop(1)#43
randoop.main.Main.<clinit>()V#Return(V)#44
randoop.main.Main.main([Ljava/lang/String;)V#New(Lrandoop/main/Main;,0)#0
randoop.main.Main.main([Ljava/lang/String;)V#Dup(1,0)#1
randoop.main.Main.main([Ljava/lang/String;)V#Invoke(SPECIAL,Lrandoop/main/Main;,<init>,()V)#2
randoop.main.Main.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.main.Main.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.main.Main.<init>()V#Return(V)#2
randoop.main.Main.main([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,1)#3
randoop.main.Main.main([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#4
randoop.main.Main.main([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.main.Main.main([Ljava/lang/String;)V#Invoke(VIRTUAL,Lrandoop/main/Main;,nonStaticMain,([Ljava/lang/String;)V)#6
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLength()#1
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#2
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,ne,11)#3
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#12
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLoad(Ljava/lang/Object;)#13
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,2)#14
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#15
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLength()#16
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,1)#17
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#BinaryOp(I,sub)#18
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#New([Ljava/lang/String;,1)#19
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,3)#20
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,1)#21
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(I,4)#22
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Goto(36)#23
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,4)#36
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#37
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLength()#38
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,lt,24)#39
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,3)#24
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,4)#25
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,1)#26
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#BinaryOp(I,sub)#27
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#28
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,4)#29
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayLoad(Ljava/lang/Object;)#30
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ArrayStore(Ljava/lang/Object;)#31
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,4)#32
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,1)#33
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#BinaryOp(I,add)#34
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(I,4)#35
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(L;,null)#40
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,4)#41
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#New(Ljava/util/ArrayList;,0)#42
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Dup(1,0)#43
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#44
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,5)#45
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,5)#46
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,handlers)#47
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#48
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Pop(1)#49
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,5)#50
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Get(Ljava/util/List;,STATIC,Lrandoop/main/Main;,invisibleHandlers)#51
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#52
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Pop(1)#53
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,5)#54
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#55
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,7)#56
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Goto(70)#57
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,7)#70
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#71
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#72
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,ne,58)#73
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,7)#58
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#59
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#CheckCast(Lrandoop/main/CommandHandler;)#60
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,6)#61
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,6)#62
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,2)#63
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(VIRTUAL,Lrandoop/main/CommandHandler;,handles,(Ljava/lang/String;)Z)#64
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Constant(L;,null)#1
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,ne,5)#2
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,1)#5
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,toUpperCase,()Ljava/lang/String;)#6
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#7
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Get(Ljava/lang/String;,NONSTATIC,Lrandoop/main/CommandHandler;,fcommand)#8
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,toUpperCase,()Ljava/lang/String;)#9
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#10
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Constant(I,0)#11
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#ConditionalBranch(I,eq,15)#12
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Constant(I,1)#13
randoop.main.CommandHandler.handles(Ljava/lang/String;)Z#Return(I)#14
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#65
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,eq,70)#66
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,6)#67
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,4)#68
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Goto(74)#69
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,4)#74
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(L;,null)#75
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(Ljava/lang/Object;,ne,93)#76
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#93
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(I,6)#94
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,4)#95
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,3)#96
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Invoke(VIRTUAL,Lrandoop/main/CommandHandler;,handle,([Ljava/lang/String;)Z)#97
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"handle")#0
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
instrument.Tracer.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#0
instrument.Tracer.<clinit>()V#Dup(1,0)#1
instrument.Tracer.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#2
instrument.Tracer.<clinit>()V#Put(Ljava/util/Map;,STATIC,Linstrument/Tracer;,traceCounts)#3
instrument.Tracer.<clinit>()V#Return(V)#4
instrument.Tracer.trace(Ljava/lang/String;)V#Get(Ljava/util/Map;,STATIC,Linstrument/Tracer;,traceCounts)#0
instrument.Tracer.trace(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#1
instrument.Tracer.trace(Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/Map;,containsKey,(Ljava/lang/Object;)Z)#2
instrument.Tracer.trace(Ljava/lang/String;)V#Constant(I,0)#3
instrument.Tracer.trace(Ljava/lang/String;)V#ConditionalBranch(I,ne,12)#4
instrument.Tracer.trace(Ljava/lang/String;)V#Get(Ljava/util/Map;,STATIC,Linstrument/Tracer;,traceCounts)#5
instrument.Tracer.trace(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#6
instrument.Tracer.trace(Ljava/lang/String;)V#Constant(I,1)#7
instrument.Tracer.trace(Ljava/lang/String;)V#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#8
instrument.Tracer.trace(Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#9
instrument.Tracer.trace(Ljava/lang/String;)V#Pop(1)#10
instrument.Tracer.trace(Ljava/lang/String;)V#Goto(24)#11
instrument.Tracer.trace(Ljava/lang/String;)V#Return(V)#24
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Lplume/Options;,STATIC,Lrandoop/main/GenTests;,options)#2
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,1)#3
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Lplume/Options;,parse,([Ljava/lang/String;)[Ljava/lang/String;)#4
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,2)#5
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,2)#6
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ArrayLength()#7
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#8
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,le,32)#9
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#32
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Lrandoop/main/GenTests;,checkOptionsValid,()V)#33
randoop.main.GenInputsAbstract.checkOptionsValid()V#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_tests)#0
randoop.main.GenInputsAbstract.checkOptionsValid()V#Constant(Ljava/lang/String;,"all")#1
randoop.main.GenInputsAbstract.checkOptionsValid()V#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#2
randoop.main.GenInputsAbstract.checkOptionsValid()V#Constant(I,0)#3
randoop.main.GenInputsAbstract.checkOptionsValid()V#ConditionalBranch(I,ne,53)#4
randoop.main.GenInputsAbstract.checkOptionsValid()V#Get(D,STATIC,Lrandoop/main/GenInputsAbstract;,alias_ratio)#53
randoop.main.GenInputsAbstract.checkOptionsValid()V#Constant(D,0.0)#54
randoop.main.GenInputsAbstract.checkOptionsValid()V#Comparison(D,cmpg)#55
randoop.main.GenInputsAbstract.checkOptionsValid()V#Constant(I,0)#56
randoop.main.GenInputsAbstract.checkOptionsValid()V#ConditionalBranch(I,ge,68)#57
randoop.main.GenInputsAbstract.checkOptionsValid()V#Get(D,STATIC,Lrandoop/main/GenInputsAbstract;,null_ratio)#68
randoop.main.GenInputsAbstract.checkOptionsValid()V#Constant(D,0.0)#69
randoop.main.GenInputsAbstract.checkOptionsValid()V#Comparison(D,cmpg)#70
randoop.main.GenInputsAbstract.checkOptionsValid()V#Constant(I,0)#71
randoop.main.GenInputsAbstract.checkOptionsValid()V#ConditionalBranch(I,ge,83)#72
randoop.main.GenInputsAbstract.checkOptionsValid()V#Get(I,STATIC,Lrandoop/main/GenInputsAbstract;,maxsize)#83
randoop.main.GenInputsAbstract.checkOptionsValid()V#Constant(I,0)#84
randoop.main.GenInputsAbstract.checkOptionsValid()V#ConditionalBranch(I,gt,97)#85
randoop.main.GenInputsAbstract.checkOptionsValid()V#Return(V)#97
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"randomseed@handle")#34
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#35
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(I,STATIC,Lrandoop/main/GenTests;,randomseed)#36
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Conversion(I,J)#37
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/util/Randomness;,reset,(J)V)#38
randoop.util.Randomness.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@6e8f08e3)#0
randoop.util.Randomness.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.util.Randomness.<clinit>()V#Constant(I,0)#2
randoop.util.Randomness.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.util.Randomness.<clinit>()V#Constant(I,1)#4
randoop.util.Randomness.<clinit>()V#Goto(7)#5
randoop.util.Randomness.<clinit>()V#Put(Z,STATIC,Lrandoop/util/Randomness;,$assertionsDisabled)#7
randoop.util.Randomness.<clinit>()V#New(Ljava/util/Random;,0)#8
randoop.util.Randomness.<clinit>()V#Dup(1,0)#9
randoop.util.Randomness.<clinit>()V#Constant(J,0)#10
randoop.util.Randomness.<clinit>()V#Invoke(SPECIAL,Ljava/util/Random;,<init>,(J)V)#11
randoop.util.Randomness.<clinit>()V#Put(Ljava/util/Random;,STATIC,Lrandoop/util/Randomness;,random)#12
randoop.util.Randomness.<clinit>()V#Constant(I,0)#13
randoop.util.Randomness.<clinit>()V#Put(I,STATIC,Lrandoop/util/Randomness;,totalCallsToRandom)#14
randoop.util.Randomness.<clinit>()V#Return(V)#15
randoop.util.Randomness.reset(J)V#New(Ljava/util/Random;,0)#0
randoop.util.Randomness.reset(J)V#Dup(1,0)#1
randoop.util.Randomness.reset(J)V#LocalLoad(J,0)#2
randoop.util.Randomness.reset(J)V#Invoke(SPECIAL,Ljava/util/Random;,<init>,(J)V)#3
randoop.util.Randomness.reset(J)V#Put(Ljava/util/Random;,STATIC,Lrandoop/util/Randomness;,random)#4
randoop.util.Randomness.reset(J)V#Return(V)#5
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Ljava/security/Policy;,getPolicy,()Ljava/security/Policy;)#39
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,2)#40
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,noprogressdisplay)#41
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#42
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,54)#43
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#44
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"policy = %s%n")#45
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,1)#46
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New([Ljava/lang/Object;,1)#47
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#48
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#49
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,2)#50
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ArrayStore(Ljava/lang/Object;)#51
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,printf,(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;)#52
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#53
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,system_props)#54
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#55
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,4)#56
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Goto(87)#57
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,4)#87
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#88
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#89
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,58)#90
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,1)#91
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/main/GenTests;,execute_init_routine,(I)V)#92
randoop.main.GenTests.execute_init_routine(I)V#Constant(Ljava/lang/String;,"execute_init_routine")#0
randoop.main.GenTests.execute_init_routine(I)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.main.GenTests.execute_init_routine(I)V#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,init_routine)#2
randoop.main.GenTests.execute_init_routine(I)V#Constant(L;,null)#3
randoop.main.GenTests.execute_init_routine(I)V#ConditionalBranch(Ljava/lang/Object;,ne,8)#4
randoop.main.GenTests.execute_init_routine(I)V#Constant(Ljava/lang/String;,"NOT null init_routine@execute_init_routine")#5
randoop.main.GenTests.execute_init_routine(I)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#6
randoop.main.GenTests.execute_init_routine(I)V#Return(V)#7
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,classlist)#93
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#94
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,ne,117)#95
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#117
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Lplume/Options;,STATIC,Lrandoop/main/GenTests;,options)#118
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Lrandoop/main/GenTests;,findClassesFromArgs,(Lplume/Options;)Ljava/util/List;)#119
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Constant(Ljava/lang/String;,"findClassesFromArgs")#0
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Constant(Ljava/lang/String;,"findClassesFromArgs")#2
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#3
instrument.Tracer.trace(Ljava/lang/String;)V#Get(Ljava/util/Map;,STATIC,Linstrument/Tracer;,traceCounts)#12
instrument.Tracer.trace(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#13
instrument.Tracer.trace(Ljava/lang/String;)V#Get(Ljava/util/Map;,STATIC,Linstrument/Tracer;,traceCounts)#14
instrument.Tracer.trace(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#15
instrument.Tracer.trace(Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#16
instrument.Tracer.trace(Ljava/lang/String;)V#CheckCast(Ljava/lang/Integer;)#17
instrument.Tracer.trace(Ljava/lang/String;)V#Invoke(VIRTUAL,Ljava/lang/Integer;,intValue,()I)#18
instrument.Tracer.trace(Ljava/lang/String;)V#Constant(I,1)#19
instrument.Tracer.trace(Ljava/lang/String;)V#BinaryOp(I,add)#20
instrument.Tracer.trace(Ljava/lang/String;)V#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#21
instrument.Tracer.trace(Ljava/lang/String;)V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#22
instrument.Tracer.trace(Ljava/lang/String;)V#Pop(1)#23
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#New(Ljava/util/ArrayList;,0)#4
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Dup(1,0)#5
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#6
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,2)#7
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,classlist)#8
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Constant(L;,null)#9
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,eq,24)#10
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Constant(Ljava/lang/String;,"classlist@findClassesFromArgs")#11
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#12
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#New(Ljava/io/File;,0)#13
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Dup(1,0)#14
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,classlist)#15
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(SPECIAL,Ljava/io/File;,<init>,(Ljava/lang/String;)V)#16
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,3)#17
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#18
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#19
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Constant(I,1)#20
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Reflection;,loadClassesFromFile,(Ljava/io/File;Z)Ljava/util/List;)#21
randoop.util.Reflection.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@bae24472)#0
randoop.util.Reflection.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.util.Reflection.<clinit>()V#Constant(I,0)#2
randoop.util.Reflection.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.util.Reflection.<clinit>()V#Constant(I,1)#4
randoop.util.Reflection.<clinit>()V#Goto(7)#5
randoop.util.Reflection.<clinit>()V#Put(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#7
randoop.util.Reflection.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#8
randoop.util.Reflection.<clinit>()V#Dup(1,0)#9
randoop.util.Reflection.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#10
randoop.util.Reflection.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/Reflection;,cached_deserializeMethodOrCtor)#11
randoop.util.Reflection.<clinit>()V#New(Lrandoop/util/Reflection$1;,0)#12
randoop.util.Reflection.<clinit>()V#Dup(1,0)#13
randoop.util.Reflection.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/Reflection$1;,<init>,()V)#14
randoop.util.Reflection$1.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Reflection$1.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.Reflection$1.<init>()V#Return(V)#2
randoop.util.Reflection.<clinit>()V#Put(Ljava/util/Comparator;,STATIC,Lrandoop/util/Reflection;,SORT_MEMBERS_BY_NAME)#15
randoop.util.Reflection.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#16
randoop.util.Reflection.<clinit>()V#Dup(1,0)#17
randoop.util.Reflection.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#18
randoop.util.Reflection.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/Reflection;,canBeUsedCache)#19
randoop.util.Reflection.<clinit>()V#Constant(J,0)#20
randoop.util.Reflection.<clinit>()V#Put(J,STATIC,Lrandoop/util/Reflection;,num_times_canBeUsedAs_called)#21
randoop.util.Reflection.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#22
randoop.util.Reflection.<clinit>()V#Dup(1,0)#23
randoop.util.Reflection.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#24
randoop.util.Reflection.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/Reflection;,cached_isVisible)#25
randoop.util.Reflection.<clinit>()V#Return(V)#26
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#Constant(L;,null)#0
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,2)#1
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Files;,getFileReader,(Ljava/io/File;)Ljava/io/LineNumberReader;)#3
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#New(Ljava/io/LineNumberReader;,0)#0
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#Dup(1,0)#1
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#New(Ljava/io/BufferedReader;,0)#2
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#Dup(1,0)#3
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#New(Ljava/io/FileReader;,0)#4
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#Dup(1,0)#5
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#LocalLoad(Ljava/lang/Object;,0)#6
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#Invoke(SPECIAL,Ljava/io/FileReader;,<init>,(Ljava/io/File;)V)#7
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#Invoke(SPECIAL,Ljava/io/BufferedReader;,<init>,(Ljava/io/Reader;)V)#8
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#Invoke(SPECIAL,Ljava/io/LineNumberReader;,<init>,(Ljava/io/Reader;)V)#9
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#LocalStore(Ljava/lang/Object;,1)#10
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#Goto(29)#11
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#LocalLoad(Ljava/lang/Object;,1)#29
randoop.util.Files.getFileReader(Ljava/io/File;)Ljava/io/LineNumberReader;#Return(Ljava/lang/Object;)#30
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,2)#4
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#5
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#6
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#Invoke(VIRTUAL,Ljava/io/File;,getPath,()Ljava/lang/String;)#7
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalLoad(I,1)#8
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Reflection;,loadClassesFromReader,(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;)#9
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#New(Ljava/util/ArrayList;,0)#0
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Dup(1,0)#1
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,3)#3
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#New(Lplume/EntryReader;,0)#4
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Dup(1,0)#5
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#6
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#7
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Constant(Ljava/lang/String;,"^#.*")#8
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Constant(L;,null)#9
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Invoke(SPECIAL,Lplume/EntryReader;,<init>,(Ljava/io/Reader;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V)#10
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,4)#11
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,4)#12
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Invoke(VIRTUAL,Lplume/EntryReader;,iterator,()Ljava/util/Iterator;)#13
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,6)#14
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Goto(34)#15
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,6)#34
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#35
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Constant(I,0)#36
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#ConditionalBranch(I,ne,16)#37
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,6)#16
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#17
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#CheckCast(Ljava/lang/String;)#18
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,5)#19
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#20
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Invoke(VIRTUAL,Ljava/lang/String;,trim,()Ljava/lang/String;)#21
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,7)#22
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,7)#23
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(I,2)#24
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Reflection;,classForName,(Ljava/lang/String;Z)Ljava/lang/Class;)#25
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#0
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@eaca82b)#0
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.util.PrimitiveTypes.<clinit>()V#Constant(I,0)#2
randoop.util.PrimitiveTypes.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.util.PrimitiveTypes.<clinit>()V#Constant(I,1)#4
randoop.util.PrimitiveTypes.<clinit>()V#Goto(7)#5
randoop.util.PrimitiveTypes.<clinit>()V#Put(Z,STATIC,Lrandoop/util/PrimitiveTypes;,$assertionsDisabled)#7
randoop.util.PrimitiveTypes.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#8
randoop.util.PrimitiveTypes.<clinit>()V#Dup(1,0)#9
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#10
randoop.util.PrimitiveTypes.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#11
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#12
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"int")#13
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@ac3e761c)#14
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#15
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#16
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#17
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"boolean")#18
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1d5e872)#19
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#20
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#21
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#22
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"float")#23
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5fa2c8be)#24
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#25
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#26
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#27
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"char")#28
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@52c8a991)#29
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#30
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#31
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#32
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"double")#33
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@305d4769)#34
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#35
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#36
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#37
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"long")#38
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@6ec6821e)#39
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#40
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#41
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#42
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"short")#43
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@7599aa9e)#44
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#45
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#46
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#47
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"byte")#48
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@6e3e3912)#49
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#50
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#51
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToBoxed)#52
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#53
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,getName,()Ljava/lang/String;)#54
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#55
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#56
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#57
randoop.util.PrimitiveTypes.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#58
randoop.util.PrimitiveTypes.<clinit>()V#Dup(1,0)#59
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#60
randoop.util.PrimitiveTypes.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#61
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#62
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@ac3e761c)#63
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Integer;,TYPE)#64
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#65
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#66
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#67
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1d5e872)#68
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Boolean;,TYPE)#69
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#70
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#71
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#72
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5fa2c8be)#73
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Float;,TYPE)#74
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#75
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#76
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#77
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@52c8a991)#78
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Character;,TYPE)#79
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#80
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#81
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#82
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@305d4769)#83
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Double;,TYPE)#84
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#85
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#86
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#87
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@6ec6821e)#88
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Long;,TYPE)#89
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#90
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#91
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#92
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@7599aa9e)#93
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Short;,TYPE)#94
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#95
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#96
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#97
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@6e3e3912)#98
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Byte;,TYPE)#99
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#100
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#101
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#102
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#103
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#104
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#105
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#106
randoop.util.PrimitiveTypes.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#107
randoop.util.PrimitiveTypes.<clinit>()V#Dup(1,0)#108
randoop.util.PrimitiveTypes.<clinit>()V#Constant(I,8)#109
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,(I)V)#110
randoop.util.PrimitiveTypes.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#111
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#112
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Boolean;,TYPE)#113
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1d5e872)#114
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#115
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#116
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#117
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Byte;,TYPE)#118
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@6e3e3912)#119
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#120
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#121
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#122
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Character;,TYPE)#123
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@52c8a991)#124
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#125
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#126
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#127
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Double;,TYPE)#128
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@305d4769)#129
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#130
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#131
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#132
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Float;,TYPE)#133
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5fa2c8be)#134
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#135
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#136
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#137
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Integer;,TYPE)#138
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@ac3e761c)#139
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#140
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#141
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#142
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Long;,TYPE)#143
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@6ec6821e)#144
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#145
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#146
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#147
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Short;,TYPE)#148
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@7599aa9e)#149
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#150
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#151
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#152
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#153
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#154
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#155
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#156
randoop.util.PrimitiveTypes.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#157
randoop.util.PrimitiveTypes.<clinit>()V#Dup(1,0)#158
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#159
randoop.util.PrimitiveTypes.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#160
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#161
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"void")#162
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#163
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#164
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#165
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#166
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"int")#167
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Integer;,TYPE)#168
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#169
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#170
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#171
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"boolean")#172
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Boolean;,TYPE)#173
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#174
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#175
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#176
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"float")#177
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Float;,TYPE)#178
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#179
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#180
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#181
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"char")#182
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Character;,TYPE)#183
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#184
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#185
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#186
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"double")#187
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Double;,TYPE)#188
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#189
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#190
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#191
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"long")#192
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Long;,TYPE)#193
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#194
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#195
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#196
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"short")#197
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Short;,TYPE)#198
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#199
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#200
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#201
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/String;,"byte")#202
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Byte;,TYPE)#203
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#204
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#205
randoop.util.PrimitiveTypes.<clinit>()V#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,typeNameToPrimitiveOrString)#206
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#207
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,getName,()Ljava/lang/String;)#208
randoop.util.PrimitiveTypes.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#209
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#210
randoop.util.PrimitiveTypes.<clinit>()V#Pop(1)#211
randoop.util.PrimitiveTypes.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#212
randoop.util.PrimitiveTypes.<clinit>()V#Dup(1,0)#213
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#214
randoop.util.PrimitiveTypes.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,isPrimitiveCached)#215
randoop.util.PrimitiveTypes.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#216
randoop.util.PrimitiveTypes.<clinit>()V#Dup(1,0)#217
randoop.util.PrimitiveTypes.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#218
randoop.util.PrimitiveTypes.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,stringLengthOKCached)#219
randoop.util.PrimitiveTypes.<clinit>()V#Return(V)#220
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#1
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#2
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#CheckCast(Ljava/lang/Class;)#3
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalStore(Ljava/lang/Object;,2)#4
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,2)#5
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Constant(L;,null)#6
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#ConditionalBranch(Ljava/lang/Object;,eq,10)#7
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#10
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Invoke(STATIC,Ljava/lang/Class;,forName,(Ljava/lang/String;)Ljava/lang/Class;)#11
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalStore(Ljava/lang/Object;,2)#12
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Goto(51)#13
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,2)#51
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Return(Ljava/lang/Object;)#52
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,8)#26
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,8)#27
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Constant(L;,null)#28
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,eq,34)#29
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#30
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,8)#31
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#32
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Pop(1)#33
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalStore(Ljava/lang/Object;,3)#14
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalLoad(I,1)#15
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Constant(I,0)#16
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#ConditionalBranch(I,eq,38)#17
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#18
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Constant(Ljava/lang/String;,"WARNING: classForName(%s) yielded exception: %s%n")#19
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Constant(I,2)#20
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#New([Ljava/lang/Object;,1)#21
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Dup(1,0)#22
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Constant(I,0)#23
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#24
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#ArrayStore(Ljava/lang/Object;)#25
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Dup(1,0)#26
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Constant(I,1)#27
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,3)#28
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Invoke(VIRTUAL,Ljava/lang/Throwable;,getMessage,()Ljava/lang/String;)#29
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#ArrayStore(Ljava/lang/Object;)#30
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Invoke(VIRTUAL,Ljava/io/PrintStream;,printf,(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;)#31
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Pop(1)#32
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,3)#33
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#34
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Invoke(VIRTUAL,Ljava/lang/Throwable;,printStackTrace,(Ljava/io/PrintStream;)V)#35
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Constant(L;,null)#36
randoop.util.Reflection.classForName(Ljava/lang/String;Z)Ljava/lang/Class;#Return(Ljava/lang/Object;)#37
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#38
randoop.util.Reflection.loadClassesFromReader(Ljava/io/BufferedReader;Ljava/lang/String;Z)Ljava/util/List;#Return(Ljava/lang/Object;)#39
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,4)#10
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#11
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#Constant(L;,null)#12
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,eq,16)#13
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#14
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#Invoke(VIRTUAL,Ljava/io/BufferedReader;,close,()V)#15
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,4)#16
randoop.util.Reflection.loadClassesFromFile(Ljava/io/File;Z)Ljava/util/List;#Return(Ljava/lang/Object;)#17
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#22
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Pop(1)#23
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Constant(Ljava/lang/String;,"testclass@findClassesFromArgs")#24
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#25
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Constant(Ljava/lang/String;,"silently_ignore_bad_class_names@findClassesFromArgs")#26
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#27
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#28
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,testclass)#29
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,silently_ignore_bad_class_names)#30
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Reflection;,loadClassesFromList,(Ljava/util/List;Z)Ljava/util/List;)#31
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#New(Ljava/util/ArrayList;,0)#0
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#Dup(1,0)#1
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#3
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#4
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,2)#5
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#6
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#7
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#LocalStore(Ljava/lang/Object;,4)#8
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#Goto(25)#9
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,4)#25
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#26
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#Constant(I,0)#27
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#ConditionalBranch(I,ne,10)#28
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#29
randoop.util.Reflection.loadClassesFromList(Ljava/util/List;Z)Ljava/util/List;#Return(Ljava/lang/Object;)#30
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#32
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Pop(1)#33
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Goto(52)#34
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#52
randoop.main.GenInputsAbstract.findClassesFromArgs(Lplume/Options;)Ljava/util/List;#Return(Ljava/lang/Object;)#53
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,3)#120
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/util/ArrayList;,0)#121
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#122
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,3)#123
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,size,()I)#124
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#125
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,4)#126
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,3)#127
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#128
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,6)#129
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Goto(171)#130
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#171
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#172
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#173
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,131)#174
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#131
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#132
randoop.main.GenTests.handle([Ljava/lang/String;)Z#CheckCast(Ljava/lang/Class;)#133
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,5)#134
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,5)#135
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isAbstract,(Ljava/lang/Class;)Z)#136
randoop.util.Reflection.isAbstract(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Reflection.isAbstract(Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,getModifiers,()I)#1
randoop.util.Reflection.isAbstract(Ljava/lang/Class;)Z#Invoke(STATIC,Ljava/lang/reflect/Modifier;,isAbstract,(I)Z)#2
randoop.util.Reflection.isAbstract(Ljava/lang/Class;)Z#Return(I)#3
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#137
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,eq,151)#138
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,5)#151
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isVisible,(Ljava/lang/Class;)Z)#152
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/Reflection;,cached_isVisible)#0
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#1
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#2
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#CheckCast(Ljava/lang/Boolean;)#3
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,1)#4
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#5
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Constant(L;,null)#6
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#ConditionalBranch(Ljava/lang/Object;,ne,48)#7
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isAnonymousClass,()Z)#9
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Constant(I,0)#10
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#ConditionalBranch(I,eq,16)#11
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#16
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,getModifiers,()I)#17
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalStore(I,2)#18
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(I,2)#19
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isVisible,(I)Z)#20
randoop.util.Reflection.isVisible(I)Z#Constant(Ljava/lang/String;,"isVisible")#0
randoop.util.Reflection.isVisible(I)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.util.Reflection.isVisible(I)Z#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,public_only)#2
randoop.util.Reflection.isVisible(I)Z#Constant(I,0)#3
randoop.util.Reflection.isVisible(I)Z#ConditionalBranch(I,eq,10)#4
randoop.util.Reflection.isVisible(I)Z#Constant(Ljava/lang/String;,"public_only@isVisible")#5
randoop.util.Reflection.isVisible(I)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#6
randoop.util.Reflection.isVisible(I)Z#LocalLoad(I,0)#7
randoop.util.Reflection.isVisible(I)Z#Invoke(STATIC,Ljava/lang/reflect/Modifier;,isPublic,(I)Z)#8
randoop.util.Reflection.isVisible(I)Z#Return(I)#9
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalStore(I,3)#21
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#22
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isMemberClass,()Z)#23
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Constant(I,0)#24
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#ConditionalBranch(I,eq,40)#25
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(I,3)#40
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#41
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,1)#42
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/Reflection;,cached_isVisible)#43
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#44
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#45
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#46
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Pop(1)#47
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Get(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#48
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Constant(I,0)#49
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#ConditionalBranch(I,ne,58)#50
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#58
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Boolean;,booleanValue,()Z)#59
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Return(I)#60
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#153
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,167)#154
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,4)#167
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,5)#168
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#169
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#170
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#139
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/lang/StringBuilder;,0)#140
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#141
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"Ignoring abstract ")#142
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#143
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,5)#144
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/Object;)Ljava/lang/StringBuilder;)#145
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;," specified via --classlist or --testclass.")#146
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#147
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#148
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#149
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Goto(171)#150
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalLoad(I,3)#26
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Constant(I,0)#27
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#ConditionalBranch(I,eq,36)#28
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Constant(I,0)#36
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#37
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,1)#38
randoop.util.Reflection.isVisible(Ljava/lang/Class;)Z#Goto(43)#39
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#155
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/lang/StringBuilder;,0)#156
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#157
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"Ignoring non-visible ")#158
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#159
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,5)#160
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/Object;)Ljava/lang/StringBuilder;)#161
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;," specified via --classlist or --testclass.")#162
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#163
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#164
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#165
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Goto(171)#166
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,4)#175
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#176
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,6)#177
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Goto(200)#178
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#200
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#201
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#202
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,179)#203
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#179
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#180
randoop.main.GenTests.handle([Ljava/lang/String;)Z#CheckCast(Ljava/lang/Class;)#181
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,5)#182
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,5)#183
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isVisible,(Ljava/lang/Class;)Z)#184
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#185
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,200)#186
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"omitmethods@handle")#204
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#205
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/util/DefaultReflectionFilter;,0)#206
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#207
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/util/regex/Pattern;,STATIC,Lrandoop/main/GenTests;,omitmethods)#208
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/util/DefaultReflectionFilter;,<init>,(Ljava/util/regex/Pattern;)V)#209
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#Constant(L;,null)#3
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#Put(Ljava/util/regex/Pattern;,NONSTATIC,Lrandoop/util/DefaultReflectionFilter;,omitmethods)#4
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#LocalLoad(Ljava/lang/Object;,1)#6
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#Put(Ljava/util/regex/Pattern;,NONSTATIC,Lrandoop/util/DefaultReflectionFilter;,omitmethods)#7
randoop.util.DefaultReflectionFilter.<init>(Ljava/util/regex/Pattern;)V#Return(V)#8
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,5)#210
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,4)#211
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,5)#212
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,getStatements,(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;)#213
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#0
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(L;,null)#1
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#New(Ljava/util/LinkedHashSet;,0)#8
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Dup(1,0)#9
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#10
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,2)#11
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#12
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Collection;,iterator,()Ljava/util/Iterator;)#13
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,4)#14
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Goto(113)#15
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,4)#113
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#114
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#115
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,ne,16)#116
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,4)#16
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#17
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#CheckCast(Ljava/lang/Class;)#18
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,3)#19
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#20
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#21
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Lrandoop/util/ReflectionFilter;,canUse,(Ljava/lang/Class;)Z)#22
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isVisible,(Ljava/lang/Class;)Z)#1
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/Class;)Z#Return(I)#2
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#23
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,eq,113)#24
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#25
randoop.util.Log.<clinit>()V#New(Ljava/io/ByteArrayOutputStream;,0)#0
randoop.util.Log.<clinit>()V#Dup(1,0)#1
randoop.util.Log.<clinit>()V#Invoke(SPECIAL,Ljava/io/ByteArrayOutputStream;,<init>,()V)#2
randoop.util.Log.<clinit>()V#Put(Ljava/io/ByteArrayOutputStream;,STATIC,Lrandoop/util/Log;,bos)#3
randoop.util.Log.<clinit>()V#New(Ljava/io/PrintStream;,0)#4
randoop.util.Log.<clinit>()V#Dup(1,0)#5
randoop.util.Log.<clinit>()V#Get(Ljava/io/ByteArrayOutputStream;,STATIC,Lrandoop/util/Log;,bos)#6
randoop.util.Log.<clinit>()V#Invoke(SPECIAL,Ljava/io/PrintStream;,<init>,(Ljava/io/OutputStream;)V)#7
randoop.util.Log.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/util/Log;,systemOutErrStream)#8
randoop.util.Log.<clinit>()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,err)#9
randoop.util.Log.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/util/Log;,err)#10
randoop.util.Log.<clinit>()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#11
randoop.util.Log.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/util/Log;,out)#12
randoop.util.Log.<clinit>()V#Return(V)#13
randoop.util.Log.isLoggingOn()Z#Get(Ljava/io/FileWriter;,STATIC,Lrandoop/main/GenInputsAbstract;,log)#0
randoop.util.Log.isLoggingOn()Z#Constant(L;,null)#1
randoop.util.Log.isLoggingOn()Z#ConditionalBranch(Ljava/lang/Object;,eq,5)#2
randoop.util.Log.isLoggingOn()Z#Constant(I,0)#5
randoop.util.Log.isLoggingOn()Z#Return(I)#6
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#26
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,eq,37)#27
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#37
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Reflection;,getMethodsOrdered,(Ljava/lang/Class;)[Ljava/lang/reflect/Method;)#38
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Constant(L;,null)#1
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#New(Ljava/util/ArrayList;,0)#8
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Dup(1,0)#9
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#10
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalStore(Ljava/lang/Object;,1)#11
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,1)#12
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(VIRTUAL,Ljava/lang/Class;,getMethods,()[Ljava/lang/reflect/Method;)#14
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(STATIC,Ljava/util/Arrays;,asList,([Ljava/lang/Object;)Ljava/util/List;)#15
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#16
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Pop(1)#17
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,1)#18
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,0)#19
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(VIRTUAL,Ljava/lang/Class;,getDeclaredMethods,()[Ljava/lang/reflect/Method;)#20
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(STATIC,Ljava/util/Arrays;,asList,([Ljava/lang/Object;)Ljava/util/List;)#21
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#22
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Pop(1)#23
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Goto(56)#24
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,1)#56
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Constant(I,0)#57
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#New([Ljava/lang/reflect/Method;,1)#58
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(INTERFACE,Ljava/util/List;,toArray,([Ljava/lang/Object;)[Ljava/lang/Object;)#59
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#CheckCast([Ljava/lang/reflect/Method;)#60
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalStore(Ljava/lang/Object;,2)#61
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,2)#62
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Get(Ljava/util/Comparator;,STATIC,Lrandoop/util/Reflection;,SORT_MEMBERS_BY_NAME)#63
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Invoke(STATIC,Ljava/util/Arrays;,sort,([Ljava/lang/Object;Ljava/util/Comparator;)V)#64
randoop.util.Reflection$1.compare(Ljava/lang/Object;Ljava/lang/Object;)I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Reflection$1.compare(Ljava/lang/Object;Ljava/lang/Object;)I#LocalLoad(Ljava/lang/Object;,1)#1
randoop.util.Reflection$1.compare(Ljava/lang/Object;Ljava/lang/Object;)I#CheckCast(Ljava/lang/reflect/Member;)#2
randoop.util.Reflection$1.compare(Ljava/lang/Object;Ljava/lang/Object;)I#LocalLoad(Ljava/lang/Object;,2)#3
randoop.util.Reflection$1.compare(Ljava/lang/Object;Ljava/lang/Object;)I#CheckCast(Ljava/lang/reflect/Member;)#4
randoop.util.Reflection$1.compare(Ljava/lang/Object;Ljava/lang/Object;)I#Invoke(VIRTUAL,Lrandoop/util/Reflection$1;,compare,(Ljava/lang/reflect/Member;Ljava/lang/reflect/Member;)I)#5
randoop.util.Reflection$1.compare(Ljava/lang/reflect/Member;Ljava/lang/reflect/Member;)I#LocalLoad(Ljava/lang/Object;,1)#0
randoop.util.Reflection$1.compare(Ljava/lang/reflect/Member;Ljava/lang/reflect/Member;)I#Invoke(VIRTUAL,Ljava/lang/Object;,toString,()Ljava/lang/String;)#1
randoop.util.Reflection$1.compare(Ljava/lang/reflect/Member;Ljava/lang/reflect/Member;)I#LocalLoad(Ljava/lang/Object;,2)#2
randoop.util.Reflection$1.compare(Ljava/lang/reflect/Member;Ljava/lang/reflect/Member;)I#Invoke(VIRTUAL,Ljava/lang/Object;,toString,()Ljava/lang/String;)#3
randoop.util.Reflection$1.compare(Ljava/lang/reflect/Member;Ljava/lang/reflect/Member;)I#Invoke(VIRTUAL,Ljava/lang/String;,compareTo,(Ljava/lang/String;)I)#4
randoop.util.Reflection$1.compare(Ljava/lang/reflect/Member;Ljava/lang/reflect/Member;)I#Return(I)#5
randoop.util.Reflection$1.compare(Ljava/lang/Object;Ljava/lang/Object;)I#Return(I)#6
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,2)#65
randoop.util.Reflection.getMethodsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Method;#Return(Ljava/lang/Object;)#66
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Dup(1,0)#39
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,8)#40
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ArrayLength()#41
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(I,7)#42
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#43
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(I,6)#44
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Goto(78)#45
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(I,6)#78
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(I,7)#79
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,lt,46)#80
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,8)#46
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(I,6)#47
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ArrayLoad(Ljava/lang/Object;)#48
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,5)#49
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#50
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#51
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,eq,62)#52
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#62
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#63
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Lrandoop/util/ReflectionFilter;,canUse,(Ljava/lang/reflect/Method;)Z)#64
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getParameterTypes,()[Ljava/lang/Class;)#1
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalStore(Ljava/lang/Object;,2)#2
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#3
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#4
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(Ljava/lang/String;,"main")#5
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#6
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#7
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,43)#8
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,0)#43
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#44
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,toString,()Ljava/lang/String;)#45
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(SPECIAL,Lrandoop/util/DefaultReflectionFilter;,matchesOmitMethodPattern,(Ljava/lang/String;)Z)#46
randoop.util.DefaultReflectionFilter.matchesOmitMethodPattern(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.DefaultReflectionFilter.matchesOmitMethodPattern(Ljava/lang/String;)Z#Get(Ljava/util/regex/Pattern;,NONSTATIC,Lrandoop/util/DefaultReflectionFilter;,omitmethods)#1
randoop.util.DefaultReflectionFilter.matchesOmitMethodPattern(Ljava/lang/String;)Z#Constant(L;,null)#2
randoop.util.DefaultReflectionFilter.matchesOmitMethodPattern(Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,ne,6)#3
randoop.util.DefaultReflectionFilter.matchesOmitMethodPattern(Ljava/lang/String;)Z#Constant(I,0)#4
randoop.util.DefaultReflectionFilter.matchesOmitMethodPattern(Ljava/lang/String;)Z#Return(I)#5
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#47
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,65)#48
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#65
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,isBridge,()Z)#66
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#67
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,85)#68
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#85
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,isSynthetic,()Z)#86
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#87
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,105)#88
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#105
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getModifiers,()I)#106
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isVisible,(I)Z)#107
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#108
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,ne,126)#109
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#110
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#111
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,124)#112
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#124
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Return(I)#125
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#65
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,eq,74)#66
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(I,6)#74
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,1)#75
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#BinaryOp(I,add)#76
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(I,6)#77
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#126
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getReturnType,()Ljava/lang/Class;)#127
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isVisible,(Ljava/lang/Class;)Z)#128
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#129
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,ne,147)#130
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#147
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getDeclaringClass,()Ljava/lang/Class;)#148
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5f790dbb)#149
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#150
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#151
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,155)#152
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#155
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getDeclaringClass,()Ljava/lang/Class;)#156
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@72a5fc50)#157
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#158
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#159
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,163)#160
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#163
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e3b708d5)#164
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getAnnotation,(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;)#165
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(L;,null)#166
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(Ljava/lang/Object;,eq,170)#167
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,0)#170
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,1)#171
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(SPECIAL,Lrandoop/util/DefaultReflectionFilter;,doNotUseSpecialCase,(Ljava/lang/reflect/Method;)Ljava/lang/String;)#172
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#0
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getDeclaringClass,()Ljava/lang/Class;)#1
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/Class;,getCanonicalName,()Ljava/lang/String;)#2
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"java.lang.Enum")#3
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#4
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#5
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,28)#6
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#28
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#29
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"randomUUID")#30
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#31
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#32
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,36)#33
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#36
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#37
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"hashCode")#38
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#39
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#40
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,50)#41
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#50
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#51
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"deepHashCode")#52
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#53
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#54
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,64)#55
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#64
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#65
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"getAvailableLocales")#66
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#67
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#68
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,72)#69
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#72
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#73
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"fillInStackTrace")#74
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#75
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#76
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,80)#77
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#80
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#81
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"getCause")#82
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#83
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#84
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,88)#85
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#88
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#89
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"getLocalizedMessage")#90
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#91
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#92
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,96)#93
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#96
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#97
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"getMessage")#98
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#99
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#100
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,104)#101
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#104
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#105
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"getStackTrace")#106
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#107
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#108
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,112)#109
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#112
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#113
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"initCause")#114
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#115
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#116
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,120)#117
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#120
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#121
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"printStackTrace")#122
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#123
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#124
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,128)#125
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#128
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#129
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"setStackTrace")#130
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#131
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#132
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,eq,136)#133
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(L;,null)#136
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Return(Ljava/lang/Object;)#137
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalStore(Ljava/lang/Object;,3)#173
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#LocalLoad(Ljava/lang/Object;,3)#174
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(L;,null)#175
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(Ljava/lang/Object;,eq,199)#176
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,1)#199
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Return(I)#200
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#67
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(STATIC,Lrandoop/RMethod;,getRMethod,(Ljava/lang/reflect/Method;)Lrandoop/RMethod;)#68
randoop.RMethod.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@8a307c77)#0
randoop.RMethod.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.RMethod.<clinit>()V#Constant(I,0)#2
randoop.RMethod.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.RMethod.<clinit>()V#Constant(I,1)#4
randoop.RMethod.<clinit>()V#Goto(7)#5
randoop.RMethod.<clinit>()V#Put(Z,STATIC,Lrandoop/RMethod;,$assertionsDisabled)#7
randoop.RMethod.<clinit>()V#Return(V)#8
randoop.RMethod.getRMethod(Ljava/lang/reflect/Method;)Lrandoop/RMethod;#New(Lrandoop/RMethod;,0)#0
randoop.RMethod.getRMethod(Ljava/lang/reflect/Method;)Lrandoop/RMethod;#Dup(1,0)#1
randoop.RMethod.getRMethod(Ljava/lang/reflect/Method;)Lrandoop/RMethod;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.RMethod.getRMethod(Ljava/lang/reflect/Method;)Lrandoop/RMethod;#Invoke(SPECIAL,Lrandoop/RMethod;,<init>,(Ljava/lang/reflect/Method;)V)#3
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(I,0)#3
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(Z,NONSTATIC,Lrandoop/RMethod;,hashCodeComputed)#4
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(I,0)#6
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(I,NONSTATIC,Lrandoop/RMethod;,hashCodeCached)#7
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(I,0)#9
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(Z,NONSTATIC,Lrandoop/RMethod;,isVoidComputed)#10
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#11
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(I,0)#12
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(Z,NONSTATIC,Lrandoop/RMethod;,isVoidCached)#13
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#14
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(I,0)#15
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(Z,NONSTATIC,Lrandoop/RMethod;,isStaticComputed)#16
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#17
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(I,0)#18
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(Z,NONSTATIC,Lrandoop/RMethod;,isStaticCached)#19
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#20
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(J,0)#21
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(J,NONSTATIC,Lrandoop/RMethod;,calls_time)#22
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#23
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(I,0)#24
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(I,NONSTATIC,Lrandoop/RMethod;,calls_num)#25
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,1)#26
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(L;,null)#27
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#ConditionalBranch(Ljava/lang/Object;,ne,34)#28
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#34
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,1)#35
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Put(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#36
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#LocalLoad(Ljava/lang/Object;,0)#37
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#38
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Constant(I,1)#39
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,setAccessible,(Z)V)#40
randoop.RMethod.<init>(Ljava/lang/reflect/Method;)V#Return(V)#41
randoop.RMethod.getRMethod(Ljava/lang/reflect/Method;)Lrandoop/RMethod;#Return(Ljava/lang/Object;)#4
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,9)#69
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#70
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,9)#71
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#72
randoop.RMethod.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RMethod.hashCode()I#Get(Z,NONSTATIC,Lrandoop/RMethod;,hashCodeComputed)#1
randoop.RMethod.hashCode()I#Constant(I,0)#2
randoop.RMethod.hashCode()I#ConditionalBranch(I,ne,12)#3
randoop.RMethod.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#4
randoop.RMethod.hashCode()I#Constant(I,1)#5
randoop.RMethod.hashCode()I#Put(Z,NONSTATIC,Lrandoop/RMethod;,hashCodeComputed)#6
randoop.RMethod.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#7
randoop.RMethod.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#8
randoop.RMethod.hashCode()I#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#9
randoop.RMethod.hashCode()I#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,hashCode,()I)#10
randoop.RMethod.hashCode()I#Put(I,NONSTATIC,Lrandoop/RMethod;,hashCodeCached)#11
randoop.RMethod.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#12
randoop.RMethod.hashCode()I#Get(I,NONSTATIC,Lrandoop/RMethod;,hashCodeCached)#13
randoop.RMethod.hashCode()I#Return(I)#14
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Pop(1)#73
randoop.RMethod.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.RMethod.equals(Ljava/lang/Object;)Z#Instanceof(Lrandoop/RMethod;)#1
randoop.RMethod.equals(Ljava/lang/Object;)Z#Constant(I,0)#2
randoop.RMethod.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,6)#3
randoop.RMethod.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#6
randoop.RMethod.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#7
randoop.RMethod.equals(Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,11)#8
randoop.RMethod.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#11
randoop.RMethod.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/RMethod;)#12
randoop.RMethod.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#13
randoop.RMethod.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#14
randoop.RMethod.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#15
randoop.RMethod.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#16
randoop.RMethod.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#17
randoop.RMethod.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,equals,(Ljava/lang/Object;)Z)#18
randoop.RMethod.equals(Ljava/lang/Object;)Z#Constant(I,0)#19
randoop.RMethod.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,23)#20
randoop.RMethod.equals(Ljava/lang/Object;)Z#Constant(I,1)#23
randoop.RMethod.equals(Ljava/lang/Object;)Z#Return(I)#24
randoop.RMethod.equals(Ljava/lang/Object;)Z#Constant(I,0)#21
randoop.RMethod.equals(Ljava/lang/Object;)Z#Return(I)#22
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#153
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Return(I)#154
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#42
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getDeclaringClass,()Ljava/lang/Class;)#43
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#44
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#45
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#46
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,ne,50)#47
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"hashCode")#48
randoop.util.DefaultReflectionFilter.doNotUseSpecialCase(Ljava/lang/reflect/Method;)Ljava/lang/String;#Return(Ljava/lang/Object;)#49
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#177
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#178
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,197)#179
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#197
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Return(I)#198
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#81
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(STATIC,Lrandoop/util/Reflection;,getDeclaredConstructorsOrdered,(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;)#82
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#Constant(L;,null)#1
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#Invoke(VIRTUAL,Ljava/lang/Class;,getDeclaredConstructors,()[Ljava/lang/reflect/Constructor;)#9
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#LocalStore(Ljava/lang/Object;,1)#10
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#Goto(30)#11
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#LocalLoad(Ljava/lang/Object;,1)#30
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#Get(Ljava/util/Comparator;,STATIC,Lrandoop/util/Reflection;,SORT_MEMBERS_BY_NAME)#31
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#Invoke(STATIC,Ljava/util/Arrays;,sort,([Ljava/lang/Object;Ljava/util/Comparator;)V)#32
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#LocalLoad(Ljava/lang/Object;,1)#33
randoop.util.Reflection.getDeclaredConstructorsOrdered(Ljava/lang/Class;)[Ljava/lang/reflect/Constructor;#Return(Ljava/lang/Object;)#34
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Dup(1,0)#83
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,8)#84
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ArrayLength()#85
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(I,7)#86
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#87
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(I,6)#88
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Goto(110)#89
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(I,6)#110
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(I,7)#111
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,lt,90)#112
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,8)#90
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(I,6)#91
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ArrayLoad(Ljava/lang/Object;)#92
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,5)#93
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#94
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#95
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Lrandoop/util/ReflectionFilter;,canUse,(Ljava/lang/reflect/Constructor;)Z)#96
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#LocalLoad(Ljava/lang/Object;,1)#1
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,toString,()Ljava/lang/String;)#2
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Invoke(SPECIAL,Lrandoop/util/DefaultReflectionFilter;,matchesOmitMethodPattern,(Ljava/lang/String;)Z)#3
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Constant(I,0)#4
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#ConditionalBranch(I,eq,20)#5
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#LocalLoad(Ljava/lang/Object;,1)#20
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,getDeclaringClass,()Ljava/lang/Class;)#21
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,getModifiers,()I)#22
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Invoke(STATIC,Ljava/lang/reflect/Modifier;,isAbstract,(I)Z)#23
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Constant(I,0)#24
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#ConditionalBranch(I,eq,28)#25
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#LocalLoad(Ljava/lang/Object;,1)#28
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,getModifiers,()I)#29
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isVisible,(I)Z)#30
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Constructor;)Z#Return(I)#31
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#97
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,eq,106)#98
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#99
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(STATIC,Lrandoop/RConstructor;,getRConstructor,(Ljava/lang/reflect/Constructor;)Lrandoop/RConstructor;)#100
randoop.RConstructor.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@bdd182)#0
randoop.RConstructor.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.RConstructor.<clinit>()V#Constant(I,0)#2
randoop.RConstructor.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.RConstructor.<clinit>()V#Constant(I,1)#4
randoop.RConstructor.<clinit>()V#Goto(7)#5
randoop.RConstructor.<clinit>()V#Put(Z,STATIC,Lrandoop/RConstructor;,$assertionsDisabled)#7
randoop.RConstructor.<clinit>()V#Return(V)#8
randoop.RConstructor.getRConstructor(Ljava/lang/reflect/Constructor;)Lrandoop/RConstructor;#New(Lrandoop/RConstructor;,0)#0
randoop.RConstructor.getRConstructor(Ljava/lang/reflect/Constructor;)Lrandoop/RConstructor;#Dup(1,0)#1
randoop.RConstructor.getRConstructor(Ljava/lang/reflect/Constructor;)Lrandoop/RConstructor;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.RConstructor.getRConstructor(Ljava/lang/reflect/Constructor;)Lrandoop/RConstructor;#Invoke(SPECIAL,Lrandoop/RConstructor;,<init>,(Ljava/lang/reflect/Constructor;)V)#3
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Constant(I,0)#3
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Put(I,NONSTATIC,Lrandoop/RConstructor;,hashCodeCached)#4
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Constant(I,0)#6
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Put(Z,NONSTATIC,Lrandoop/RConstructor;,hashCodeComputed)#7
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Constant(J,0)#9
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Put(J,NONSTATIC,Lrandoop/RConstructor;,calls_time)#10
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,0)#11
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Constant(I,0)#12
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Put(I,NONSTATIC,Lrandoop/RConstructor;,calls_num)#13
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,1)#14
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Constant(L;,null)#15
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#ConditionalBranch(Ljava/lang/Object;,ne,22)#16
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,0)#22
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,1)#23
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Put(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#24
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#LocalLoad(Ljava/lang/Object;,0)#25
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#26
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Constant(I,1)#27
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,setAccessible,(Z)V)#28
randoop.RConstructor.<init>(Ljava/lang/reflect/Constructor;)V#Return(V)#29
randoop.RConstructor.getRConstructor(Ljava/lang/reflect/Constructor;)Lrandoop/RConstructor;#Return(Ljava/lang/Object;)#4
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,9)#101
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#102
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,9)#103
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#104
randoop.RConstructor.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RConstructor.hashCode()I#Get(Z,NONSTATIC,Lrandoop/RConstructor;,hashCodeComputed)#1
randoop.RConstructor.hashCode()I#Constant(I,0)#2
randoop.RConstructor.hashCode()I#ConditionalBranch(I,ne,12)#3
randoop.RConstructor.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#4
randoop.RConstructor.hashCode()I#Constant(I,1)#5
randoop.RConstructor.hashCode()I#Put(Z,NONSTATIC,Lrandoop/RConstructor;,hashCodeComputed)#6
randoop.RConstructor.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#7
randoop.RConstructor.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#8
randoop.RConstructor.hashCode()I#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#9
randoop.RConstructor.hashCode()I#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,hashCode,()I)#10
randoop.RConstructor.hashCode()I#Put(I,NONSTATIC,Lrandoop/RConstructor;,hashCodeCached)#11
randoop.RConstructor.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#12
randoop.RConstructor.hashCode()I#Get(I,NONSTATIC,Lrandoop/RConstructor;,hashCodeCached)#13
randoop.RConstructor.hashCode()I#Return(I)#14
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Pop(1)#105
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(I,6)#106
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,1)#107
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#BinaryOp(I,add)#108
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(I,6)#109
randoop.RConstructor.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Constant(L;,null)#1
randoop.RConstructor.equals(Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,5)#2
randoop.RConstructor.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#5
randoop.RConstructor.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#6
randoop.RConstructor.equals(Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,10)#7
randoop.RConstructor.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#10
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Instanceof(Lrandoop/RConstructor;)#11
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Constant(I,0)#12
randoop.RConstructor.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,16)#13
randoop.RConstructor.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#16
randoop.RConstructor.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/RConstructor;)#17
randoop.RConstructor.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#18
randoop.RConstructor.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#19
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#20
randoop.RConstructor.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#21
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#22
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,equals,(Ljava/lang/Object;)Z)#23
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Constant(I,0)#24
randoop.RConstructor.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,28)#25
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Constant(I,0)#26
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Return(I)#27
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#69
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#70
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#ConditionalBranch(I,eq,83)#71
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Constant(I,0)#83
randoop.util.DefaultReflectionFilter.canUse(Ljava/lang/reflect/Method;)Z#Return(I)#84
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#New(Ljava/util/ArrayList;,0)#117
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Dup(1,0)#118
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#119
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,3)#120
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#121
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#122
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,5)#123
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Goto(134)#124
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#134
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#135
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#136
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,ne,125)#137
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#125
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#126
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#CheckCast(Lrandoop/StatementKind;)#127
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,4)#128
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#129
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,4)#130
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(VIRTUAL,Ljava/lang/Object;,toString,()Ljava/lang/String;)#131
randoop.RMethod.toString()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RMethod.toString()Ljava/lang/String;#Invoke(VIRTUAL,Lrandoop/RMethod;,toParseableString,()Ljava/lang/String;)#1
randoop.RMethod.toParseableString()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RMethod.toParseableString()Ljava/lang/String;#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#1
randoop.RMethod.toParseableString()Ljava/lang/String;#Invoke(STATIC,Lrandoop/util/Reflection;,getSignature,(Ljava/lang/reflect/Method;)Ljava/lang/String;)#2
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#0
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Dup(1,0)#1
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,()V)#2
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,1)#3
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#4
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#5
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Dup(1,0)#6
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getDeclaringClass,()Ljava/lang/Class;)#8
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/Class;,getName,()Ljava/lang/String;)#9
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(STATIC,Ljava/lang/String;,valueOf,(Ljava/lang/Object;)Ljava/lang/String;)#10
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#11
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,".")#12
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#13
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#14
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#15
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Pop(1)#16
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#17
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#18
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Dup(1,0)#19
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#20
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getName,()Ljava/lang/String;)#21
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(STATIC,Ljava/lang/String;,valueOf,(Ljava/lang/Object;)Ljava/lang/String;)#22
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#23
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,"(")#24
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#25
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#26
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#27
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Pop(1)#28
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#29
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getParameterTypes,()[Ljava/lang/Class;)#30
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,2)#31
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,0)#32
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalStore(I,3)#33
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Goto(56)#34
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(I,3)#56
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#57
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#ArrayLength()#58
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,lt,35)#59
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#35
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#36
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(I,3)#37
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#ArrayLoad(Ljava/lang/Object;)#38
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/Class;,getName,()Ljava/lang/String;)#39
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#40
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Pop(1)#41
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(I,3)#42
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#43
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#ArrayLength()#44
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,1)#45
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#BinaryOp(I,sub)#46
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#ConditionalBranch(I,ge,52)#47
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(I,3)#52
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(I,1)#53
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#BinaryOp(I,add)#54
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalStore(I,3)#55
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#60
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,")")#61
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#62
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Pop(1)#63
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#64
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#65
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Return(Ljava/lang/Object;)#66
randoop.RMethod.toParseableString()Ljava/lang/String;#Return(Ljava/lang/Object;)#3
randoop.RMethod.toString()Ljava/lang/String;#Return(Ljava/lang/Object;)#2
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#132
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Pop(1)#133
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#48
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Constant(Ljava/lang/String;,",")#49
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#50
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Method;)Ljava/lang/String;#Pop(1)#51
randoop.RConstructor.toString()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RConstructor.toString()Ljava/lang/String;#Invoke(VIRTUAL,Lrandoop/RConstructor;,toParseableString,()Ljava/lang/String;)#1
randoop.RConstructor.toParseableString()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RConstructor.toParseableString()Ljava/lang/String;#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#1
randoop.RConstructor.toParseableString()Ljava/lang/String;#Invoke(STATIC,Lrandoop/util/Reflection;,getSignature,(Ljava/lang/reflect/Constructor;)Ljava/lang/String;)#2
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#0
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Dup(1,0)#1
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,()V)#2
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,1)#3
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#4
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#5
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Dup(1,0)#6
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,getName,()Ljava/lang/String;)#8
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(STATIC,Ljava/lang/String;,valueOf,(Ljava/lang/Object;)Ljava/lang/String;)#9
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#10
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Constant(Ljava/lang/String;,".<init>(")#11
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#12
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#13
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#14
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Pop(1)#15
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#16
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,getParameterTypes,()[Ljava/lang/Class;)#17
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalStore(Ljava/lang/Object;,2)#18
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Constant(I,0)#19
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalStore(I,3)#20
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Goto(43)#21
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(I,3)#43
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#44
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#ArrayLength()#45
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#ConditionalBranch(I,lt,22)#46
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#47
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Constant(Ljava/lang/String;,")")#48
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#49
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Pop(1)#50
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#51
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#52
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Return(Ljava/lang/Object;)#53
randoop.RConstructor.toParseableString()Ljava/lang/String;#Return(Ljava/lang/Object;)#3
randoop.RConstructor.toString()Ljava/lang/String;#Return(Ljava/lang/Object;)#2
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#22
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#23
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(I,3)#24
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#ArrayLoad(Ljava/lang/Object;)#25
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/Class;,getName,()Ljava/lang/String;)#26
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#27
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Pop(1)#28
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(I,3)#29
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,2)#30
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#ArrayLength()#31
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Constant(I,1)#32
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#BinaryOp(I,sub)#33
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#ConditionalBranch(I,ge,39)#34
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalLoad(I,3)#39
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#Constant(I,1)#40
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#BinaryOp(I,add)#41
randoop.util.Reflection.getSignature(Ljava/lang/reflect/Constructor;)Ljava/lang/String;#LocalStore(I,3)#42
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Get(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#138
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Constant(I,0)#139
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#ConditionalBranch(I,ne,153)#140
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#New(Ljava/util/ArrayList;,0)#153
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Dup(1,0)#154
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#155
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(Ljava/util/Collection;)V)#156
randoop.util.Reflection.getStatements(Ljava/util/Collection;Lrandoop/util/ReflectionFilter;)Ljava/util/List;#Return(Ljava/lang/Object;)#157
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,6)#214
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#215
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,7)#216
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5f790dbb)#217
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#218
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New([Ljava/lang/Class;,1)#219
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,getConstructor,([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;)#220
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/RConstructor;,getRConstructor,(Ljava/lang/reflect/Constructor;)Lrandoop/RConstructor;)#221
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,7)#222
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#223
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,7)#224
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,contains,(Ljava/lang/Object;)Z)#225
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Constant(I,0)#14
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Return(I)#15
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#226
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,239)#227
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#228
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,7)#229
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#230
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#231
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Goto(239)#232
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,methodlist)#239
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#240
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,eq,342)#241
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#342
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,size,()I)#343
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#344
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,351)#345
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,noprogressdisplay)#351
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#352
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,364)#353
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#354
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/lang/StringBuilder;,0)#355
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#356
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"PUBLIC MEMBERS=")#357
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#358
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#359
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,size,()I)#360
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(I)Ljava/lang/StringBuilder;)#361
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#362
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#363
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,inputsequences)#364
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#365
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,eq,399)#366
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/util/ArrayList;,0)#399
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#400
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#401
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,8)#402
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,coverage_instrumented_classes)#403
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#404
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,eq,446)#405
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/util/LinkedHashSet;,0)#446
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#447
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#448
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,9)#449
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,componentfile_ser)#450
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,isEmpty,()Z)#451
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#452
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,514)#453
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"empty componentfile_ser@handle")#514
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#515
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenTests;,componentfile_txt)#516
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,isEmpty,()Z)#517
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#518
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,563)#519
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"componentfile_txt@handle")#563
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#564
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,9)#565
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/util/List;,STATIC,Lrandoop/SeedSequences;,primitiveSeeds)#566
randoop.SeedSequences.<clinit>()V#Constant(I,38)#0
randoop.SeedSequences.<clinit>()V#New([Ljava/lang/Object;,1)#1
randoop.SeedSequences.<clinit>()V#Dup(1,0)#2
randoop.SeedSequences.<clinit>()V#Constant(I,0)#3
randoop.SeedSequences.<clinit>()V#Constant(I,-1)#4
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Byte;,valueOf,(B)Ljava/lang/Byte;)#5
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#6
randoop.SeedSequences.<clinit>()V#Dup(1,0)#7
randoop.SeedSequences.<clinit>()V#Constant(I,1)#8
randoop.SeedSequences.<clinit>()V#Constant(I,0)#9
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Byte;,valueOf,(B)Ljava/lang/Byte;)#10
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#11
randoop.SeedSequences.<clinit>()V#Dup(1,0)#12
randoop.SeedSequences.<clinit>()V#Constant(I,2)#13
randoop.SeedSequences.<clinit>()V#Constant(I,1)#14
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Byte;,valueOf,(B)Ljava/lang/Byte;)#15
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#16
randoop.SeedSequences.<clinit>()V#Dup(1,0)#17
randoop.SeedSequences.<clinit>()V#Constant(I,3)#18
randoop.SeedSequences.<clinit>()V#Constant(I,10)#19
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Byte;,valueOf,(B)Ljava/lang/Byte;)#20
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#21
randoop.SeedSequences.<clinit>()V#Dup(1,0)#22
randoop.SeedSequences.<clinit>()V#Constant(I,4)#23
randoop.SeedSequences.<clinit>()V#Constant(I,100)#24
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Byte;,valueOf,(B)Ljava/lang/Byte;)#25
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#26
randoop.SeedSequences.<clinit>()V#Dup(1,0)#27
randoop.SeedSequences.<clinit>()V#Constant(I,5)#28
randoop.SeedSequences.<clinit>()V#Constant(I,-1)#29
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Short;,valueOf,(S)Ljava/lang/Short;)#30
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#31
randoop.SeedSequences.<clinit>()V#Dup(1,0)#32
randoop.SeedSequences.<clinit>()V#Constant(I,6)#33
randoop.SeedSequences.<clinit>()V#Constant(I,0)#34
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Short;,valueOf,(S)Ljava/lang/Short;)#35
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#36
randoop.SeedSequences.<clinit>()V#Dup(1,0)#37
randoop.SeedSequences.<clinit>()V#Constant(I,7)#38
randoop.SeedSequences.<clinit>()V#Constant(I,1)#39
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Short;,valueOf,(S)Ljava/lang/Short;)#40
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#41
randoop.SeedSequences.<clinit>()V#Dup(1,0)#42
randoop.SeedSequences.<clinit>()V#Constant(I,8)#43
randoop.SeedSequences.<clinit>()V#Constant(I,10)#44
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Short;,valueOf,(S)Ljava/lang/Short;)#45
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#46
randoop.SeedSequences.<clinit>()V#Dup(1,0)#47
randoop.SeedSequences.<clinit>()V#Constant(I,9)#48
randoop.SeedSequences.<clinit>()V#Constant(I,100)#49
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Short;,valueOf,(S)Ljava/lang/Short;)#50
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#51
randoop.SeedSequences.<clinit>()V#Dup(1,0)#52
randoop.SeedSequences.<clinit>()V#Constant(I,10)#53
randoop.SeedSequences.<clinit>()V#Constant(I,-1)#54
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#55
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#56
randoop.SeedSequences.<clinit>()V#Dup(1,0)#57
randoop.SeedSequences.<clinit>()V#Constant(I,11)#58
randoop.SeedSequences.<clinit>()V#Constant(I,0)#59
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#60
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#61
randoop.SeedSequences.<clinit>()V#Dup(1,0)#62
randoop.SeedSequences.<clinit>()V#Constant(I,12)#63
randoop.SeedSequences.<clinit>()V#Constant(I,1)#64
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#65
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#66
randoop.SeedSequences.<clinit>()V#Dup(1,0)#67
randoop.SeedSequences.<clinit>()V#Constant(I,13)#68
randoop.SeedSequences.<clinit>()V#Constant(I,10)#69
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#70
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#71
randoop.SeedSequences.<clinit>()V#Dup(1,0)#72
randoop.SeedSequences.<clinit>()V#Constant(I,14)#73
randoop.SeedSequences.<clinit>()V#Constant(I,100)#74
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#75
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#76
randoop.SeedSequences.<clinit>()V#Dup(1,0)#77
randoop.SeedSequences.<clinit>()V#Constant(I,15)#78
randoop.SeedSequences.<clinit>()V#Constant(J,-1)#79
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Long;,valueOf,(J)Ljava/lang/Long;)#80
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#81
randoop.SeedSequences.<clinit>()V#Dup(1,0)#82
randoop.SeedSequences.<clinit>()V#Constant(I,16)#83
randoop.SeedSequences.<clinit>()V#Constant(J,0)#84
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Long;,valueOf,(J)Ljava/lang/Long;)#85
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#86
randoop.SeedSequences.<clinit>()V#Dup(1,0)#87
randoop.SeedSequences.<clinit>()V#Constant(I,17)#88
randoop.SeedSequences.<clinit>()V#Constant(J,1)#89
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Long;,valueOf,(J)Ljava/lang/Long;)#90
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#91
randoop.SeedSequences.<clinit>()V#Dup(1,0)#92
randoop.SeedSequences.<clinit>()V#Constant(I,18)#93
randoop.SeedSequences.<clinit>()V#Constant(J,10)#94
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Long;,valueOf,(J)Ljava/lang/Long;)#95
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#96
randoop.SeedSequences.<clinit>()V#Dup(1,0)#97
randoop.SeedSequences.<clinit>()V#Constant(I,19)#98
randoop.SeedSequences.<clinit>()V#Constant(J,100)#99
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Long;,valueOf,(J)Ljava/lang/Long;)#100
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#101
randoop.SeedSequences.<clinit>()V#Dup(1,0)#102
randoop.SeedSequences.<clinit>()V#Constant(I,20)#103
randoop.SeedSequences.<clinit>()V#Constant(F,-1.0)#104
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Float;,valueOf,(F)Ljava/lang/Float;)#105
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#106
randoop.SeedSequences.<clinit>()V#Dup(1,0)#107
randoop.SeedSequences.<clinit>()V#Constant(I,21)#108
randoop.SeedSequences.<clinit>()V#Constant(F,0.0)#109
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Float;,valueOf,(F)Ljava/lang/Float;)#110
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#111
randoop.SeedSequences.<clinit>()V#Dup(1,0)#112
randoop.SeedSequences.<clinit>()V#Constant(I,22)#113
randoop.SeedSequences.<clinit>()V#Constant(F,1.0)#114
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Float;,valueOf,(F)Ljava/lang/Float;)#115
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#116
randoop.SeedSequences.<clinit>()V#Dup(1,0)#117
randoop.SeedSequences.<clinit>()V#Constant(I,23)#118
randoop.SeedSequences.<clinit>()V#Constant(F,10.0)#119
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Float;,valueOf,(F)Ljava/lang/Float;)#120
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#121
randoop.SeedSequences.<clinit>()V#Dup(1,0)#122
randoop.SeedSequences.<clinit>()V#Constant(I,24)#123
randoop.SeedSequences.<clinit>()V#Constant(F,100.0)#124
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Float;,valueOf,(F)Ljava/lang/Float;)#125
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#126
randoop.SeedSequences.<clinit>()V#Dup(1,0)#127
randoop.SeedSequences.<clinit>()V#Constant(I,25)#128
randoop.SeedSequences.<clinit>()V#Constant(D,-1.0)#129
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Double;,valueOf,(D)Ljava/lang/Double;)#130
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#131
randoop.SeedSequences.<clinit>()V#Dup(1,0)#132
randoop.SeedSequences.<clinit>()V#Constant(I,26)#133
randoop.SeedSequences.<clinit>()V#Constant(D,0.0)#134
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Double;,valueOf,(D)Ljava/lang/Double;)#135
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#136
randoop.SeedSequences.<clinit>()V#Dup(1,0)#137
randoop.SeedSequences.<clinit>()V#Constant(I,27)#138
randoop.SeedSequences.<clinit>()V#Constant(D,1.0)#139
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Double;,valueOf,(D)Ljava/lang/Double;)#140
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#141
randoop.SeedSequences.<clinit>()V#Dup(1,0)#142
randoop.SeedSequences.<clinit>()V#Constant(I,28)#143
randoop.SeedSequences.<clinit>()V#Constant(D,10.0)#144
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Double;,valueOf,(D)Ljava/lang/Double;)#145
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#146
randoop.SeedSequences.<clinit>()V#Dup(1,0)#147
randoop.SeedSequences.<clinit>()V#Constant(I,29)#148
randoop.SeedSequences.<clinit>()V#Constant(D,100.0)#149
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Double;,valueOf,(D)Ljava/lang/Double;)#150
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#151
randoop.SeedSequences.<clinit>()V#Dup(1,0)#152
randoop.SeedSequences.<clinit>()V#Constant(I,30)#153
randoop.SeedSequences.<clinit>()V#Constant(I,35)#154
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Character;,valueOf,(C)Ljava/lang/Character;)#155
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#156
randoop.SeedSequences.<clinit>()V#Dup(1,0)#157
randoop.SeedSequences.<clinit>()V#Constant(I,31)#158
randoop.SeedSequences.<clinit>()V#Constant(I,32)#159
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Character;,valueOf,(C)Ljava/lang/Character;)#160
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#161
randoop.SeedSequences.<clinit>()V#Dup(1,0)#162
randoop.SeedSequences.<clinit>()V#Constant(I,32)#163
randoop.SeedSequences.<clinit>()V#Constant(I,52)#164
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Character;,valueOf,(C)Ljava/lang/Character;)#165
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#166
randoop.SeedSequences.<clinit>()V#Dup(1,0)#167
randoop.SeedSequences.<clinit>()V#Constant(I,33)#168
randoop.SeedSequences.<clinit>()V#Constant(I,97)#169
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Character;,valueOf,(C)Ljava/lang/Character;)#170
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#171
randoop.SeedSequences.<clinit>()V#Dup(1,0)#172
randoop.SeedSequences.<clinit>()V#Constant(I,34)#173
randoop.SeedSequences.<clinit>()V#Constant(I,1)#174
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#175
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#176
randoop.SeedSequences.<clinit>()V#Dup(1,0)#177
randoop.SeedSequences.<clinit>()V#Constant(I,35)#178
randoop.SeedSequences.<clinit>()V#Constant(I,0)#179
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#180
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#181
randoop.SeedSequences.<clinit>()V#Dup(1,0)#182
randoop.SeedSequences.<clinit>()V#Constant(I,36)#183
randoop.SeedSequences.<clinit>()V#Constant(Ljava/lang/String;,"")#184
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#185
randoop.SeedSequences.<clinit>()V#Dup(1,0)#186
randoop.SeedSequences.<clinit>()V#Constant(I,37)#187
randoop.SeedSequences.<clinit>()V#Constant(Ljava/lang/String;,"hi!")#188
randoop.SeedSequences.<clinit>()V#ArrayStore(Ljava/lang/Object;)#189
randoop.SeedSequences.<clinit>()V#Invoke(STATIC,Ljava/util/Arrays;,asList,([Ljava/lang/Object;)Ljava/util/List;)#190
randoop.SeedSequences.<clinit>()V#Put(Ljava/util/List;,STATIC,Lrandoop/SeedSequences;,primitiveSeeds)#191
randoop.SeedSequences.<clinit>()V#Return(V)#192
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/SeedSequences;,objectsToSeeds,(Ljava/util/Collection;)Ljava/util/Set;)#567
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#New(Ljava/util/LinkedHashSet;,0)#0
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Dup(1,0)#1
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#2
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,1)#3
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Collection;,iterator,()Ljava/util/Iterator;)#5
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,3)#6
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Goto(16)#7
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#16
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#17
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Constant(I,0)#18
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#ConditionalBranch(I,ne,8)#19
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#8
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#9
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,2)#10
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#11
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#12
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Invoke(STATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,sequenceForPrimitive,(Ljava/lang/Object;)Lrandoop/Sequence;)#13
randoop.PrimitiveOrStringOrNullDecl.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@321669db)#0
randoop.PrimitiveOrStringOrNullDecl.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.PrimitiveOrStringOrNullDecl.<clinit>()V#Constant(I,0)#2
randoop.PrimitiveOrStringOrNullDecl.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.PrimitiveOrStringOrNullDecl.<clinit>()V#Constant(I,1)#4
randoop.PrimitiveOrStringOrNullDecl.<clinit>()V#Goto(7)#5
randoop.PrimitiveOrStringOrNullDecl.<clinit>()V#Put(Z,STATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,$assertionsDisabled)#7
randoop.PrimitiveOrStringOrNullDecl.<clinit>()V#Return(V)#8
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Constant(L;,null)#1
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#8
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#9
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,1)#10
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#11
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isBoxedOrPrimitiveOrStringType,(Ljava/lang/Class;)Z)#12
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isPrimitive,(Ljava/lang/Class;)Z)#1
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Constant(L;,null)#1
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,isPrimitiveCached)#8
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#9
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#10
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#CheckCast(Ljava/lang/Boolean;)#11
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,1)#12
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#13
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Constant(L;,null)#14
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#ConditionalBranch(Ljava/lang/Object;,ne,25)#15
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#16
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#17
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#18
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,1)#19
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,isPrimitiveCached)#20
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#21
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#22
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#23
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Pop(1)#24
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#25
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Boolean;,booleanValue,()Z)#26
randoop.util.PrimitiveTypes.isPrimitive(Ljava/lang/Class;)Z#Return(I)#27
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#Constant(I,0)#2
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#ConditionalBranch(I,eq,6)#3
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#6
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isBoxedPrimitiveTypeOrString,(Ljava/lang/Class;)Z)#7
randoop.util.PrimitiveTypes.isBoxedPrimitiveTypeOrString(Ljava/lang/Class;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#0
randoop.util.PrimitiveTypes.isBoxedPrimitiveTypeOrString(Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#1
randoop.util.PrimitiveTypes.isBoxedPrimitiveTypeOrString(Ljava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Map;,containsKey,(Ljava/lang/Object;)Z)#2
randoop.util.PrimitiveTypes.isBoxedPrimitiveTypeOrString(Ljava/lang/Class;)Z#Return(I)#3
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#Constant(I,0)#8
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#ConditionalBranch(I,eq,12)#9
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#Constant(I,1)#10
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#Return(I)#11
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Constant(I,0)#13
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#ConditionalBranch(I,ne,20)#14
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#20
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#21
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#22
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Constant(I,0)#23
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#ConditionalBranch(I,eq,41)#24
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#New(Lrandoop/PrimitiveOrStringOrNullDecl;,0)#41
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Dup(1,0)#42
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#43
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,primitiveType,(Ljava/lang/Class;)Ljava/lang/Class;)#44
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#1
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#Constant(I,0)#2
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#ConditionalBranch(I,eq,6)#3
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,boxedToPrimitiveAndString)#6
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#8
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#CheckCast(Ljava/lang/Class;)#9
randoop.util.PrimitiveTypes.primitiveType(Ljava/lang/Class;)Ljava/lang/Class;#Return(Ljava/lang/Object;)#10
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#45
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/PrimitiveOrStringOrNullDecl;,<init>,(Ljava/lang/Class;Ljava/lang/Object;)V)#46
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(L;,null)#3
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#10
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#12
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(I,0)#13
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#ConditionalBranch(I,eq,20)#14
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#20
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#21
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(I,0)#22
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#ConditionalBranch(I,eq,65)#23
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#24
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(L;,null)#25
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#ConditionalBranch(Ljava/lang/Object;,ne,32)#26
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#32
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,boxedType,(Ljava/lang/Class;)Ljava/lang/Class;)#33
randoop.util.PrimitiveTypes.boxedType(Ljava/lang/Class;)Ljava/lang/Class;#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#0
randoop.util.PrimitiveTypes.boxedType(Ljava/lang/Class;)Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#1
randoop.util.PrimitiveTypes.boxedType(Ljava/lang/Class;)Ljava/lang/Class;#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#2
randoop.util.PrimitiveTypes.boxedType(Ljava/lang/Class;)Ljava/lang/Class;#CheckCast(Ljava/lang/Class;)#3
randoop.util.PrimitiveTypes.boxedType(Ljava/lang/Class;)Ljava/lang/Class;#Return(Ljava/lang/Object;)#4
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#34
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#35
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#36
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(I,0)#37
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#ConditionalBranch(I,ne,55)#38
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#55
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#56
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isBoxedOrPrimitiveOrStringType,(Ljava/lang/Class;)Z)#57
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(I,0)#58
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#ConditionalBranch(I,ne,106)#59
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#106
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#107
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Put(Ljava/lang/Class;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,type)#108
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#109
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#110
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Put(Ljava/lang/Object;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,value)#111
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Return(V)#112
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Invoke(STATIC,Lrandoop/Sequence;,create,(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;)#47
randoop.Sequence.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@89949909)#0
randoop.Sequence.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.Sequence.<clinit>()V#Constant(I,0)#2
randoop.Sequence.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.Sequence.<clinit>()V#Constant(I,1)#4
randoop.Sequence.<clinit>()V#Goto(7)#5
randoop.Sequence.<clinit>()V#Put(Z,STATIC,Lrandoop/Sequence;,$assertionsDisabled)#7
randoop.Sequence.<clinit>()V#Return(V)#8
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#New(Lrandoop/Sequence;,0)#0
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#Dup(1,0)#1
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/Sequence;,<init>,()V)#2
randoop.Sequence.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.<init>()V#New(Lrandoop/util/ArrayListSimpleList;,0)#1
randoop.Sequence.<init>()V#Dup(1,0)#2
randoop.Sequence.<init>()V#Invoke(SPECIAL,Lrandoop/util/ArrayListSimpleList;,<init>,()V)#3
randoop.util.ArrayListSimpleList.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ArrayListSimpleList.<init>()V#Invoke(SPECIAL,Lrandoop/util/SimpleList;,<init>,()V)#1
randoop.util.SimpleList.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.SimpleList.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.SimpleList.<init>()V#Return(V)#2
randoop.util.ArrayListSimpleList.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.ArrayListSimpleList.<init>()V#New(Ljava/util/ArrayList;,0)#3
randoop.util.ArrayListSimpleList.<init>()V#Dup(1,0)#4
randoop.util.ArrayListSimpleList.<init>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#5
randoop.util.ArrayListSimpleList.<init>()V#Put(Ljava/util/ArrayList;,NONSTATIC,Lrandoop/util/ArrayListSimpleList;,theList)#6
randoop.util.ArrayListSimpleList.<init>()V#Return(V)#7
randoop.Sequence.<init>()V#Constant(I,0)#4
randoop.Sequence.<init>()V#Constant(I,0)#5
randoop.Sequence.<init>()V#Invoke(SPECIAL,Lrandoop/Sequence;,<init>,(Lrandoop/util/SimpleList;II)V)#6
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#3
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Conversion(J,D)#4
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Put(D,NONSTATIC,Lrandoop/Sequence;,lastTimeUsed)#5
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,1)#6
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Constant(L;,null)#7
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#ConditionalBranch(Ljava/lang/Object;,ne,14)#8
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#14
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,1)#15
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Put(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#16
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#17
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(I,2)#18
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Put(I,NONSTATIC,Lrandoop/Sequence;,savedHashCode)#19
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#20
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(I,3)#21
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Put(I,NONSTATIC,Lrandoop/Sequence;,savedNetSize)#22
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#23
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Invoke(SPECIAL,Lrandoop/Sequence;,computeLastStatementInfo,()V)#24
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.computeLastStatementInfo()V#New(Ljava/util/ArrayList;,0)#1
randoop.Sequence.computeLastStatementInfo()V#Dup(1,0)#2
randoop.Sequence.computeLastStatementInfo()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#3
randoop.Sequence.computeLastStatementInfo()V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementTypes)#4
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.Sequence.computeLastStatementInfo()V#New(Ljava/util/ArrayList;,0)#6
randoop.Sequence.computeLastStatementInfo()V#Dup(1,0)#7
randoop.Sequence.computeLastStatementInfo()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#8
randoop.Sequence.computeLastStatementInfo()V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementVariables)#9
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#10
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#11
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#12
randoop.util.ArrayListSimpleList.size()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ArrayListSimpleList.size()I#Get(Ljava/util/ArrayList;,NONSTATIC,Lrandoop/util/ArrayListSimpleList;,theList)#1
randoop.util.ArrayListSimpleList.size()I#Invoke(VIRTUAL,Ljava/util/ArrayList;,size,()I)#2
randoop.util.ArrayListSimpleList.size()I#Return(I)#3
randoop.Sequence.computeLastStatementInfo()V#Constant(I,0)#13
randoop.Sequence.computeLastStatementInfo()V#ConditionalBranch(I,le,165)#14
randoop.Sequence.computeLastStatementInfo()V#Return(V)#165
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#25
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#New(Ljava/util/BitSet;,0)#26
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Dup(1,0)#27
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#28
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#29
randoop.Sequence.size()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.size()I#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#1
randoop.Sequence.size()I#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#2
randoop.Sequence.size()I#Return(I)#3
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Invoke(SPECIAL,Ljava/util/BitSet;,<init>,(I)V)#30
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Put(Ljava/util/BitSet;,NONSTATIC,Lrandoop/Sequence;,activeFlags)#31
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#32
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Invoke(VIRTUAL,Lrandoop/Sequence;,setAllActiveFlags,()V)#33
randoop.Sequence.setAllActiveFlags()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.setAllActiveFlags()V#Get(Ljava/util/BitSet;,NONSTATIC,Lrandoop/Sequence;,activeFlags)#1
randoop.Sequence.setAllActiveFlags()V#Constant(I,0)#2
randoop.Sequence.setAllActiveFlags()V#LocalLoad(Ljava/lang/Object;,0)#3
randoop.Sequence.setAllActiveFlags()V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#4
randoop.Sequence.setAllActiveFlags()V#Invoke(VIRTUAL,Ljava/util/BitSet;,set,(II)V)#5
randoop.Sequence.setAllActiveFlags()V#Return(V)#6
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#LocalLoad(Ljava/lang/Object;,0)#34
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Invoke(SPECIAL,Lrandoop/Sequence;,checkRep,()V)#35
randoop.Sequence.checkRep()V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#0
randoop.Sequence.checkRep()V#Constant(I,0)#1
randoop.Sequence.checkRep()V#ConditionalBranch(I,ne,4)#2
randoop.Sequence.checkRep()V#Return(V)#3
randoop.Sequence.<init>(Lrandoop/util/SimpleList;II)V#Return(V)#36
randoop.Sequence.<init>()V#Return(V)#7
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#3
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#New(Ljava/util/ArrayList;,0)#4
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#Dup(1,0)#5
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#6
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,extend,(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;)#7
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#1
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,2)#2
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/Sequence;,checkInputs,(Lrandoop/StatementKind;Ljava/util/List;)V)#3
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Lrandoop/StatementKind;,getInputTypes,()Ljava/util/List;)#1
randoop.PrimitiveOrStringOrNullDecl.getInputTypes()Ljava/util/List;#Invoke(STATIC,Ljava/util/Collections;,emptyList,()Ljava/util/List;)#0
randoop.PrimitiveOrStringOrNullDecl.getInputTypes()Ljava/util/List;#Return(Ljava/lang/Object;)#1
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#2
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#3
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#4
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#ConditionalBranch(I,eq,30)#5
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Constant(I,0)#30
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalStore(I,3)#31
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Goto(182)#32
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(I,3)#182
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#183
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#184
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#ConditionalBranch(I,lt,33)#185
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Return(V)#186
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#New(Ljava/util/ArrayList;,0)#4
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Dup(1,0)#5
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Constant(I,1)#6
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#7
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,3)#8
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,2)#9
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#10
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,5)#11
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Goto(24)#12
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,5)#24
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#25
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Constant(I,0)#26
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#ConditionalBranch(I,ne,13)#27
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#New(Lrandoop/Statement;,0)#28
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Dup(1,0)#29
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#30
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,3)#31
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/Statement;,<init>,(Lrandoop/StatementKind;Ljava/util/List;)V)#32
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#Put(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#4
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#New(Ljava/util/ArrayList;,0)#6
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#Dup(1,0)#7
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#8
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(Ljava/util/Collection;)V)#9
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(STATIC,Ljava/util/Collections;,unmodifiableList,(Ljava/util/List;)Ljava/util/List;)#10
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#11
randoop.Statement.<init>(Lrandoop/StatementKind;Ljava/util/List;)V#Return(V)#12
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,4)#33
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#34
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Instanceof(Lrandoop/PrimitiveOrStringOrNullDecl;)#35
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Constant(I,0)#36
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#ConditionalBranch(I,eq,41)#37
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#38
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Get(I,NONSTATIC,Lrandoop/Sequence;,savedNetSize)#39
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Goto(45)#40
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalStore(I,5)#45
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#New(Lrandoop/Sequence;,0)#46
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Dup(1,0)#47
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#New(Lrandoop/util/OneMoreElementList;,0)#48
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Dup(1,0)#49
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#50
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#51
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,4)#52
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/util/OneMoreElementList;,<init>,(Lrandoop/util/SimpleList;Ljava/lang/Object;)V)#53
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#Invoke(SPECIAL,Lrandoop/util/SimpleList;,<init>,()V)#1
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#Put(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/util/OneMoreElementList;,list)#4
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#6
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#Put(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/OneMoreElementList;,lastElement)#7
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#10
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#Constant(I,1)#11
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#BinaryOp(I,add)#12
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#Put(I,NONSTATIC,Lrandoop/util/OneMoreElementList;,size)#13
randoop.util.OneMoreElementList.<init>(Lrandoop/util/SimpleList;Ljava/lang/Object;)V#Return(V)#14
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#54
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Get(I,NONSTATIC,Lrandoop/Sequence;,savedHashCode)#55
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,4)#56
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(VIRTUAL,Lrandoop/Statement;,hashCode,()I)#57
randoop.Statement.hashCode()I#Constant(I,5)#0
randoop.Statement.hashCode()I#LocalStore(I,1)#1
randoop.Statement.hashCode()I#LocalLoad(I,1)#2
randoop.Statement.hashCode()I#Constant(I,7)#3
randoop.Statement.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#4
randoop.Statement.hashCode()I#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#5
randoop.Statement.hashCode()I#Invoke(VIRTUAL,Ljava/lang/Object;,hashCode,()I)#6
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,type)#1
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#Invoke(VIRTUAL,Ljava/lang/Object;,hashCode,()I)#2
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#3
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,value)#4
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#Constant(L;,null)#5
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#ConditionalBranch(Ljava/lang/Object;,ne,9)#6
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#9
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,value)#10
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#Invoke(VIRTUAL,Ljava/lang/Object;,hashCode,()I)#11
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#BinaryOp(I,add)#12
randoop.PrimitiveOrStringOrNullDecl.hashCode()I#Return(I)#13
randoop.Statement.hashCode()I#BinaryOp(I,xor)#7
randoop.Statement.hashCode()I#BinaryOp(I,add)#8
randoop.Statement.hashCode()I#LocalStore(I,1)#9
randoop.Statement.hashCode()I#Constant(I,0)#10
randoop.Statement.hashCode()I#LocalStore(I,2)#11
randoop.Statement.hashCode()I#Goto(28)#12
randoop.Statement.hashCode()I#LocalLoad(I,2)#28
randoop.Statement.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#29
randoop.Statement.hashCode()I#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#30
randoop.Statement.hashCode()I#Invoke(INTERFACE,Ljava/util/List;,size,()I)#31
randoop.Statement.hashCode()I#ConditionalBranch(I,lt,13)#32
randoop.Statement.hashCode()I#LocalLoad(I,1)#33
randoop.Statement.hashCode()I#Return(I)#34
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#BinaryOp(I,add)#58
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(I,5)#59
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/Sequence;,<init>,(Lrandoop/util/SimpleList;II)V)#60
randoop.util.OneMoreElementList.size()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.OneMoreElementList.size()I#Get(I,NONSTATIC,Lrandoop/util/OneMoreElementList;,size)#1
randoop.util.OneMoreElementList.size()I#Return(I)#2
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#15
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#16
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#17
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#18
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#19
randoop.Sequence.computeLastStatementInfo()V#Constant(I,1)#20
randoop.Sequence.computeLastStatementInfo()V#BinaryOp(I,sub)#21
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#22
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#LocalLoad(I,1)#0
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#1
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/util/OneMoreElementList;,list)#2
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#3
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#ConditionalBranch(I,ge,10)#4
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#LocalLoad(I,1)#10
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#11
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/util/OneMoreElementList;,list)#12
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#13
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#ConditionalBranch(I,ne,18)#14
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#15
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/OneMoreElementList;,lastElement)#16
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Return(Ljava/lang/Object;)#17
randoop.Sequence.computeLastStatementInfo()V#CheckCast(Lrandoop/Statement;)#23
randoop.Sequence.computeLastStatementInfo()V#LocalStore(Ljava/lang/Object;,1)#24
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,1)#25
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#26
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Lrandoop/StatementKind;,getOutputType,()Ljava/lang/Class;)#27
randoop.PrimitiveOrStringOrNullDecl.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.PrimitiveOrStringOrNullDecl.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,type)#1
randoop.PrimitiveOrStringOrNullDecl.getOutputType()Ljava/lang/Class;#Return(Ljava/lang/Object;)#2
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#28
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#29
randoop.Sequence.computeLastStatementInfo()V#Constant(I,0)#30
randoop.Sequence.computeLastStatementInfo()V#ConditionalBranch(I,eq,38)#31
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#38
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementTypes)#39
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,1)#40
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#41
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Lrandoop/StatementKind;,getOutputType,()Ljava/lang/Class;)#42
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#43
randoop.Sequence.computeLastStatementInfo()V#Pop(1)#44
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#45
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementVariables)#46
randoop.Sequence.computeLastStatementInfo()V#New(Lrandoop/Variable;,0)#47
randoop.Sequence.computeLastStatementInfo()V#Dup(1,0)#48
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#49
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#50
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#51
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#52
randoop.Sequence.computeLastStatementInfo()V#Constant(I,1)#53
randoop.Sequence.computeLastStatementInfo()V#BinaryOp(I,sub)#54
randoop.Sequence.computeLastStatementInfo()V#Invoke(SPECIAL,Lrandoop/Variable;,<init>,(Lrandoop/Sequence;I)V)#55
randoop.Variable.<init>(Lrandoop/Sequence;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Variable.<init>(Lrandoop/Sequence;I)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.Variable.<init>(Lrandoop/Sequence;I)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.Variable.<init>(Lrandoop/Sequence;I)V#Constant(L;,null)#3
randoop.Variable.<init>(Lrandoop/Sequence;I)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.Variable.<init>(Lrandoop/Sequence;I)V#LocalLoad(I,2)#10
randoop.Variable.<init>(Lrandoop/Sequence;I)V#Constant(I,0)#11
randoop.Variable.<init>(Lrandoop/Sequence;I)V#ConditionalBranch(I,ge,24)#12
randoop.Variable.<init>(Lrandoop/Sequence;I)V#LocalLoad(Ljava/lang/Object;,0)#24
randoop.Variable.<init>(Lrandoop/Sequence;I)V#LocalLoad(Ljava/lang/Object;,1)#25
randoop.Variable.<init>(Lrandoop/Sequence;I)V#Put(Lrandoop/Sequence;,NONSTATIC,Lrandoop/Variable;,sequence)#26
randoop.Variable.<init>(Lrandoop/Sequence;I)V#LocalLoad(Ljava/lang/Object;,0)#27
randoop.Variable.<init>(Lrandoop/Sequence;I)V#LocalLoad(I,2)#28
randoop.Variable.<init>(Lrandoop/Sequence;I)V#Put(I,NONSTATIC,Lrandoop/Variable;,index)#29
randoop.Variable.<init>(Lrandoop/Sequence;I)V#Return(V)#30
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#56
randoop.Sequence.computeLastStatementInfo()V#Pop(1)#57
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,1)#58
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#59
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#60
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,1)#61
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#62
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Lrandoop/StatementKind;,getInputTypes,()Ljava/util/List;)#63
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#64
randoop.Sequence.computeLastStatementInfo()V#ConditionalBranch(I,eq,89)#65
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#89
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#90
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#91
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#92
randoop.Sequence.computeLastStatementInfo()V#Constant(I,1)#93
randoop.Sequence.computeLastStatementInfo()V#BinaryOp(I,sub)#94
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/Sequence;,getInputs,(I)Ljava/util/List;)#95
randoop.Sequence.getInputs(I)Ljava/util/List;#New(Ljava/util/ArrayList;,0)#0
randoop.Sequence.getInputs(I)Ljava/util/List;#Dup(1,0)#1
randoop.Sequence.getInputs(I)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalStore(Ljava/lang/Object;,2)#3
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.Sequence.getInputs(I)Ljava/util/List;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#5
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(I,1)#6
randoop.Sequence.getInputs(I)Ljava/util/List;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#7
randoop.Sequence.getInputs(I)Ljava/util/List;#CheckCast(Lrandoop/Statement;)#8
randoop.Sequence.getInputs(I)Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#9
randoop.Sequence.getInputs(I)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#10
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalStore(Ljava/lang/Object;,4)#11
randoop.Sequence.getInputs(I)Ljava/util/List;#Goto(24)#12
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,4)#24
randoop.Sequence.getInputs(I)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#25
randoop.Sequence.getInputs(I)Ljava/util/List;#Constant(I,0)#26
randoop.Sequence.getInputs(I)Ljava/util/List;#ConditionalBranch(I,ne,13)#27
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#28
randoop.Sequence.getInputs(I)Ljava/util/List;#Return(Ljava/lang/Object;)#29
randoop.Sequence.computeLastStatementInfo()V#LocalStore(Ljava/lang/Object;,2)#96
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,2)#97
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#98
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,1)#99
randoop.Sequence.computeLastStatementInfo()V#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#100
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Lrandoop/StatementKind;,getInputTypes,()Ljava/util/List;)#101
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#102
randoop.Sequence.computeLastStatementInfo()V#ConditionalBranch(I,eq,108)#103
randoop.Sequence.computeLastStatementInfo()V#Constant(I,0)#108
randoop.Sequence.computeLastStatementInfo()V#LocalStore(I,3)#109
randoop.Sequence.computeLastStatementInfo()V#Goto(161)#110
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(I,3)#161
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,2)#162
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#163
randoop.Sequence.computeLastStatementInfo()V#ConditionalBranch(I,lt,111)#164
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Return(Ljava/lang/Object;)#61
randoop.Sequence.create(Lrandoop/PrimitiveOrStringOrNullDecl;)Lrandoop/Sequence;#Return(Ljava/lang/Object;)#8
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Return(Ljava/lang/Object;)#48
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#14
randoop.Sequence.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.hashCode()I#Get(I,NONSTATIC,Lrandoop/Sequence;,savedHashCode)#1
randoop.Sequence.hashCode()I#Return(I)#2
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Pop(1)#15
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.Sequence.equals(Ljava/lang/Object;)Z#Instanceof(Lrandoop/Sequence;)#1
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,0)#2
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,6)#3
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#6
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#7
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,11)#8
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#11
randoop.Sequence.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/Sequence;)#12
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#13
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#14
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Lrandoop/Sequence;,getStatementsWithInputs,()Lrandoop/util/SimpleList;)#15
randoop.Sequence.getStatementsWithInputs()Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.getStatementsWithInputs()Lrandoop/util/SimpleList;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#1
randoop.Sequence.getStatementsWithInputs()Lrandoop/util/SimpleList;#Return(Ljava/lang/Object;)#2
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#16
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#17
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Lrandoop/Sequence;,getStatementsWithInputs,()Lrandoop/util/SimpleList;)#18
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#19
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,eq,31)#20
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,0)#31
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(I,3)#32
randoop.Sequence.equals(Ljava/lang/Object;)Z#Goto(175)#33
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(I,3)#175
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#176
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#177
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#178
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,lt,34)#179
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(L;,null)#34
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,4)#35
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(L;,null)#36
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,5)#37
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#38
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#39
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(I,3)#40
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#41
randoop.Sequence.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/Statement;)#42
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,4)#43
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#44
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#45
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(I,3)#46
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#47
randoop.Sequence.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/Statement;)#48
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,5)#49
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#50
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,0)#51
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,eq,79)#52
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,4)#79
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#80
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,5)#81
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#82
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#83
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Instanceof(Lrandoop/PrimitiveOrStringOrNullDecl;)#1
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Constant(I,0)#2
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,6)#3
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#6
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#7
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,11)#8
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#11
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/PrimitiveOrStringOrNullDecl;)#12
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#13
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#14
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,type)#15
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#16
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,type)#17
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#18
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Constant(I,0)#19
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,eq,30)#20
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#21
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,value)#22
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#23
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,value)#24
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Invoke(STATIC,Lrandoop/util/Util;,equalsWithNull,(Ljava/lang/Object;Ljava/lang/Object;)Z)#25
randoop.util.Util.<clinit>()V#Constant(Ljava/lang/String;,"line.separator")#0
randoop.util.Util.<clinit>()V#Invoke(STATIC,Ljava/lang/System;,getProperty,(Ljava/lang/String;)Ljava/lang/String;)#1
randoop.util.Util.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/util/Util;,newLine)#2
randoop.util.Util.<clinit>()V#Return(V)#3
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#Constant(L;,null)#1
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,10)#2
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#10
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#Constant(L;,null)#11
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,15)#12
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#15
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#16
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#17
randoop.util.Util.equalsWithNull(Ljava/lang/Object;Ljava/lang/Object;)Z#Return(I)#18
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Constant(I,0)#26
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,eq,30)#27
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Constant(I,0)#30
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Return(I)#31
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,0)#84
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,102)#85
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#86
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,0)#87
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,eq,100)#88
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,0)#100
randoop.Sequence.equals(Ljava/lang/Object;)Z#Return(I)#101
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#25
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#CheckCast(Ljava/lang/String;)#26
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,stringLengthOK,(Ljava/lang/String;)Z)#27
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"stringLengthOK")#0
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Constant(L;,null)#3
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,stringLengthOKCached)#10
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#11
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#12
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#CheckCast(Ljava/lang/Boolean;)#13
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,1)#14
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,1)#15
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Constant(L;,null)#16
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,eq,21)#17
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#21
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,length,()I)#22
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalStore(I,2)#23
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalLoad(I,2)#24
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Get(I,STATIC,Lrandoop/main/GenInputsAbstract;,string_maxlen)#25
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#ConditionalBranch(I,le,37)#26
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"string_maxlen > length @stringLengthOK")#37
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#38
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalLoad(I,2)#39
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Constant(I,6)#40
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#BinaryOp(I,mul)#41
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Get(I,STATIC,Lrandoop/main/GenInputsAbstract;,string_maxlen)#42
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#ConditionalBranch(I,ge,54)#43
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"lenth*6 < length @stringLengthOK")#44
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#45
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,stringLengthOKCached)#46
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#47
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Constant(I,1)#48
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#49
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#50
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Pop(1)#51
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Constant(I,1)#52
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Return(I)#53
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#Constant(I,0)#28
randoop.PrimitiveOrStringOrNullDecl.sequenceForPrimitive(Ljava/lang/Object;)Lrandoop/Sequence;#ConditionalBranch(I,ne,41)#29
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#65
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#66
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#67
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(I,0)#68
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#ConditionalBranch(I,eq,88)#69
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#70
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#CheckCast(Ljava/lang/String;)#71
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,stringLengthOK,(Ljava/lang/String;)Z)#72
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,1)#18
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/Boolean;,booleanValue,()Z)#19
randoop.util.PrimitiveTypes.stringLengthOK(Ljava/lang/String;)Z#Return(I)#20
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#Constant(I,0)#73
randoop.PrimitiveOrStringOrNullDecl.<init>(Ljava/lang/Class;Ljava/lang/Object;)V#ConditionalBranch(I,ne,106)#74
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#20
randoop.SeedSequences.objectsToSeeds(Ljava/util/Collection;)Ljava/util/Set;#Return(Ljava/lang/Object;)#21
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Set;,addAll,(Ljava/util/Collection;)Z)#568
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#569
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,9)#570
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,4)#571
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#572
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New([Ljava/lang/Class;,1)#573
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,toArray,([Ljava/lang/Object;)[Ljava/lang/Object;)#574
randoop.main.GenTests.handle([Ljava/lang/String;)Z#CheckCast([Ljava/lang/Class;)#575
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/SeedSequences;,getSeedsFromAnnotatedFields,([Ljava/lang/Class;)Ljava/util/Set;)#576
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#New(Ljava/util/ArrayList;,0)#0
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Dup(1,0)#1
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,1)#3
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Dup(1,0)#5
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,5)#6
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#ArrayLength()#7
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,4)#8
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Constant(I,0)#9
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,3)#10
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Goto(246)#11
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,3)#246
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,4)#247
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(I,lt,12)#248
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,5)#12
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,3)#13
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#ArrayLoad(Ljava/lang/Object;)#14
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,2)#15
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#16
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Invoke(VIRTUAL,Ljava/lang/Class;,getDeclaredFields,()[Ljava/lang/reflect/Field;)#17
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Dup(1,0)#18
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,9)#19
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#ArrayLength()#20
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,8)#21
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Constant(I,0)#22
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,7)#23
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Goto(239)#24
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,7)#239
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,8)#240
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(I,lt,25)#241
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,9)#25
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,7)#26
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#ArrayLoad(Ljava/lang/Object;)#27
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,6)#28
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,6)#29
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1dd889eb)#30
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Invoke(VIRTUAL,Ljava/lang/reflect/Field;,getAnnotation,(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;)#31
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Constant(L;,null)#32
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(Ljava/lang/Object;,eq,235)#33
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,7)#235
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Constant(I,1)#236
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#BinaryOp(I,add)#237
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,7)#238
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,3)#242
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Constant(I,1)#243
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#BinaryOp(I,add)#244
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,3)#245
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#249
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Constant(L;,null)#250
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/List;,remove,(Ljava/lang/Object;)Z)#251
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,2)#252
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#253
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Invoke(STATIC,Lrandoop/SeedSequences;,objectsToSeeds,(Ljava/util/Collection;)Ljava/util/Set;)#254
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,3)#255
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,2)#256
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Constant(I,0)#257
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(I,eq,265)#258
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#265
randoop.SeedSequences.getSeedsFromAnnotatedFields([Ljava/lang/Class;)Ljava/util/Set;#Return(Ljava/lang/Object;)#266
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/Set;,addAll,(Ljava/util/Collection;)Z)#577
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#578
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#579
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,10)#580
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,9)#581
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#582
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,ne,584)#583
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/ComponentManager;,0)#584
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#585
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,9)#586
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/ComponentManager;,<init>,(Ljava/util/Collection;)V)#587
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Constant(L;,null)#3
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Put(Lrandoop/ClassLiterals;,NONSTATIC,Lrandoop/ComponentManager;,classLiterals)#4
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Constant(L;,null)#6
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Put(Lrandoop/PackageLiterals;,NONSTATIC,Lrandoop/ComponentManager;,packageLiterals)#7
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#New(Ljava/util/LinkedHashSet;,0)#8
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Dup(1,0)#9
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Invoke(INTERFACE,Ljava/util/Collection;,size,()I)#11
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,(I)V)#12
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalStore(Ljava/lang/Object;,2)#13
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,2)#14
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,1)#15
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Invoke(INTERFACE,Ljava/util/Set;,addAll,(Ljava/util/Collection;)Z)#16
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Pop(1)#17
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#18
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,2)#19
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Invoke(STATIC,Ljava/util/Collections;,unmodifiableSet,(Ljava/util/Set;)Ljava/util/Set;)#20
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Put(Ljava/util/Collection;,NONSTATIC,Lrandoop/ComponentManager;,gralSeeds)#21
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#22
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#New(Lrandoop/SequenceCollection;,0)#23
randoop.SequenceCollection.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@4f6974b)#0
randoop.SequenceCollection.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.SequenceCollection.<clinit>()V#Constant(I,0)#2
randoop.SequenceCollection.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.SequenceCollection.<clinit>()V#Constant(I,1)#4
randoop.SequenceCollection.<clinit>()V#Goto(7)#5
randoop.SequenceCollection.<clinit>()V#Put(Z,STATIC,Lrandoop/SequenceCollection;,$assertionsDisabled)#7
randoop.SequenceCollection.<clinit>()V#Return(V)#8
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Dup(1,0)#24
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,2)#25
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Lrandoop/SequenceCollection;,<init>,(Ljava/util/Collection;)V)#26
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#New(Ljava/util/LinkedHashMap;,0)#3
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Dup(1,0)#4
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#5
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Put(Ljava/util/Map;,NONSTATIC,Lrandoop/SequenceCollection;,activeSequences)#6
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#7
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#New(Lrandoop/SubTypeSet;,0)#8
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Dup(1,0)#9
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Constant(I,0)#10
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Lrandoop/SubTypeSet;,<init>,(Z)V)#11
randoop.SubTypeSet.<init>(Z)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.SubTypeSet.<init>(Z)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.SubTypeSet.<init>(Z)V#LocalLoad(I,1)#2
randoop.SubTypeSet.<init>(Z)V#Constant(I,0)#3
randoop.SubTypeSet.<init>(Z)V#ConditionalBranch(I,eq,19)#4
randoop.SubTypeSet.<init>(Z)V#LocalLoad(Ljava/lang/Object;,0)#19
randoop.SubTypeSet.<init>(Z)V#Constant(I,0)#20
randoop.SubTypeSet.<init>(Z)V#Put(Z,NONSTATIC,Lrandoop/SubTypeSet;,reversible)#21
randoop.SubTypeSet.<init>(Z)V#LocalLoad(Ljava/lang/Object;,0)#22
randoop.SubTypeSet.<init>(Z)V#New(Lrandoop/util/MultiMap;,0)#23
randoop.SubTypeSet.<init>(Z)V#Dup(1,0)#24
randoop.SubTypeSet.<init>(Z)V#Invoke(SPECIAL,Lrandoop/util/MultiMap;,<init>,()V)#25
randoop.util.MultiMap.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.MultiMap.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.MultiMap.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.MultiMap.<init>()V#New(Ljava/util/LinkedHashMap;,0)#3
randoop.util.MultiMap.<init>()V#Dup(1,0)#4
randoop.util.MultiMap.<init>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#5
randoop.util.MultiMap.<init>()V#Put(Ljava/util/Map;,NONSTATIC,Lrandoop/util/MultiMap;,map)#6
randoop.util.MultiMap.<init>()V#Return(V)#7
randoop.SubTypeSet.<init>(Z)V#Put(Lrandoop/util/IMultiMap;,NONSTATIC,Lrandoop/SubTypeSet;,subTypesWithsequences)#26
randoop.SubTypeSet.<init>(Z)V#LocalLoad(Ljava/lang/Object;,0)#27
randoop.SubTypeSet.<init>(Z)V#New(Lrandoop/util/SimpleSet;,0)#28
randoop.SubTypeSet.<init>(Z)V#Dup(1,0)#29
randoop.SubTypeSet.<init>(Z)V#Invoke(SPECIAL,Lrandoop/util/SimpleSet;,<init>,()V)#30
randoop.util.SimpleSet.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.SimpleSet.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.SimpleSet.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.SimpleSet.<init>()V#New(Ljava/util/LinkedHashSet;,0)#3
randoop.util.SimpleSet.<init>()V#Dup(1,0)#4
randoop.util.SimpleSet.<init>()V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#5
randoop.util.SimpleSet.<init>()V#Put(Ljava/util/LinkedHashSet;,NONSTATIC,Lrandoop/util/SimpleSet;,set)#6
randoop.util.SimpleSet.<init>()V#Return(V)#7
randoop.SubTypeSet.<init>(Z)V#Put(Lrandoop/util/ISimpleSet;,NONSTATIC,Lrandoop/SubTypeSet;,typesWithsequences)#31
randoop.SubTypeSet.<init>(Z)V#Return(V)#32
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Put(Lrandoop/SubTypeSet;,NONSTATIC,Lrandoop/SequenceCollection;,typesWithSequencesMap)#12
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Constant(I,0)#14
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Put(I,NONSTATIC,Lrandoop/SequenceCollection;,numActivesequences)#15
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,1)#16
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Constant(L;,null)#17
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#ConditionalBranch(Ljava/lang/Object;,ne,24)#18
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#24
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#New(Ljava/util/LinkedHashMap;,0)#25
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Dup(1,0)#26
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#27
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Put(Ljava/util/Map;,NONSTATIC,Lrandoop/SequenceCollection;,activeSequences)#28
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#29
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#New(Lrandoop/SubTypeSet;,0)#30
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Dup(1,0)#31
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Constant(I,0)#32
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Lrandoop/SubTypeSet;,<init>,(Z)V)#33
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Put(Lrandoop/SubTypeSet;,NONSTATIC,Lrandoop/SequenceCollection;,typesWithSequencesMap)#34
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#35
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Constant(I,0)#36
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Put(I,NONSTATIC,Lrandoop/SequenceCollection;,numActivesequences)#37
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#38
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,1)#39
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Invoke(VIRTUAL,Lrandoop/SequenceCollection;,addAll,(Ljava/util/Collection;)V)#40
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#Constant(L;,null)#1
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,1)#8
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#Invoke(INTERFACE,Ljava/util/Collection;,iterator,()Ljava/util/Iterator;)#9
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#LocalStore(Ljava/lang/Object;,3)#10
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#Goto(19)#11
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,3)#19
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#20
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#Constant(I,0)#21
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#ConditionalBranch(I,ne,12)#22
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,3)#12
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#13
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#CheckCast(Lrandoop/Sequence;)#14
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#LocalStore(Ljava/lang/Object;,2)#15
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#16
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,2)#17
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#Invoke(VIRTUAL,Lrandoop/SequenceCollection;,add,(Lrandoop/Sequence;)V)#18
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#New(Ljava/util/ArrayList;,0)#0
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Dup(1,0)#1
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalStore(Ljava/lang/Object;,2)#3
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#4
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getLastStatementTypes,()Ljava/util/List;)#5
randoop.Sequence.getLastStatementTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.getLastStatementTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementTypes)#1
randoop.Sequence.getLastStatementTypes()Ljava/util/List;#Return(Ljava/lang/Object;)#2
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalStore(Ljava/lang/Object;,3)#6
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#7
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getLastStatementVariables,()Ljava/util/List;)#8
randoop.Sequence.getLastStatementVariables()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.getLastStatementVariables()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementVariables)#1
randoop.Sequence.getLastStatementVariables()Ljava/util/List;#Return(Ljava/lang/Object;)#2
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalStore(Ljava/lang/Object;,4)#9
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Get(Z,STATIC,Lrandoop/SequenceCollection;,$assertionsDisabled)#10
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Constant(I,0)#11
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#ConditionalBranch(I,ne,22)#12
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Constant(I,0)#22
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalStore(I,5)#23
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Goto(63)#24
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(I,5)#63
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,3)#64
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#65
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#ConditionalBranch(I,lt,25)#66
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,4)#25
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(I,5)#26
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#27
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#CheckCast(Lrandoop/Variable;)#28
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalStore(Ljava/lang/Object;,6)#29
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Get(Z,STATIC,Lrandoop/SequenceCollection;,$assertionsDisabled)#30
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Constant(I,0)#31
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#ConditionalBranch(I,ne,46)#32
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#46
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,6)#47
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Variable;,getDeclIndex,()I)#48
randoop.Variable.getDeclIndex()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Variable.getDeclIndex()I#Get(I,NONSTATIC,Lrandoop/Variable;,index)#1
randoop.Variable.getDeclIndex()I#Return(I)#2
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,isActive,(I)Z)#49
randoop.Sequence.isActive(I)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.isActive(I)Z#Get(Ljava/util/BitSet;,NONSTATIC,Lrandoop/Sequence;,activeFlags)#1
randoop.Sequence.isActive(I)Z#LocalLoad(I,1)#2
randoop.Sequence.isActive(I)Z#Invoke(VIRTUAL,Ljava/util/BitSet;,get,(I)Z)#3
randoop.Sequence.isActive(I)Z#Return(I)#4
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Constant(I,0)#50
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#ConditionalBranch(I,eq,59)#51
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,2)#52
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,3)#53
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(I,5)#54
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#55
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#CheckCast(Ljava/lang/Class;)#56
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#57
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Pop(1)#58
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(I,5)#59
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Constant(I,1)#60
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#BinaryOp(I,add)#61
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalStore(I,5)#62
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#67
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,2)#68
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(SPECIAL,Lrandoop/SequenceCollection;,updateCompatibleClassMap,(Ljava/util/List;)V)#69
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#1
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,3)#2
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#Goto(12)#3
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,3)#12
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#13
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#Constant(I,0)#14
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#ConditionalBranch(I,ne,4)#15
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,3)#4
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#5
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#CheckCast(Ljava/lang/Class;)#6
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,2)#7
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#Get(Lrandoop/SubTypeSet;,NONSTATIC,Lrandoop/SequenceCollection;,typesWithSequencesMap)#9
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#10
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#Invoke(VIRTUAL,Lrandoop/SubTypeSet;,add,(Ljava/lang/Class;)V)#11
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Constant(L;,null)#1
randoop.SubTypeSet.add(Ljava/lang/Class;)V#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Get(Lrandoop/util/ISimpleSet;,NONSTATIC,Lrandoop/SubTypeSet;,typesWithsequences)#9
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Lrandoop/util/ISimpleSet;,contains,(Ljava/lang/Object;)Z)#11
randoop.util.SimpleSet.contains(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.SimpleSet.contains(Ljava/lang/Object;)Z#Get(Ljava/util/LinkedHashSet;,NONSTATIC,Lrandoop/util/SimpleSet;,set)#1
randoop.util.SimpleSet.contains(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.SimpleSet.contains(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/util/LinkedHashSet;,contains,(Ljava/lang/Object;)Z)#3
randoop.util.SimpleSet.contains(Ljava/lang/Object;)Z#Return(I)#4
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Constant(I,0)#12
randoop.SubTypeSet.add(Ljava/lang/Class;)V#ConditionalBranch(I,eq,15)#13
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,0)#15
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Get(Lrandoop/util/ISimpleSet;,NONSTATIC,Lrandoop/SubTypeSet;,typesWithsequences)#16
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#17
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Lrandoop/util/ISimpleSet;,add,(Ljava/lang/Object;)V)#18
randoop.util.SimpleSet.add(Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.SimpleSet.add(Ljava/lang/Object;)V#Get(Ljava/util/LinkedHashSet;,NONSTATIC,Lrandoop/util/SimpleSet;,set)#1
randoop.util.SimpleSet.add(Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.SimpleSet.add(Ljava/lang/Object;)V#Invoke(VIRTUAL,Ljava/util/LinkedHashSet;,add,(Ljava/lang/Object;)Z)#3
randoop.util.SimpleSet.add(Ljava/lang/Object;)V#Pop(1)#4
randoop.util.SimpleSet.add(Ljava/lang/Object;)V#Return(V)#5
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,0)#19
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Get(Lrandoop/util/IMultiMap;,NONSTATIC,Lrandoop/SubTypeSet;,subTypesWithsequences)#20
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Lrandoop/util/IMultiMap;,keySet,()Ljava/util/Set;)#21
randoop.util.MultiMap.keySet()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.MultiMap.keySet()Ljava/util/Set;#Get(Ljava/util/Map;,NONSTATIC,Lrandoop/util/MultiMap;,map)#1
randoop.util.MultiMap.keySet()Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Map;,keySet,()Ljava/util/Set;)#2
randoop.util.MultiMap.keySet()Ljava/util/Set;#Return(Ljava/lang/Object;)#3
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#22
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalStore(Ljava/lang/Object;,3)#23
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Goto(47)#24
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,3)#47
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#48
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Constant(I,0)#49
randoop.SubTypeSet.add(Ljava/lang/Class;)V#ConditionalBranch(I,ne,25)#50
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Return(V)#51
randoop.SequenceCollection.updateCompatibleClassMap(Ljava/util/List;)V#Return(V)#16
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#70
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#71
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,2)#72
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(SPECIAL,Lrandoop/SequenceCollection;,updateCompatibleMap,(Lrandoop/Sequence;Ljava/util/List;)V)#73
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Constant(I,0)#0
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalStore(I,3)#1
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Goto(62)#2
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(I,3)#62
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#63
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#64
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#ConditionalBranch(I,lt,3)#65
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#3
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(I,3)#4
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#5
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#CheckCast(Ljava/lang/Class;)#6
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,4)#7
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Get(Ljava/util/Map;,NONSTATIC,Lrandoop/SequenceCollection;,activeSequences)#9
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,4)#10
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#11
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#CheckCast(Lrandoop/util/ArrayListSimpleList;)#12
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,5)#13
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,5)#14
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Constant(L;,null)#15
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,ne,27)#16
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#New(Lrandoop/util/ArrayListSimpleList;,0)#17
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Dup(1,0)#18
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Invoke(SPECIAL,Lrandoop/util/ArrayListSimpleList;,<init>,()V)#19
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,5)#20
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#21
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Get(Ljava/util/Map;,NONSTATIC,Lrandoop/SequenceCollection;,activeSequences)#22
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,4)#23
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,5)#24
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#25
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Pop(1)#26
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#27
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Constant(I,0)#28
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#ConditionalBranch(I,eq,38)#29
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,5)#38
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#39
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Invoke(VIRTUAL,Lrandoop/util/ArrayListSimpleList;,add,(Ljava/lang/Object;)Z)#40
randoop.util.ArrayListSimpleList.add(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ArrayListSimpleList.add(Ljava/lang/Object;)Z#Get(Ljava/util/ArrayList;,NONSTATIC,Lrandoop/util/ArrayListSimpleList;,theList)#1
randoop.util.ArrayListSimpleList.add(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.ArrayListSimpleList.add(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/util/ArrayList;,add,(Ljava/lang/Object;)Z)#3
randoop.util.ArrayListSimpleList.add(Ljava/lang/Object;)Z#Return(I)#4
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalStore(I,6)#41
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#42
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Dup(1,0)#43
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Get(I,NONSTATIC,Lrandoop/SequenceCollection;,numActivesequences)#44
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Constant(I,1)#45
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#BinaryOp(I,add)#46
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/SequenceCollection;,numActivesequences)#47
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Get(Z,STATIC,Lrandoop/SequenceCollection;,$assertionsDisabled)#48
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Constant(I,0)#49
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#ConditionalBranch(I,ne,58)#50
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalLoad(I,3)#58
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Constant(I,1)#59
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#BinaryOp(I,add)#60
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#LocalStore(I,3)#61
randoop.SequenceCollection.updateCompatibleMap(Lrandoop/Sequence;Ljava/util/List;)V#Return(V)#66
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#74
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Invoke(SPECIAL,Lrandoop/SequenceCollection;,checkRep,()V)#75
randoop.SequenceCollection.checkRep()V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#0
randoop.SequenceCollection.checkRep()V#Constant(I,0)#1
randoop.SequenceCollection.checkRep()V#ConditionalBranch(I,ne,4)#2
randoop.SequenceCollection.checkRep()V#Return(V)#3
randoop.SequenceCollection.add(Lrandoop/Sequence;)V#Return(V)#76
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Return(V)#14
randoop.SequenceCollection.addAll(Ljava/util/Collection;)V#Return(V)#23
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#41
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Invoke(SPECIAL,Lrandoop/SequenceCollection;,checkRep,()V)#42
randoop.SequenceCollection.<init>(Ljava/util/Collection;)V#Return(V)#43
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Put(Lrandoop/SequenceCollection;,NONSTATIC,Lrandoop/ComponentManager;,gralComponents)#27
randoop.ComponentManager.<init>(Ljava/util/Collection;)V#Return(V)#28
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,10)#588
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#589
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,10)#590
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,3)#591
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/main/GenTests;,addClassLiterals,(Lrandoop/ComponentManager;Ljava/util/List;)V)#592
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Constant(Ljava/lang/String;,"addClassLiterals")#0
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract;,literals_level)#2
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Get(Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,STATIC,Lrandoop/main/GenInputsAbstract$ClassLiteralsMode;,NONE)#3
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,eq,7)#4
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Constant(I,0)#7
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#LocalStore(I,3)#8
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,literals_file)#9
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#10
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Constant(I,0)#11
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#ConditionalBranch(I,le,23)#12
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,literals_file)#23
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#24
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,5)#25
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Goto(139)#26
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,5)#139
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#140
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Constant(I,0)#141
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#ConditionalBranch(I,ne,27)#142
randoop.main.GenTests.addClassLiterals(Lrandoop/ComponentManager;Ljava/util/List;)V#Return(V)#143
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/RandoopListenerManager;,0)#593
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#594
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/RandoopListenerManager;,<init>,()V)#595
randoop.RandoopListenerManager.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RandoopListenerManager.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.RandoopListenerManager.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.RandoopListenerManager.<init>()V#New(Ljava/util/LinkedList;,0)#3
randoop.RandoopListenerManager.<init>()V#Dup(1,0)#4
randoop.RandoopListenerManager.<init>()V#Invoke(SPECIAL,Ljava/util/LinkedList;,<init>,()V)#5
randoop.RandoopListenerManager.<init>()V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/RandoopListenerManager;,listeners)#6
randoop.RandoopListenerManager.<init>()V#Return(V)#7
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,11)#596
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#597
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,12)#598
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/util/LinkedList;,0)#599
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#600
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/util/LinkedList;,<init>,()V)#601
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,13)#602
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,13)#603
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/DefaultTestFilter;,0)#604
randoop.DefaultTestFilter.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@79d15f9f)#0
randoop.DefaultTestFilter.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.DefaultTestFilter.<clinit>()V#Constant(I,0)#2
randoop.DefaultTestFilter.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.DefaultTestFilter.<clinit>()V#Constant(I,1)#4
randoop.DefaultTestFilter.<clinit>()V#Goto(7)#5
randoop.DefaultTestFilter.<clinit>()V#Put(Z,STATIC,Lrandoop/DefaultTestFilter;,$assertionsDisabled)#7
randoop.DefaultTestFilter.<clinit>()V#Return(V)#8
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#605
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/DefaultTestFilter;,<init>,()V)#606
randoop.DefaultTestFilter.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.DefaultTestFilter.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.DefaultTestFilter.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.DefaultTestFilter.<init>()V#New(Ljava/util/LinkedHashSet;,0)#3
randoop.DefaultTestFilter.<init>()V#Dup(1,0)#4
randoop.DefaultTestFilter.<init>()V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#5
randoop.DefaultTestFilter.<init>()V#Put(Ljava/util/Set;,NONSTATIC,Lrandoop/DefaultTestFilter;,errors)#6
randoop.DefaultTestFilter.<init>()V#Return(V)#7
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/util/LinkedList;,add,(Ljava/lang/Object;)Z)#607
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#608
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"timelimit@handle")#609
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#610
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"inputlimit@handle")#611
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#612
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/ForwardGenerator;,0)#613
randoop.ForwardGenerator.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@a89e04dc)#0
randoop.ForwardGenerator.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.ForwardGenerator.<clinit>()V#Constant(I,0)#2
randoop.ForwardGenerator.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.ForwardGenerator.<clinit>()V#Constant(I,1)#4
randoop.ForwardGenerator.<clinit>()V#Goto(7)#5
randoop.ForwardGenerator.<clinit>()V#Put(Z,STATIC,Lrandoop/ForwardGenerator;,$assertionsDisabled)#7
randoop.ForwardGenerator.<clinit>()V#Return(V)#8
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#614
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,6)#615
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(I,STATIC,Lrandoop/main/GenTests;,timelimit)#616
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,1000)#617
randoop.main.GenTests.handle([Ljava/lang/String;)Z#BinaryOp(I,mul)#618
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Conversion(I,J)#619
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(I,STATIC,Lrandoop/main/GenTests;,inputlimit)#620
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,10)#621
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#622
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,11)#623
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,13)#624
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/ForwardGenerator;,<init>,(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V)#625
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(J,2)#2
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(I,4)#3
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,5)#4
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,6)#5
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,7)#6
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,8)#7
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Lrandoop/AbstractGenerator;,<init>,(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V)#8
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Constant(I,0)#3
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_steps)#4
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Constant(I,0)#6
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_sequences_generated)#7
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Constant(I,0)#9
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_failing_sequences)#10
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#11
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Lrandoop/util/Timer;,0)#12
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#13
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Lrandoop/util/Timer;,<init>,()V)#14
randoop.util.Timer.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Timer.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.Timer.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.Timer.<init>()V#Constant(J,0)#3
randoop.util.Timer.<init>()V#Put(J,NONSTATIC,Lrandoop/util/Timer;,timeElapsed)#4
randoop.util.Timer.<init>()V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.util.Timer.<init>()V#Constant(I,0)#6
randoop.util.Timer.<init>()V#Put(Z,NONSTATIC,Lrandoop/util/Timer;,running)#7
randoop.util.Timer.<init>()V#Return(V)#8
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Lrandoop/util/Timer;,NONSTATIC,Lrandoop/AbstractGenerator;,timer)#15
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#16
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Ljava/util/ArrayList;,0)#17
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#18
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#19
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/AbstractGenerator;,outSeqs)#20
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Get(Z,STATIC,Lrandoop/AbstractGenerator;,$assertionsDisabled)#21
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Constant(I,0)#22
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#ConditionalBranch(I,ne,31)#23
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#31
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(J,2)#32
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(J,NONSTATIC,Lrandoop/AbstractGenerator;,maxTimeMillis)#33
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#34
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(I,4)#35
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/AbstractGenerator;,maxSequences)#36
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#37
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#38
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/AbstractGenerator;,statements)#39
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#40
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Lrandoop/MultiVisitor;,0)#41
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#42
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Lrandoop/MultiVisitor;,<init>,()V)#43
randoop.MultiVisitor.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.MultiVisitor.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.MultiVisitor.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.MultiVisitor.<init>()V#New(Ljava/util/ArrayList;,0)#3
randoop.MultiVisitor.<init>()V#Dup(1,0)#4
randoop.MultiVisitor.<init>()V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#5
randoop.MultiVisitor.<init>()V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/MultiVisitor;,visitors)#6
randoop.MultiVisitor.<init>()V#Return(V)#7
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Lrandoop/MultiVisitor;,NONSTATIC,Lrandoop/AbstractGenerator;,executionVisitor)#44
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,5)#45
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Constant(L;,null)#46
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,ne,54)#47
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#54
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,5)#55
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Lrandoop/ComponentManager;,NONSTATIC,Lrandoop/AbstractGenerator;,componentManager)#56
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#57
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,6)#58
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Lrandoop/IStopper;,NONSTATIC,Lrandoop/AbstractGenerator;,stopper)#59
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#60
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,7)#61
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#62
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#63
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Ljava/util/LinkedList;,0)#64
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#65
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/LinkedList;,<init>,()V)#66
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/AbstractGenerator;,outputTestFilters)#67
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,8)#68
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Constant(L;,null)#69
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,eq,75)#70
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,8)#71
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,isEmpty,()Z)#72
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Constant(I,0)#73
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#ConditionalBranch(I,eq,83)#74
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#83
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/AbstractGenerator;,outputTestFilters)#84
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,8)#85
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#86
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Pop(1)#87
randoop.AbstractGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Return(V)#88
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#9
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Ljava/util/LinkedHashSet;,0)#10
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#11
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#12
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,subsumed_sequences)#13
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#14
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Ljava/util/ArrayList;,0)#15
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#16
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#17
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/ForwardGenerator;,allsequencesAsCode)#18
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#19
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Ljava/util/ArrayList;,0)#20
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#21
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#22
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/ForwardGenerator;,allsequencesAsList)#23
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#24
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Ljava/util/LinkedHashSet;,0)#25
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#26
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#27
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,runtimePrimitivesSeen)#28
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#29
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Lrandoop/ObjectCache;,0)#30
randoop.ObjectCache.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@ca946ae7)#0
randoop.ObjectCache.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.ObjectCache.<clinit>()V#Constant(I,0)#2
randoop.ObjectCache.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.ObjectCache.<clinit>()V#Constant(I,1)#4
randoop.ObjectCache.<clinit>()V#Goto(7)#5
randoop.ObjectCache.<clinit>()V#Put(Z,STATIC,Lrandoop/ObjectCache;,$assertionsDisabled)#7
randoop.ObjectCache.<clinit>()V#Return(V)#8
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#31
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Lrandoop/EqualsMethodMatcher;,0)#32
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#33
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Lrandoop/EqualsMethodMatcher;,<init>,()V)#34
randoop.EqualsMethodMatcher.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.EqualsMethodMatcher.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.EqualsMethodMatcher.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.EqualsMethodMatcher.<init>()V#New(Ljava/util/LinkedHashSet;,0)#3
randoop.EqualsMethodMatcher.<init>()V#Dup(1,0)#4
randoop.EqualsMethodMatcher.<init>()V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#5
randoop.EqualsMethodMatcher.<init>()V#Put(Ljava/util/Set;,NONSTATIC,Lrandoop/EqualsMethodMatcher;,cache)#6
randoop.EqualsMethodMatcher.<init>()V#Return(V)#7
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Lrandoop/ObjectCache;,<init>,(Lrandoop/StateMatcher;)V)#35
randoop.ObjectCache.<init>(Lrandoop/StateMatcher;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ObjectCache.<init>(Lrandoop/StateMatcher;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.ObjectCache.<init>(Lrandoop/StateMatcher;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ObjectCache.<init>(Lrandoop/StateMatcher;)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.ObjectCache.<init>(Lrandoop/StateMatcher;)V#Put(Lrandoop/StateMatcher;,NONSTATIC,Lrandoop/ObjectCache;,sm)#4
randoop.ObjectCache.<init>(Lrandoop/StateMatcher;)V#Return(V)#5
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Lrandoop/ObjectCache;,NONSTATIC,Lrandoop/ForwardGenerator;,objectCache)#36
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Constant(Ljava/lang/String;,"ForwardGenerator<init>")#37
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#38
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#39
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#New(Ljava/util/LinkedHashSet;,0)#40
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Dup(1,0)#41
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#42
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Put(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,allSequences)#43
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#44
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Invoke(SPECIAL,Lrandoop/ForwardGenerator;,initializeRuntimePrimitivesSeen,()V)#45
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Constant(Ljava/lang/String;,"initializeRuntimePrimitivesSeen")#0
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Get(Lrandoop/ComponentManager;,NONSTATIC,Lrandoop/ForwardGenerator;,componentManager)#3
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(VIRTUAL,Lrandoop/ComponentManager;,getAllPrimitiveSequences,()Ljava/util/Set;)#4
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#New(Ljava/util/LinkedHashSet;,0)#0
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Dup(1,0)#1
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#2
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalStore(Ljava/lang/Object;,1)#3
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Get(Lrandoop/ClassLiterals;,NONSTATIC,Lrandoop/ComponentManager;,classLiterals)#5
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Constant(L;,null)#6
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#ConditionalBranch(Ljava/lang/Object;,eq,28)#7
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#28
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Get(Lrandoop/PackageLiterals;,NONSTATIC,Lrandoop/ComponentManager;,packageLiterals)#29
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Constant(L;,null)#30
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#ConditionalBranch(Ljava/lang/Object;,eq,52)#31
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,getPrimitiveTypesAndString,()Ljava/util/Set;)#52
randoop.util.PrimitiveTypes.getPrimitiveTypesAndString()Ljava/util/Set;#Get(Ljava/util/Map;,STATIC,Lrandoop/util/PrimitiveTypes;,primitiveAndStringToBoxed)#0
randoop.util.PrimitiveTypes.getPrimitiveTypesAndString()Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Map;,keySet,()Ljava/util/Set;)#1
randoop.util.PrimitiveTypes.getPrimitiveTypesAndString()Ljava/util/Set;#Invoke(STATIC,Ljava/util/Collections;,unmodifiableSet,(Ljava/util/Set;)Ljava/util/Set;)#2
randoop.util.PrimitiveTypes.getPrimitiveTypesAndString()Ljava/util/Set;#Return(Ljava/lang/Object;)#3
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#53
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalStore(Ljava/lang/Object;,3)#54
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Goto(69)#55
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#69
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#70
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Constant(I,0)#71
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#ConditionalBranch(I,ne,56)#72
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#56
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#57
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#CheckCast(Ljava/lang/Class;)#58
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalStore(Ljava/lang/Object;,2)#59
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#60
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#61
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Get(Lrandoop/SequenceCollection;,NONSTATIC,Lrandoop/ComponentManager;,gralComponents)#62
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#63
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Constant(I,1)#64
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Invoke(VIRTUAL,Lrandoop/SequenceCollection;,getSequencesForType,(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;)#65
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,1)#0
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Constant(L;,null)#1
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#8
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Constant(I,0)#9
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#ConditionalBranch(I,eq,20)#10
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#New(Ljava/util/ArrayList;,0)#20
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Dup(1,0)#21
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#22
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,3)#23
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(I,2)#24
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Constant(I,0)#25
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#ConditionalBranch(I,eq,41)#26
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,0)#27
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Get(Ljava/util/Map;,NONSTATIC,Lrandoop/SequenceCollection;,activeSequences)#28
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,1)#29
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#30
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#CheckCast(Lrandoop/util/SimpleList;)#31
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,4)#32
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,4)#33
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Constant(L;,null)#34
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#ConditionalBranch(Ljava/lang/Object;,eq,64)#35
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,3)#36
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,4)#37
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#38
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Pop(1)#39
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Goto(64)#40
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,3)#64
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/List;,isEmpty,()Z)#65
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Constant(I,0)#66
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#ConditionalBranch(I,eq,79)#67
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#New(Lrandoop/util/ListOfLists;,0)#79
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Dup(1,0)#80
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,3)#81
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(SPECIAL,Lrandoop/util/ListOfLists;,<init>,(Ljava/util/List;)V)#82
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Invoke(SPECIAL,Lrandoop/util/SimpleList;,<init>,()V)#1
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Constant(L;,null)#3
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#10
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/util/ListOfLists;,lists)#12
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#14
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#15
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#New([I,1)#16
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Put([I,NONSTATIC,Lrandoop/util/ListOfLists;,accumulatedSize)#17
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#18
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Constant(I,0)#19
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#20
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Constant(I,0)#21
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalStore(I,2)#22
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Goto(54)#23
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(I,2)#54
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#55
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#56
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#ConditionalBranch(I,lt,24)#57
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#24
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(I,2)#25
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#26
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#CheckCast(Lrandoop/util/SimpleList;)#27
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,3)#28
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,3)#29
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Constant(L;,null)#30
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,ne,37)#31
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#37
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Dup(1,0)#38
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Get(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#39
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,3)#40
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#41
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#BinaryOp(I,add)#42
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#43
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#44
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Get([I,NONSTATIC,Lrandoop/util/ListOfLists;,accumulatedSize)#45
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(I,2)#46
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#47
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Get(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#48
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#ArrayStore(I)#49
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalLoad(I,2)#50
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Constant(I,1)#51
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#BinaryOp(I,add)#52
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#LocalStore(I,2)#53
randoop.util.ListOfLists.<init>(Ljava/util/List;)V#Return(V)#58
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,4)#83
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#84
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Constant(I,0)#85
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#ConditionalBranch(I,eq,98)#86
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,4)#98
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Return(Ljava/lang/Object;)#99
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,toJDKList,()Ljava/util/List;)#66
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#New(Ljava/util/ArrayList;,0)#0
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Dup(1,0)#1
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalStore(Ljava/lang/Object;,1)#3
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/util/ListOfLists;,lists)#5
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#6
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalStore(Ljava/lang/Object;,3)#7
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Goto(18)#8
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#18
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#19
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Constant(I,0)#20
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#ConditionalBranch(I,ne,9)#21
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#9
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#10
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#CheckCast(Lrandoop/util/SimpleList;)#11
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalStore(Ljava/lang/Object;,2)#12
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#13
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#14
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,toJDKList,()Ljava/util/List;)#15
randoop.util.ArrayListSimpleList.toJDKList()Ljava/util/List;#New(Ljava/util/ArrayList;,0)#0
randoop.util.ArrayListSimpleList.toJDKList()Ljava/util/List;#Dup(1,0)#1
randoop.util.ArrayListSimpleList.toJDKList()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.ArrayListSimpleList.toJDKList()Ljava/util/List;#Get(Ljava/util/ArrayList;,NONSTATIC,Lrandoop/util/ArrayListSimpleList;,theList)#3
randoop.util.ArrayListSimpleList.toJDKList()Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(Ljava/util/Collection;)V)#4
randoop.util.ArrayListSimpleList.toJDKList()Ljava/util/List;#Return(Ljava/lang/Object;)#5
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#16
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Pop(1)#17
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#22
randoop.util.ListOfLists.toJDKList()Ljava/util/List;#Return(Ljava/lang/Object;)#23
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Set;,addAll,(Ljava/util/Collection;)Z)#67
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Pop(1)#68
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#73
randoop.ComponentManager.getAllPrimitiveSequences()Ljava/util/Set;#Return(Ljava/lang/Object;)#74
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#5
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalStore(Ljava/lang/Object;,2)#6
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Goto(33)#7
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,2)#33
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#34
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Constant(I,0)#35
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#ConditionalBranch(I,ne,8)#36
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,2)#8
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#9
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#CheckCast(Lrandoop/Sequence;)#10
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalStore(Ljava/lang/Object;,1)#11
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#New(Lrandoop/ExecutableSequence;,0)#12
randoop.ExecutableSequence.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@41ab43df)#0
randoop.ExecutableSequence.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.ExecutableSequence.<clinit>()V#Constant(I,0)#2
randoop.ExecutableSequence.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.ExecutableSequence.<clinit>()V#Constant(I,1)#4
randoop.ExecutableSequence.<clinit>()V#Goto(7)#5
randoop.ExecutableSequence.<clinit>()V#Put(Z,STATIC,Lrandoop/ExecutableSequence;,$assertionsDisabled)#7
randoop.ExecutableSequence.<clinit>()V#New(Ljava/io/ByteArrayOutputStream;,0)#8
randoop.ExecutableSequence.<clinit>()V#Dup(1,0)#9
randoop.ExecutableSequence.<clinit>()V#Invoke(SPECIAL,Ljava/io/ByteArrayOutputStream;,<init>,()V)#10
randoop.ExecutableSequence.<clinit>()V#Put(Ljava/io/ByteArrayOutputStream;,STATIC,Lrandoop/ExecutableSequence;,output_buffer)#11
randoop.ExecutableSequence.<clinit>()V#New(Ljava/io/PrintStream;,0)#12
randoop.ExecutableSequence.<clinit>()V#Dup(1,0)#13
randoop.ExecutableSequence.<clinit>()V#Get(Ljava/io/ByteArrayOutputStream;,STATIC,Lrandoop/ExecutableSequence;,output_buffer)#14
randoop.ExecutableSequence.<clinit>()V#Invoke(SPECIAL,Ljava/io/PrintStream;,<init>,(Ljava/io/OutputStream;)V)#15
randoop.ExecutableSequence.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/ExecutableSequence;,ps_output_buffer)#16
randoop.ExecutableSequence.<clinit>()V#Return(V)#17
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Dup(1,0)#13
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,1)#14
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(SPECIAL,Lrandoop/ExecutableSequence;,<init>,(Lrandoop/Sequence;)V)#15
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Constant(J,-1)#3
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Put(J,NONSTATIC,Lrandoop/ExecutableSequence;,gentime)#4
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Constant(J,-1)#6
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Put(J,NONSTATIC,Lrandoop/ExecutableSequence;,exectime)#7
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Put(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#10
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#11
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#New(Ljava/util/ArrayList;,0)#12
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Dup(1,0)#13
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#14
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#15
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#16
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checks)#17
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#18
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#New(Ljava/util/ArrayList;,0)#19
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Dup(1,0)#20
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#21
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#22
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#23
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checksResults)#24
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Constant(I,0)#25
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalStore(I,2)#26
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Goto(48)#27
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(I,2)#48
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#49
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#50
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#51
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#ConditionalBranch(I,lt,28)#52
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#28
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checks)#29
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#New(Ljava/util/ArrayList;,0)#30
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Dup(1,0)#31
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Constant(I,1)#32
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#33
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#34
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Pop(1)#35
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#36
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checksResults)#37
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#New(Ljava/util/ArrayList;,0)#38
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Dup(1,0)#39
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Constant(I,1)#40
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#41
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#42
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Pop(1)#43
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(I,2)#44
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Constant(I,1)#45
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#BinaryOp(I,add)#46
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalStore(I,2)#47
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#53
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#New(Lrandoop/Execution;,0)#54
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Dup(1,0)#55
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#56
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Invoke(SPECIAL,Lrandoop/Execution;,<init>,(Lrandoop/Sequence;)V)#57
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Execution.<init>(Lrandoop/Sequence;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.Execution.<init>(Lrandoop/Sequence;)V#Put(Lrandoop/Sequence;,NONSTATIC,Lrandoop/Execution;,owner)#4
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.Execution.<init>(Lrandoop/Sequence;)V#New(Ljava/util/ArrayList;,0)#6
randoop.Execution.<init>(Lrandoop/Sequence;)V#Dup(1,0)#7
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#8
randoop.Execution.<init>(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#9
randoop.Execution.<init>(Lrandoop/Sequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#10
randoop.Execution.<init>(Lrandoop/Sequence;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/Execution;,theList)#11
randoop.Execution.<init>(Lrandoop/Sequence;)V#Constant(I,0)#12
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalStore(I,2)#13
randoop.Execution.<init>(Lrandoop/Sequence;)V#Goto(24)#14
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(I,2)#24
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#25
randoop.Execution.<init>(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#26
randoop.Execution.<init>(Lrandoop/Sequence;)V#ConditionalBranch(I,lt,15)#27
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#15
randoop.Execution.<init>(Lrandoop/Sequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Execution;,theList)#16
randoop.Execution.<init>(Lrandoop/Sequence;)V#Invoke(STATIC,Lrandoop/NotExecuted;,create,()Lrandoop/NotExecuted;)#17
randoop.NotExecuted.<clinit>()V#New(Lrandoop/NotExecuted;,0)#0
randoop.NotExecuted.<clinit>()V#Dup(1,0)#1
randoop.NotExecuted.<clinit>()V#Invoke(SPECIAL,Lrandoop/NotExecuted;,<init>,()V)#2
randoop.NotExecuted.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.NotExecuted.<init>()V#Invoke(SPECIAL,Lrandoop/ExecutionOutcome;,<init>,()V)#1
randoop.ExecutionOutcome.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutionOutcome.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.ExecutionOutcome.<init>()V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ExecutionOutcome.<init>()V#Constant(L;,null)#3
randoop.ExecutionOutcome.<init>()V#Put(Ljava/lang/String;,NONSTATIC,Lrandoop/ExecutionOutcome;,output)#4
randoop.ExecutionOutcome.<init>()V#Return(V)#5
randoop.NotExecuted.<init>()V#Return(V)#2
randoop.NotExecuted.<clinit>()V#Put(Lrandoop/NotExecuted;,STATIC,Lrandoop/NotExecuted;,notExecutedSingleton)#3
randoop.NotExecuted.<clinit>()V#Return(V)#4
randoop.NotExecuted.create()Lrandoop/NotExecuted;#Get(Lrandoop/NotExecuted;,STATIC,Lrandoop/NotExecuted;,notExecutedSingleton)#0
randoop.NotExecuted.create()Lrandoop/NotExecuted;#Return(Ljava/lang/Object;)#1
randoop.Execution.<init>(Lrandoop/Sequence;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#18
randoop.Execution.<init>(Lrandoop/Sequence;)V#Pop(1)#19
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalLoad(I,2)#20
randoop.Execution.<init>(Lrandoop/Sequence;)V#Constant(I,1)#21
randoop.Execution.<init>(Lrandoop/Sequence;)V#BinaryOp(I,add)#22
randoop.Execution.<init>(Lrandoop/Sequence;)V#LocalStore(I,2)#23
randoop.Execution.<init>(Lrandoop/Sequence;)V#Return(V)#28
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Put(Lrandoop/Execution;,NONSTATIC,Lrandoop/ExecutableSequence;,executionResults)#58
randoop.ExecutableSequence.<init>(Lrandoop/Sequence;)V#Return(V)#59
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalStore(Ljava/lang/Object;,3)#16
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,3)#17
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Constant(L;,null)#18
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,execute,(Lrandoop/ExecutionVisitor;)V)#19
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;)V#Constant(I,1)#2
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,execute,(Lrandoop/ExecutionVisitor;Z)V)#3
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(L;,null)#1
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(Ljava/lang/Object;,eq,6)#2
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#6
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Execution;,NONSTATIC,Lrandoop/ExecutableSequence;,executionResults)#7
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Execution;,theList)#8
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(INTERFACE,Ljava/util/List;,clear,()V)#9
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(I,0)#10
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalStore(I,3)#11
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Goto(23)#12
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#23
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#24
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#25
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#26
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(I,lt,13)#27
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Execution;,NONSTATIC,Lrandoop/ExecutableSequence;,executionResults)#14
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Execution;,theList)#15
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(STATIC,Lrandoop/NotExecuted;,create,()Lrandoop/NotExecuted;)#16
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#17
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Pop(1)#18
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#19
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(I,1)#20
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#BinaryOp(I,add)#21
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalStore(I,3)#22
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(I,0)#28
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalStore(I,3)#29
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Goto(95)#30
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#95
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#96
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#97
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#98
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(I,lt,31)#99
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,1)#31
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(L;,null)#32
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(Ljava/lang/Object;,eq,38)#33
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#38
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#39
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#40
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getInputs,(I)Ljava/util/List;)#41
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalStore(Ljava/lang/Object;,4)#42
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,4)#43
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#44
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#New([Ljava/lang/Object;,1)#45
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalStore(Ljava/lang/Object;,5)#46
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#47
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#48
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#49
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Execution;,NONSTATIC,Lrandoop/ExecutableSequence;,executionResults)#50
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Execution;,theList)#51
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#52
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,4)#53
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,5)#54
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(STATIC,Lrandoop/ExecutableSequence;,getRuntimeInputs,(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z)#55
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,3)#0
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#1
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Invoke(STATIC,Lrandoop/ExecutableSequence;,getRuntimeValuesForVars,(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;)#2
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#1
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#New([Ljava/lang/Object;,1)#2
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalStore(Ljava/lang/Object;,2)#3
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Constant(I,0)#4
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalStore(I,3)#5
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Goto(45)#6
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(I,3)#45
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,2)#46
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#ArrayLength()#47
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#ConditionalBranch(I,lt,7)#48
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,2)#49
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Return(Ljava/lang/Object;)#50
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,5)#3
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Constant(I,0)#4
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalStore(I,6)#5
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Goto(17)#6
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(I,6)#17
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,5)#18
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#ArrayLength()#19
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#ConditionalBranch(I,lt,7)#20
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Constant(I,0)#21
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalStore(I,6)#22
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Goto(67)#23
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(I,6)#67
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,4)#68
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#ArrayLength()#69
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#ConditionalBranch(I,lt,24)#70
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Constant(I,1)#71
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Return(I)#72
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(I,0)#56
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(I,ne,59)#57
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#59
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#60
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#61
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Execution;,NONSTATIC,Lrandoop/ExecutableSequence;,executionResults)#62
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Execution;,theList)#63
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#64
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,5)#65
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(STATIC,Lrandoop/ExecutableSequence;,executeStatement,(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V)#66
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Constant(Ljava/lang/String;,"executeStatement")#0
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalLoad(I,2)#3
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getStatementKind,(I)Lrandoop/StatementKind;)#4
randoop.Sequence.getStatementKind(I)Lrandoop/StatementKind;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.getStatementKind(I)Lrandoop/StatementKind;#LocalLoad(I,1)#1
randoop.Sequence.getStatementKind(I)Lrandoop/StatementKind;#Invoke(VIRTUAL,Lrandoop/Sequence;,getStatementWithInputs,(I)Lrandoop/Statement;)#2
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#LocalLoad(I,1)#1
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#Invoke(SPECIAL,Lrandoop/Sequence;,isValidIndex,(I)Z)#2
randoop.Sequence.isValidIndex(I)Z#LocalLoad(I,1)#0
randoop.Sequence.isValidIndex(I)Z#Constant(I,0)#1
randoop.Sequence.isValidIndex(I)Z#ConditionalBranch(I,ge,5)#2
randoop.Sequence.isValidIndex(I)Z#LocalLoad(I,1)#5
randoop.Sequence.isValidIndex(I)Z#LocalLoad(Ljava/lang/Object;,0)#6
randoop.Sequence.isValidIndex(I)Z#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#7
randoop.Sequence.isValidIndex(I)Z#Constant(I,1)#8
randoop.Sequence.isValidIndex(I)Z#BinaryOp(I,sub)#9
randoop.Sequence.isValidIndex(I)Z#ConditionalBranch(I,le,13)#10
randoop.Sequence.isValidIndex(I)Z#Constant(I,1)#13
randoop.Sequence.isValidIndex(I)Z#Return(I)#14
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#Constant(I,0)#3
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#ConditionalBranch(I,ne,20)#4
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#LocalLoad(Ljava/lang/Object;,0)#20
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#Invoke(VIRTUAL,Lrandoop/Sequence;,getStatementsWithInputs,()Lrandoop/util/SimpleList;)#21
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#LocalLoad(I,1)#22
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#23
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#CheckCast(Lrandoop/Statement;)#24
randoop.Sequence.getStatementWithInputs(I)Lrandoop/Statement;#Return(Ljava/lang/Object;)#25
randoop.Sequence.getStatementKind(I)Lrandoop/StatementKind;#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#3
randoop.Sequence.getStatementKind(I)Lrandoop/StatementKind;#Return(Ljava/lang/Object;)#4
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalStore(Ljava/lang/Object;,4)#5
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Get(Ljava/lang/Object;,STATIC,Lrandoop/util/ProgressDisplay;,print_synchro)#6
randoop.util.ProgressDisplay.<clinit>()V#New(Ljava/lang/Object;,0)#0
randoop.util.ProgressDisplay.<clinit>()V#Dup(1,0)#1
randoop.util.ProgressDisplay.<clinit>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#2
randoop.util.ProgressDisplay.<clinit>()V#Put(Ljava/lang/Object;,STATIC,Lrandoop/util/ProgressDisplay;,print_synchro)#3
randoop.util.ProgressDisplay.<clinit>()V#Constant(I,170)#4
randoop.util.ProgressDisplay.<clinit>()V#Put(I,STATIC,Lrandoop/util/ProgressDisplay;,progresswidth)#5
randoop.util.ProgressDisplay.<clinit>()V#Constant(I,10000)#6
randoop.util.ProgressDisplay.<clinit>()V#Put(I,STATIC,Lrandoop/util/ProgressDisplay;,exit_if_no_new_sequences_after_mseconds)#7
randoop.util.ProgressDisplay.<clinit>()V#Return(V)#8
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Dup(1,0)#7
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalStore(Ljava/lang/Object;,5)#8
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Monitor(ENTER)#9
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#10
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalStore(Ljava/lang/Object;,6)#11
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,err)#12
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalStore(Ljava/lang/Object;,7)#13
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,capture_output)#14
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Constant(I,0)#15
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#ConditionalBranch(I,eq,28)#16
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Constant(Ljava/lang/String;,"NOT true capture_output@executeStatement")#28
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#29
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Get(Z,STATIC,Lrandoop/ExecutableSequence;,$assertionsDisabled)#30
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Constant(I,0)#31
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#ConditionalBranch(I,ne,51)#32
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,4)#51
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,3)#52
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Get(Ljava/io/PrintStream;,STATIC,Lrandoop/Globals;,blackHole)#53
randoop.Globals.<clinit>()V#Constant(Ljava/lang/String;,"line.separator")#0
randoop.Globals.<clinit>()V#Invoke(STATIC,Ljava/lang/System;,getProperty,(Ljava/lang/String;)Ljava/lang/String;)#1
randoop.Globals.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lrandoop/Globals;,lineSep)#2
randoop.Globals.<clinit>()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,err)#3
randoop.Globals.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/Globals;,oldStdErr)#4
randoop.Globals.<clinit>()V#New(Ljava/io/ByteArrayOutputStream;,0)#5
randoop.Globals.<clinit>()V#Dup(1,0)#6
randoop.Globals.<clinit>()V#Invoke(SPECIAL,Ljava/io/ByteArrayOutputStream;,<init>,()V)#7
randoop.Globals.<clinit>()V#Put(Ljava/io/ByteArrayOutputStream;,STATIC,Lrandoop/Globals;,bos)#8
randoop.Globals.<clinit>()V#New(Ljava/io/PrintStream;,0)#9
randoop.Globals.<clinit>()V#Dup(1,0)#10
randoop.Globals.<clinit>()V#Get(Ljava/io/ByteArrayOutputStream;,STATIC,Lrandoop/Globals;,bos)#11
randoop.Globals.<clinit>()V#Invoke(SPECIAL,Ljava/io/PrintStream;,<init>,(Ljava/io/OutputStream;)V)#12
randoop.Globals.<clinit>()V#Put(Ljava/io/PrintStream;,STATIC,Lrandoop/Globals;,blackHole)#13
randoop.Globals.<clinit>()V#Return(V)#14
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Invoke(INTERFACE,Lrandoop/StatementKind;,execute,([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;)#54
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(Z,STATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,$assertionsDisabled)#0
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#1
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,ne,11)#2
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New(Lrandoop/NormalExecution;,0)#11
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#12
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,value)#14
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(J,0)#15
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/NormalExecution;,<init>,(Ljava/lang/Object;J)V)#16
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#Invoke(SPECIAL,Lrandoop/ExecutionOutcome;,<init>,()V)#1
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#Put(Ljava/lang/Object;,NONSTATIC,Lrandoop/NormalExecution;,result)#4
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#LocalLoad(J,2)#6
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#Put(J,NONSTATIC,Lrandoop/NormalExecution;,executionTime)#7
randoop.NormalExecution.<init>(Ljava/lang/Object;J)V#Return(V)#8
randoop.PrimitiveOrStringOrNullDecl.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#17
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalStore(Ljava/lang/Object;,8)#55
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Get(Z,STATIC,Lrandoop/ExecutableSequence;,$assertionsDisabled)#56
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Constant(I,0)#57
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#ConditionalBranch(I,ne,66)#58
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,capture_output)#66
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Constant(I,0)#67
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#ConditionalBranch(I,eq,82)#68
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Constant(Ljava/lang/String;,"NOT true capture_output@executeStatement")#82
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#83
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#84
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalLoad(I,2)#85
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,8)#86
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Invoke(INTERFACE,Ljava/util/List;,set,(ILjava/lang/Object;)Ljava/lang/Object;)#87
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Pop(1)#88
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,5)#89
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Monitor(EXIT)#90
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Goto(95)#91
randoop.ExecutableSequence.executeStatement(Lrandoop/Sequence;Ljava/util/List;I[Ljava/lang/Object;)V#Return(V)#95
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,1)#67
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(L;,null)#68
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(Ljava/lang/Object;,eq,74)#69
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#74
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Get(Lrandoop/Execution;,NONSTATIC,Lrandoop/ExecutableSequence;,executionResults)#75
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#76
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(VIRTUAL,Lrandoop/Execution;,get,(I)Lrandoop/ExecutionOutcome;)#77
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#LocalLoad(I,1)#0
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#Constant(I,0)#1
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,lt,8)#2
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#LocalLoad(I,1)#3
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Execution;,theList)#5
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#6
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,lt,13)#7
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Execution;,theList)#14
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#LocalLoad(I,1)#15
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#16
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#CheckCast(Lrandoop/ExecutionOutcome;)#17
randoop.Execution.get(I)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#18
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Instanceof(Lrandoop/ExceptionalExecution;)#78
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(I,0)#79
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(I,eq,85)#80
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#85
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#86
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasFailure,(I)Z)#87
randoop.ExecutableSequence.hasFailure(I)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.hasFailure(I)Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checksResults)#1
randoop.ExecutableSequence.hasFailure(I)Z#LocalLoad(I,1)#2
randoop.ExecutableSequence.hasFailure(I)Z#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#3
randoop.ExecutableSequence.hasFailure(I)Z#CheckCast(Ljava/util/List;)#4
randoop.ExecutableSequence.hasFailure(I)Z#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#5
randoop.ExecutableSequence.hasFailure(I)Z#LocalStore(Ljava/lang/Object;,3)#6
randoop.ExecutableSequence.hasFailure(I)Z#Goto(18)#7
randoop.ExecutableSequence.hasFailure(I)Z#LocalLoad(Ljava/lang/Object;,3)#18
randoop.ExecutableSequence.hasFailure(I)Z#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#19
randoop.ExecutableSequence.hasFailure(I)Z#Constant(I,0)#20
randoop.ExecutableSequence.hasFailure(I)Z#ConditionalBranch(I,ne,8)#21
randoop.ExecutableSequence.hasFailure(I)Z#Constant(I,0)#22
randoop.ExecutableSequence.hasFailure(I)Z#Return(I)#23
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(I,0)#88
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(I,eq,91)#89
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#91
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(I,1)#92
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#BinaryOp(I,add)#93
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalStore(I,3)#94
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Return(V)#100
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;)V#Return(V)#4
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,3)#20
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Constant(I,0)#21
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#22
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#1
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#LocalLoad(I,1)#2
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/Sequence;,checkIndex,(I)V)#3
randoop.Sequence.checkIndex(I)V#LocalLoad(I,1)#0
randoop.Sequence.checkIndex(I)V#Constant(I,0)#1
randoop.Sequence.checkIndex(I)V#ConditionalBranch(I,lt,9)#2
randoop.Sequence.checkIndex(I)V#LocalLoad(I,1)#3
randoop.Sequence.checkIndex(I)V#LocalLoad(Ljava/lang/Object;,0)#4
randoop.Sequence.checkIndex(I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#5
randoop.Sequence.checkIndex(I)V#Constant(I,1)#6
randoop.Sequence.checkIndex(I)V#BinaryOp(I,sub)#7
randoop.Sequence.checkIndex(I)V#ConditionalBranch(I,le,13)#8
randoop.Sequence.checkIndex(I)V#Return(V)#13
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#Get(Lrandoop/Execution;,NONSTATIC,Lrandoop/ExecutableSequence;,executionResults)#5
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#LocalLoad(I,1)#6
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/Execution;,get,(I)Lrandoop/ExecutionOutcome;)#7
randoop.ExecutableSequence.getResult(I)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#8
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#CheckCast(Lrandoop/NormalExecution;)#23
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalStore(Ljava/lang/Object;,4)#24
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,4)#25
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#26
randoop.NormalExecution.getRuntimeValue()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.NormalExecution.getRuntimeValue()Ljava/lang/Object;#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/NormalExecution;,result)#1
randoop.NormalExecution.getRuntimeValue()Ljava/lang/Object;#Return(Ljava/lang/Object;)#2
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalStore(Ljava/lang/Object;,5)#27
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,0)#28
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Get(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,runtimePrimitivesSeen)#29
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#LocalLoad(Ljava/lang/Object;,5)#30
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#31
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Pop(1)#32
randoop.ForwardGenerator.initializeRuntimePrimitivesSeen()V#Return(V)#37
randoop.ForwardGenerator.<init>(Ljava/util/List;JILrandoop/ComponentManager;Lrandoop/IStopper;Lrandoop/RandoopListenerManager;Ljava/util/List;)V#Return(V)#46
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,12)#626
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,noprogressdisplay)#627
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#628
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,640)#629
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#630
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"Explorer = %s\
")#631
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,1)#632
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New([Ljava/lang/Object;,1)#633
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#634
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#635
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,12)#636
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ArrayStore(Ljava/lang/Object;)#637
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/io/PrintStream;,printf,(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/PrintStream;)#638
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#639
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#640
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,14)#641
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(I,STATIC,Lrandoop/main/GenTests;,comm_port)#642
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#643
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,le,682)#644
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/experiments/CodeCoverageTracker;,0)#682
randoop.experiments.CodeCoverageTracker.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e00b040)#0
randoop.experiments.CodeCoverageTracker.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.experiments.CodeCoverageTracker.<clinit>()V#Constant(I,0)#2
randoop.experiments.CodeCoverageTracker.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.experiments.CodeCoverageTracker.<clinit>()V#Constant(I,1)#4
randoop.experiments.CodeCoverageTracker.<clinit>()V#Goto(7)#5
randoop.experiments.CodeCoverageTracker.<clinit>()V#Put(Z,STATIC,Lrandoop/experiments/CodeCoverageTracker;,$assertionsDisabled)#7
randoop.experiments.CodeCoverageTracker.<clinit>()V#Constant(I,-1)#8
randoop.experiments.CodeCoverageTracker.<clinit>()V#Put(I,STATIC,Lrandoop/experiments/CodeCoverageTracker;,stop_when_plateau)#9
randoop.experiments.CodeCoverageTracker.<clinit>()V#Constant(I,0)#10
randoop.experiments.CodeCoverageTracker.<clinit>()V#Put(Z,STATIC,Lrandoop/experiments/CodeCoverageTracker;,stats_coverage)#11
randoop.experiments.CodeCoverageTracker.<clinit>()V#Return(V)#12
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#683
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,8)#684
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/experiments/CodeCoverageTracker;,<init>,(Ljava/util/List;)V)#685
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#3
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Put(J,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,lastCovIncrease)#4
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Constant(I,0)#6
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,lastNumBranches)#7
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#8
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Constant(L;,null)#9
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,ne,17)#10
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#17
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#New(Ljava/util/LinkedList;,0)#18
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Dup(1,0)#19
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#20
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/LinkedList;,<init>,(Ljava/util/Collection;)V)#21
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Put(Ljava/util/LinkedList;,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,covClasses)#22
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#23
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#New(Ljava/util/LinkedHashMap;,0)#24
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Dup(1,0)#25
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#26
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Put(Ljava/util/Map;,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,branchesToCoveringSeqs)#27
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#28
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#New(Ljava/util/LinkedHashSet;,0)#29
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Dup(1,0)#30
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#31
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Put(Ljava/util/Set;,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,branchesCovered)#32
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#33
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Constant(I,0)#34
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,branchtot)#35
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#36
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Constant(I,0)#37
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Put(I,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,branchcov)#38
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#39
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#New(Ljava/util/LinkedHashMap;,0)#40
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Dup(1,0)#41
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#42
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Put(Ljava/util/Map;,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,membersToBranchTot)#43
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#44
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#45
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,3)#46
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Goto(126)#47
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,3)#126
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#127
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Constant(I,0)#128
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#ConditionalBranch(I,ne,48)#129
randoop.experiments.CodeCoverageTracker.<init>(Ljava/util/List;)V#Return(V)#130
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,15)#686
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,11)#687
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,15)#688
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Lrandoop/RandoopListenerManager;,addListener,(Lrandoop/IEventListener;)V)#689
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#Constant(L;,null)#1
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RandoopListenerManager;,listeners)#9
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#11
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#Pop(1)#12
randoop.RandoopListenerManager.addListener(Lrandoop/IEventListener;)V#Return(V)#13
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,output_cov_witnesses)#690
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#691
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,eq,704)#692
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/util/ArrayList;,0)#704
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#705
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#706
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,16)#707
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Z,STATIC,Lrandoop/main/GenTests;,check_object_contracts)#708
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#709
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,eq,765)#710
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Ljava/util/ArrayList;,0)#711
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#712
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#713
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,17)#714
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,4)#715
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#716
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New([Ljava/lang/Class;,1)#717
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,toArray,([Ljava/lang/Object;)[Ljava/lang/Object;)#718
randoop.main.GenTests.handle([Ljava/lang/String;)Z#CheckCast([Ljava/lang/Class;)#719
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Lrandoop/main/GenTests;,getContractsFromAnnotations,([Ljava/lang/Class;)Ljava/util/List;)#720
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#New(Ljava/util/ArrayList;,0)#0
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Dup(1,0)#1
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,1)#3
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Dup(1,0)#5
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,5)#6
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#ArrayLength()#7
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(I,4)#8
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Constant(I,0)#9
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(I,3)#10
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Goto(175)#11
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(I,3)#175
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(I,4)#176
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#ConditionalBranch(I,lt,12)#177
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#12
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(I,3)#13
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#ArrayLoad(Ljava/lang/Object;)#14
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,2)#15
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#16
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Invoke(VIRTUAL,Ljava/lang/Class;,getDeclaredMethods,()[Ljava/lang/reflect/Method;)#17
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Dup(1,0)#18
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,9)#19
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#ArrayLength()#20
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(I,8)#21
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Constant(I,0)#22
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(I,7)#23
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Goto(168)#24
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(I,7)#168
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(I,8)#169
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#ConditionalBranch(I,lt,25)#170
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,9)#25
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(I,7)#26
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#ArrayLoad(Ljava/lang/Object;)#27
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,6)#28
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,6)#29
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e3b708d5)#30
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getAnnotation,(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;)#31
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Constant(L;,null)#32
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,eq,164)#33
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(I,7)#164
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Constant(I,1)#165
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#BinaryOp(I,add)#166
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(I,7)#167
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(I,3)#171
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Constant(I,1)#172
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#BinaryOp(I,add)#173
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalStore(I,3)#174
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#178
randoop.main.GenTests.getContractsFromAnnotations([Ljava/lang/Class;)Ljava/util/List;#Return(Ljava/lang/Object;)#179
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,18)#721
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,17)#722
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,18)#723
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#724
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#725
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,17)#726
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/EqualsReflexive;,0)#727
randoop.EqualsReflexive.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@1078effd)#0
randoop.EqualsReflexive.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.EqualsReflexive.<clinit>()V#Constant(I,0)#2
randoop.EqualsReflexive.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.EqualsReflexive.<clinit>()V#Constant(I,1)#4
randoop.EqualsReflexive.<clinit>()V#Goto(7)#5
randoop.EqualsReflexive.<clinit>()V#Put(Z,STATIC,Lrandoop/EqualsReflexive;,$assertionsDisabled)#7
randoop.EqualsReflexive.<clinit>()V#Return(V)#8
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#728
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/EqualsReflexive;,<init>,()V)#729
randoop.EqualsReflexive.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.EqualsReflexive.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.EqualsReflexive.<init>()V#Return(V)#2
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#730
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#731
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,17)#732
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/EqualsToNullRetFalse;,0)#733
randoop.EqualsToNullRetFalse.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@d37159a7)#0
randoop.EqualsToNullRetFalse.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.EqualsToNullRetFalse.<clinit>()V#Constant(I,0)#2
randoop.EqualsToNullRetFalse.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.EqualsToNullRetFalse.<clinit>()V#Constant(I,1)#4
randoop.EqualsToNullRetFalse.<clinit>()V#Goto(7)#5
randoop.EqualsToNullRetFalse.<clinit>()V#Put(Z,STATIC,Lrandoop/EqualsToNullRetFalse;,$assertionsDisabled)#7
randoop.EqualsToNullRetFalse.<clinit>()V#Return(V)#8
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#734
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/EqualsToNullRetFalse;,<init>,()V)#735
randoop.EqualsToNullRetFalse.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.EqualsToNullRetFalse.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.EqualsToNullRetFalse.<init>()V#Return(V)#2
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#736
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#737
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,17)#738
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/EqualsHashcode;,0)#739
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#740
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/EqualsHashcode;,<init>,()V)#741
randoop.EqualsHashcode.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.EqualsHashcode.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.EqualsHashcode.<init>()V#Return(V)#2
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#742
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#743
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,17)#744
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/EqualsSymmetric;,0)#745
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#746
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/EqualsSymmetric;,<init>,()V)#747
randoop.EqualsSymmetric.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.EqualsSymmetric.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.EqualsSymmetric.<init>()V#Return(V)#2
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#748
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#749
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/ContractCheckingVisitor;,0)#750
randoop.ContractCheckingVisitor.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@2980a888)#0
randoop.ContractCheckingVisitor.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.ContractCheckingVisitor.<clinit>()V#Constant(I,0)#2
randoop.ContractCheckingVisitor.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.ContractCheckingVisitor.<clinit>()V#Constant(I,1)#4
randoop.ContractCheckingVisitor.<clinit>()V#Goto(7)#5
randoop.ContractCheckingVisitor.<clinit>()V#Put(Z,STATIC,Lrandoop/ContractCheckingVisitor;,$assertionsDisabled)#7
randoop.ContractCheckingVisitor.<clinit>()V#Return(V)#8
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#751
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,17)#752
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,offline)#753
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#754
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,eq,758)#755
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,1)#758
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/ContractCheckingVisitor;,<init>,(Ljava/util/List;Z)V)#759
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#New(Ljava/util/ArrayList;,0)#3
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Dup(1,0)#4
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#5
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/ContractCheckingVisitor;,contracts)#6
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,0)#7
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(I,2)#8
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Put(Z,NONSTATIC,Lrandoop/ContractCheckingVisitor;,checkAtEndOfExec)#9
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#11
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalStore(Ljava/lang/Object;,4)#12
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Goto(32)#13
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,4)#32
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#33
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Constant(I,0)#34
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#ConditionalBranch(I,ne,14)#35
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,4)#14
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#15
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#CheckCast(Lrandoop/ObjectContract;)#16
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalStore(Ljava/lang/Object;,3)#17
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,3)#18
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Invoke(INTERFACE,Lrandoop/ObjectContract;,getArity,()I)#19
randoop.EqualsReflexive.getArity()I#Constant(I,1)#0
randoop.EqualsReflexive.getArity()I#Return(I)#1
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Constant(I,2)#20
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#ConditionalBranch(I,le,27)#21
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,0)#27
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ContractCheckingVisitor;,contracts)#28
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#LocalLoad(Ljava/lang/Object;,3)#29
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#30
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Pop(1)#31
randoop.EqualsToNullRetFalse.getArity()I#Constant(I,1)#0
randoop.EqualsToNullRetFalse.getArity()I#Return(I)#1
randoop.EqualsHashcode.getArity()I#Constant(I,2)#0
randoop.EqualsHashcode.getArity()I#Return(I)#1
randoop.EqualsSymmetric.getArity()I#Constant(I,2)#0
randoop.EqualsSymmetric.getArity()I#Return(I)#1
randoop.ContractCheckingVisitor.<init>(Ljava/util/List;Z)V#Return(V)#36
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalStore(Ljava/lang/Object;,19)#760
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,16)#761
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,19)#762
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#763
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#764
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,16)#765
randoop.main.GenTests.handle([Ljava/lang/String;)Z#New(Lrandoop/RegressionCaptureVisitor;,0)#766
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e30de4e1)#0
randoop.RegressionCaptureVisitor.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(I,0)#2
randoop.RegressionCaptureVisitor.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(I,1)#4
randoop.RegressionCaptureVisitor.<clinit>()V#Goto(7)#5
randoop.RegressionCaptureVisitor.<clinit>()V#Put(Z,STATIC,Lrandoop/RegressionCaptureVisitor;,$assertionsDisabled)#7
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5f790dbb)#8
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(Ljava/lang/String;,"toString")#9
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(I,0)#10
randoop.RegressionCaptureVisitor.<clinit>()V#New([Ljava/lang/Class;,1)#11
randoop.RegressionCaptureVisitor.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,getDeclaredMethod,(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;)#12
randoop.RegressionCaptureVisitor.<clinit>()V#Put(Ljava/lang/reflect/Method;,STATIC,Lrandoop/RegressionCaptureVisitor;,objectToString)#13
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5f790dbb)#14
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(Ljava/lang/String;,"hashCode")#15
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(I,0)#16
randoop.RegressionCaptureVisitor.<clinit>()V#New([Ljava/lang/Class;,1)#17
randoop.RegressionCaptureVisitor.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,getDeclaredMethod,(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;)#18
randoop.RegressionCaptureVisitor.<clinit>()V#Put(Ljava/lang/reflect/Method;,STATIC,Lrandoop/RegressionCaptureVisitor;,objectHashCode)#19
randoop.RegressionCaptureVisitor.<clinit>()V#Goto(27)#20
randoop.RegressionCaptureVisitor.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#27
randoop.RegressionCaptureVisitor.<clinit>()V#Dup(1,0)#28
randoop.RegressionCaptureVisitor.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#29
randoop.RegressionCaptureVisitor.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lrandoop/RegressionCaptureVisitor;,observer_map)#30
randoop.RegressionCaptureVisitor.<clinit>()V#Get(Ljava/io/File;,STATIC,Lrandoop/main/GenInputsAbstract;,observers)#31
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(L;,null)#32
randoop.RegressionCaptureVisitor.<clinit>()V#ConditionalBranch(Ljava/lang/Object;,eq,194)#33
randoop.RegressionCaptureVisitor.<clinit>()V#Constant(Ljava/lang/String;,"null observers@static-init")#194
randoop.RegressionCaptureVisitor.<clinit>()V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#195
randoop.RegressionCaptureVisitor.<clinit>()V#Return(V)#196
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Dup(1,0)#767
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(SPECIAL,Lrandoop/RegressionCaptureVisitor;,<init>,()V)#768
randoop.RegressionCaptureVisitor.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RegressionCaptureVisitor.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.RegressionCaptureVisitor.<init>()V#Return(V)#2
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#769
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#770
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/util/List;,STATIC,Lrandoop/main/GenInputsAbstract;,visitor)#771
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,isEmpty,()Z)#772
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#773
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,ne,830)#774
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,12)#830
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Lrandoop/MultiVisitor;,NONSTATIC,Lrandoop/AbstractGenerator;,executionVisitor)#831
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/MultiVisitor;,visitors)#832
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,16)#833
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(INTERFACE,Ljava/util/List;,addAll,(Ljava/util/Collection;)Z)#834
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Pop(1)#835
randoop.main.GenTests.handle([Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,12)#836
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(VIRTUAL,Lrandoop/AbstractGenerator;,explore,()V)#837
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.AbstractGenerator.explore()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/AbstractGenerator;,statements)#1
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Lrandoop/util/Log;,log,(Ljava/util/List;)V)#2
randoop.util.Log.log(Ljava/util/List;)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#0
randoop.util.Log.log(Ljava/util/List;)V#Constant(I,0)#1
randoop.util.Log.log(Ljava/util/List;)V#ConditionalBranch(I,ne,4)#2
randoop.util.Log.log(Ljava/util/List;)V#Return(V)#3
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#3
randoop.AbstractGenerator.explore()V#Get(Lrandoop/util/Timer;,NONSTATIC,Lrandoop/AbstractGenerator;,timer)#4
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/util/Timer;,startTiming,()V)#5
randoop.util.Timer.startTiming()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Timer.startTiming()V#Get(Z,NONSTATIC,Lrandoop/util/Timer;,running)#1
randoop.util.Timer.startTiming()V#Constant(I,0)#2
randoop.util.Timer.startTiming()V#ConditionalBranch(I,eq,9)#3
randoop.util.Timer.startTiming()V#LocalLoad(Ljava/lang/Object;,0)#9
randoop.util.Timer.startTiming()V#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#10
randoop.util.Timer.startTiming()V#Put(J,NONSTATIC,Lrandoop/util/Timer;,startTime)#11
randoop.util.Timer.startTiming()V#LocalLoad(Ljava/lang/Object;,0)#12
randoop.util.Timer.startTiming()V#Constant(I,1)#13
randoop.util.Timer.startTiming()V#Put(Z,NONSTATIC,Lrandoop/util/Timer;,running)#14
randoop.util.Timer.startTiming()V#Return(V)#15
randoop.AbstractGenerator.explore()V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,noprogressdisplay)#6
randoop.AbstractGenerator.explore()V#Constant(I,0)#7
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,ne,22)#8
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#9
randoop.AbstractGenerator.explore()V#New(Lrandoop/util/ProgressDisplay;,0)#10
randoop.AbstractGenerator.explore()V#Dup(1,0)#11
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#12
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#14
randoop.AbstractGenerator.explore()V#Get(Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,MULTILINE)#15
randoop.util.ProgressDisplay$Mode.<clinit>()V#New(Lrandoop/util/ProgressDisplay$Mode;,0)#0
randoop.util.ProgressDisplay$Mode.<clinit>()V#Dup(1,0)#1
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(Ljava/lang/String;,"SINGLE_LINE_OVERWRITE")#2
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(I,0)#3
randoop.util.ProgressDisplay$Mode.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/ProgressDisplay$Mode;,<init>,(Ljava/lang/String;I)V)#4
randoop.util.ProgressDisplay$Mode.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ProgressDisplay$Mode.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.util.ProgressDisplay$Mode.<init>(Ljava/lang/String;I)V#LocalLoad(I,2)#2
randoop.util.ProgressDisplay$Mode.<init>(Ljava/lang/String;I)V#Invoke(SPECIAL,Ljava/lang/Enum;,<init>,(Ljava/lang/String;I)V)#3
randoop.util.ProgressDisplay$Mode.<init>(Ljava/lang/String;I)V#Return(V)#4
randoop.util.ProgressDisplay$Mode.<clinit>()V#Put(Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,SINGLE_LINE_OVERWRITE)#5
randoop.util.ProgressDisplay$Mode.<clinit>()V#New(Lrandoop/util/ProgressDisplay$Mode;,0)#6
randoop.util.ProgressDisplay$Mode.<clinit>()V#Dup(1,0)#7
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(Ljava/lang/String;,"MULTILINE")#8
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(I,1)#9
randoop.util.ProgressDisplay$Mode.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/ProgressDisplay$Mode;,<init>,(Ljava/lang/String;I)V)#10
randoop.util.ProgressDisplay$Mode.<clinit>()V#Put(Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,MULTILINE)#11
randoop.util.ProgressDisplay$Mode.<clinit>()V#New(Lrandoop/util/ProgressDisplay$Mode;,0)#12
randoop.util.ProgressDisplay$Mode.<clinit>()V#Dup(1,0)#13
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(Ljava/lang/String;,"NO_DISPLAY")#14
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(I,2)#15
randoop.util.ProgressDisplay$Mode.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/ProgressDisplay$Mode;,<init>,(Ljava/lang/String;I)V)#16
randoop.util.ProgressDisplay$Mode.<clinit>()V#Put(Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,NO_DISPLAY)#17
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(I,3)#18
randoop.util.ProgressDisplay$Mode.<clinit>()V#New([Lrandoop/util/ProgressDisplay$Mode;,1)#19
randoop.util.ProgressDisplay$Mode.<clinit>()V#Dup(1,0)#20
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(I,0)#21
randoop.util.ProgressDisplay$Mode.<clinit>()V#Get(Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,SINGLE_LINE_OVERWRITE)#22
randoop.util.ProgressDisplay$Mode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#23
randoop.util.ProgressDisplay$Mode.<clinit>()V#Dup(1,0)#24
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(I,1)#25
randoop.util.ProgressDisplay$Mode.<clinit>()V#Get(Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,MULTILINE)#26
randoop.util.ProgressDisplay$Mode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#27
randoop.util.ProgressDisplay$Mode.<clinit>()V#Dup(1,0)#28
randoop.util.ProgressDisplay$Mode.<clinit>()V#Constant(I,2)#29
randoop.util.ProgressDisplay$Mode.<clinit>()V#Get(Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,NO_DISPLAY)#30
randoop.util.ProgressDisplay$Mode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#31
randoop.util.ProgressDisplay$Mode.<clinit>()V#Put([Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,ENUM$VALUES)#32
randoop.util.ProgressDisplay$Mode.<clinit>()V#Return(V)#33
randoop.AbstractGenerator.explore()V#Constant(I,200)#16
randoop.AbstractGenerator.explore()V#Invoke(SPECIAL,Lrandoop/util/ProgressDisplay;,<init>,(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V)#17
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Invoke(SPECIAL,Ljava/lang/Thread;,<init>,()V)#1
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Constant(I,0)#3
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(Z,NONSTATIC,Lrandoop/util/ProgressDisplay;,shouldStop)#4
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#6
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(J,NONSTATIC,Lrandoop/util/ProgressDisplay;,lastNumSeqsIncrease)#7
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Constant(J,0)#9
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(J,NONSTATIC,Lrandoop/util/ProgressDisplay;,lastNumSeqs)#10
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#11
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#12
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(J,NONSTATIC,Lrandoop/util/ProgressDisplay;,lastCovIncrease)#13
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#14
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Constant(I,0)#15
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(I,NONSTATIC,Lrandoop/util/ProgressDisplay;,lastNumBranches)#16
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,1)#17
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Constant(L;,null)#18
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#ConditionalBranch(Ljava/lang/Object;,ne,25)#19
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#25
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,1)#26
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(Lrandoop/AbstractGenerator;,NONSTATIC,Lrandoop/util/ProgressDisplay;,generator)#27
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#28
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,3)#29
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(Lrandoop/util/ProgressDisplay$Mode;,NONSTATIC,Lrandoop/util/ProgressDisplay;,outputMode)#30
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#31
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,2)#32
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/util/ProgressDisplay;,listenerMgr)#33
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(I,4)#34
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Put(I,STATIC,Lrandoop/util/ProgressDisplay;,progresswidth)#35
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#LocalLoad(Ljava/lang/Object;,0)#36
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Constant(I,1)#37
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Invoke(VIRTUAL,Lrandoop/util/ProgressDisplay;,setDaemon,(Z)V)#38
randoop.util.ProgressDisplay.<init>(Lrandoop/AbstractGenerator;Lrandoop/RandoopListenerManager;Lrandoop/util/ProgressDisplay$Mode;I)V#Return(V)#39
randoop.AbstractGenerator.explore()V#Put(Lrandoop/util/ProgressDisplay;,NONSTATIC,Lrandoop/AbstractGenerator;,progressDisplay)#18
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#19
randoop.AbstractGenerator.explore()V#Get(Lrandoop/util/ProgressDisplay;,NONSTATIC,Lrandoop/AbstractGenerator;,progressDisplay)#20
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/util/ProgressDisplay;,start,()V)#21
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#22
randoop.AbstractGenerator.explore()V#Constant(I,0)#23
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,eq,44)#24
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#44
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#45
randoop.AbstractGenerator.explore()V#Constant(L;,null)#46
randoop.AbstractGenerator.explore()V#ConditionalBranch(Ljava/lang/Object;,eq,210)#47
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#48
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#49
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/RandoopListenerManager;,explorationStart,()V)#50
randoop.RandoopListenerManager.explorationStart()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RandoopListenerManager.explorationStart()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RandoopListenerManager;,listeners)#1
randoop.RandoopListenerManager.explorationStart()V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.util.ProgressDisplay.run()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ProgressDisplay.run()V#Get(Z,NONSTATIC,Lrandoop/util/ProgressDisplay;,shouldStop)#1
randoop.util.ProgressDisplay.run()V#Constant(I,0)#2
randoop.util.ProgressDisplay.run()V#ConditionalBranch(I,eq,7)#3
randoop.util.ProgressDisplay.run()V#LocalLoad(Ljava/lang/Object;,0)#7
randoop.util.ProgressDisplay.run()V#Invoke(VIRTUAL,Lrandoop/util/ProgressDisplay;,display,()V)#8
randoop.util.ProgressDisplay.display()V#Get(J,STATIC,Lrandoop/main/GenInputsAbstract;,progressinterval)#0
randoop.util.ProgressDisplay.display()V#Constant(J,-1)#1
randoop.util.ProgressDisplay.display()V#Comparison(J,cmp)#2
randoop.util.ProgressDisplay.display()V#Constant(I,0)#3
randoop.util.ProgressDisplay.display()V#ConditionalBranch(I,ne,6)#4
randoop.util.ProgressDisplay.display()V#LocalLoad(Ljava/lang/Object;,0)#6
randoop.util.ProgressDisplay.display()V#LocalLoad(Ljava/lang/Object;,0)#7
randoop.util.ProgressDisplay.display()V#Invoke(VIRTUAL,Lrandoop/util/ProgressDisplay;,message,()Ljava/lang/String;)#8
randoop.util.ProgressDisplay.message()Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#0
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Dup(1,0)#1
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,()V)#2
randoop.util.ProgressDisplay.message()Ljava/lang/String;#LocalStore(Ljava/lang/Object;,1)#3
randoop.util.ProgressDisplay.message()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#4
randoop.util.ProgressDisplay.message()Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#5
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Dup(1,0)#6
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Constant(Ljava/lang/String;,"Progress update: test inputs generated=")#7
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#8
randoop.util.ProgressDisplay.message()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#9
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Get(Lrandoop/AbstractGenerator;,NONSTATIC,Lrandoop/util/ProgressDisplay;,generator)#10
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Get(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_sequences_generated)#11
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(I)Ljava/lang/StringBuilder;)#12
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#13
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#14
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Pop(1)#15
randoop.util.ProgressDisplay.message()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#16
randoop.util.ProgressDisplay.message()Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#17
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Dup(1,0)#18
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Constant(Ljava/lang/String;,", failing inputs=")#19
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#20
randoop.util.ProgressDisplay.message()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,0)#21
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Get(Lrandoop/AbstractGenerator;,NONSTATIC,Lrandoop/util/ProgressDisplay;,generator)#22
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Get(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_failing_sequences)#23
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(I)Ljava/lang/StringBuilder;)#24
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#25
randoop.RandoopListenerManager.explorationStart()V#LocalStore(Ljava/lang/Object;,2)#3
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#26
randoop.RandoopListenerManager.explorationStart()V#Goto(11)#4
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Pop(1)#27
randoop.RandoopListenerManager.explorationStart()V#LocalLoad(Ljava/lang/Object;,2)#11
randoop.util.ProgressDisplay.message()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#28
randoop.RandoopListenerManager.explorationStart()V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#12
randoop.util.ProgressDisplay.message()Ljava/lang/String;#New(Ljava/lang/StringBuilder;,0)#29
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Dup(1,0)#30
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Constant(Ljava/lang/String;,"      (")#31
randoop.RandoopListenerManager.explorationStart()V#Constant(I,0)#13
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#32
randoop.RandoopListenerManager.explorationStart()V#ConditionalBranch(I,ne,5)#14
randoop.util.ProgressDisplay.message()Ljava/lang/String;#New(Ljava/util/Date;,0)#33
randoop.RandoopListenerManager.explorationStart()V#LocalLoad(Ljava/lang/Object;,2)#5
randoop.RandoopListenerManager.explorationStart()V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.RandoopListenerManager.explorationStart()V#CheckCast(Lrandoop/IEventListener;)#7
randoop.RandoopListenerManager.explorationStart()V#LocalStore(Ljava/lang/Object;,1)#8
randoop.RandoopListenerManager.explorationStart()V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.RandoopListenerManager.explorationStart()V#Invoke(INTERFACE,Lrandoop/IEventListener;,explorationStart,()V)#10
randoop.experiments.CodeCoverageTracker.explorationStart()V#Return(V)#0
randoop.RandoopListenerManager.explorationStart()V#Return(V)#15
randoop.AbstractGenerator.explore()V#Goto(210)#51
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#210
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/AbstractGenerator;,stop,()Z)#211
randoop.AbstractGenerator.stop()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.AbstractGenerator.stop()Z#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#1
randoop.AbstractGenerator.stop()Z#Constant(L;,null)#2
randoop.AbstractGenerator.stop()Z#ConditionalBranch(Ljava/lang/Object;,eq,9)#3
randoop.AbstractGenerator.stop()Z#LocalLoad(Ljava/lang/Object;,0)#4
randoop.AbstractGenerator.stop()Z#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#5
randoop.AbstractGenerator.stop()Z#Invoke(VIRTUAL,Lrandoop/RandoopListenerManager;,stopGeneration,()Z)#6
randoop.RandoopListenerManager.stopGeneration()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RandoopListenerManager.stopGeneration()Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RandoopListenerManager;,listeners)#1
randoop.RandoopListenerManager.stopGeneration()Z#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.RandoopListenerManager.stopGeneration()Z#LocalStore(Ljava/lang/Object;,2)#3
randoop.RandoopListenerManager.stopGeneration()Z#Goto(15)#4
randoop.RandoopListenerManager.stopGeneration()Z#LocalLoad(Ljava/lang/Object;,2)#15
randoop.RandoopListenerManager.stopGeneration()Z#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#16
randoop.RandoopListenerManager.stopGeneration()Z#Constant(I,0)#17
randoop.RandoopListenerManager.stopGeneration()Z#ConditionalBranch(I,ne,5)#18
randoop.RandoopListenerManager.stopGeneration()Z#LocalLoad(Ljava/lang/Object;,2)#5
randoop.RandoopListenerManager.stopGeneration()Z#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.RandoopListenerManager.stopGeneration()Z#CheckCast(Lrandoop/IEventListener;)#7
randoop.RandoopListenerManager.stopGeneration()Z#LocalStore(Ljava/lang/Object;,1)#8
randoop.RandoopListenerManager.stopGeneration()Z#LocalLoad(Ljava/lang/Object;,1)#9
randoop.RandoopListenerManager.stopGeneration()Z#Invoke(INTERFACE,Lrandoop/IEventListener;,stopGeneration,()Z)#10
randoop.experiments.CodeCoverageTracker.stopGeneration()Z#Get(I,STATIC,Lrandoop/experiments/CodeCoverageTracker;,stop_when_plateau)#0
randoop.experiments.CodeCoverageTracker.stopGeneration()Z#Constant(I,-1)#1
randoop.experiments.CodeCoverageTracker.stopGeneration()Z#ConditionalBranch(I,ne,5)#2
randoop.experiments.CodeCoverageTracker.stopGeneration()Z#Constant(I,0)#3
randoop.experiments.CodeCoverageTracker.stopGeneration()Z#Return(I)#4
randoop.RandoopListenerManager.stopGeneration()Z#Constant(I,0)#11
randoop.RandoopListenerManager.stopGeneration()Z#ConditionalBranch(I,eq,15)#12
randoop.RandoopListenerManager.stopGeneration()Z#Constant(I,0)#19
randoop.RandoopListenerManager.stopGeneration()Z#Return(I)#20
randoop.AbstractGenerator.stop()Z#Constant(I,0)#7
randoop.AbstractGenerator.stop()Z#ConditionalBranch(I,ne,33)#8
randoop.AbstractGenerator.stop()Z#LocalLoad(Ljava/lang/Object;,0)#9
randoop.AbstractGenerator.stop()Z#Get(Lrandoop/util/Timer;,NONSTATIC,Lrandoop/AbstractGenerator;,timer)#10
randoop.AbstractGenerator.stop()Z#Invoke(VIRTUAL,Lrandoop/util/Timer;,getTimeElapsedMillis,()J)#11
randoop.util.Timer.getTimeElapsedMillis()J#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Timer.getTimeElapsedMillis()J#Get(Z,NONSTATIC,Lrandoop/util/Timer;,running)#1
randoop.util.Timer.getTimeElapsedMillis()J#Constant(I,0)#2
randoop.util.Timer.getTimeElapsedMillis()J#ConditionalBranch(I,eq,12)#3
randoop.util.Timer.getTimeElapsedMillis()J#LocalLoad(Ljava/lang/Object;,0)#4
randoop.util.Timer.getTimeElapsedMillis()J#Get(J,NONSTATIC,Lrandoop/util/Timer;,timeElapsed)#5
randoop.util.Timer.getTimeElapsedMillis()J#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#6
randoop.util.Timer.getTimeElapsedMillis()J#BinaryOp(J,add)#7
randoop.util.Timer.getTimeElapsedMillis()J#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.Timer.getTimeElapsedMillis()J#Get(J,NONSTATIC,Lrandoop/util/Timer;,startTime)#9
randoop.util.Timer.getTimeElapsedMillis()J#BinaryOp(J,sub)#10
randoop.util.Timer.getTimeElapsedMillis()J#Return(J)#11
randoop.AbstractGenerator.stop()Z#LocalLoad(Ljava/lang/Object;,0)#12
randoop.AbstractGenerator.stop()Z#Get(J,NONSTATIC,Lrandoop/AbstractGenerator;,maxTimeMillis)#13
randoop.AbstractGenerator.stop()Z#Comparison(J,cmp)#14
randoop.AbstractGenerator.stop()Z#Constant(I,0)#15
randoop.AbstractGenerator.stop()Z#ConditionalBranch(I,ge,33)#16
randoop.AbstractGenerator.stop()Z#LocalLoad(Ljava/lang/Object;,0)#17
randoop.AbstractGenerator.stop()Z#Invoke(VIRTUAL,Lrandoop/AbstractGenerator;,numSequences,()I)#18
randoop.ForwardGenerator.numSequences()I#Constant(Ljava/lang/String;,"numSequences")#0
randoop.ForwardGenerator.numSequences()I#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ForwardGenerator.numSequences()I#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ForwardGenerator.numSequences()I#Get(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,allSequences)#3
randoop.ForwardGenerator.numSequences()I#Invoke(INTERFACE,Ljava/util/Set;,size,()I)#4
randoop.ForwardGenerator.numSequences()I#Return(I)#5
randoop.AbstractGenerator.stop()Z#LocalLoad(Ljava/lang/Object;,0)#19
randoop.AbstractGenerator.stop()Z#Get(I,NONSTATIC,Lrandoop/AbstractGenerator;,maxSequences)#20
randoop.AbstractGenerator.stop()Z#ConditionalBranch(I,ge,33)#21
randoop.AbstractGenerator.stop()Z#LocalLoad(Ljava/lang/Object;,0)#22
randoop.AbstractGenerator.stop()Z#Get(Lrandoop/IStopper;,NONSTATIC,Lrandoop/AbstractGenerator;,stopper)#23
randoop.AbstractGenerator.stop()Z#Constant(L;,null)#24
randoop.AbstractGenerator.stop()Z#ConditionalBranch(Ljava/lang/Object;,eq,31)#25
randoop.AbstractGenerator.stop()Z#Constant(I,0)#31
randoop.AbstractGenerator.stop()Z#Return(I)#32
randoop.AbstractGenerator.explore()V#Constant(I,0)#212
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,eq,52)#213
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#52
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#53
randoop.AbstractGenerator.explore()V#Constant(L;,null)#54
randoop.AbstractGenerator.explore()V#ConditionalBranch(Ljava/lang/Object;,eq,59)#55
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#56
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#57
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/RandoopListenerManager;,generationStepPre,()V)#58
randoop.RandoopListenerManager.generationStepPre()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RandoopListenerManager.generationStepPre()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RandoopListenerManager;,listeners)#1
randoop.RandoopListenerManager.generationStepPre()V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.RandoopListenerManager.generationStepPre()V#LocalStore(Ljava/lang/Object;,2)#3
randoop.RandoopListenerManager.generationStepPre()V#Goto(11)#4
randoop.RandoopListenerManager.generationStepPre()V#LocalLoad(Ljava/lang/Object;,2)#11
randoop.RandoopListenerManager.generationStepPre()V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#12
randoop.RandoopListenerManager.generationStepPre()V#Constant(I,0)#13
randoop.RandoopListenerManager.generationStepPre()V#ConditionalBranch(I,ne,5)#14
randoop.RandoopListenerManager.generationStepPre()V#LocalLoad(Ljava/lang/Object;,2)#5
randoop.RandoopListenerManager.generationStepPre()V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.RandoopListenerManager.generationStepPre()V#CheckCast(Lrandoop/IEventListener;)#7
randoop.RandoopListenerManager.generationStepPre()V#LocalStore(Ljava/lang/Object;,1)#8
randoop.RandoopListenerManager.generationStepPre()V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.RandoopListenerManager.generationStepPre()V#Invoke(INTERFACE,Lrandoop/IEventListener;,generationStepPre,()V)#10
randoop.experiments.CodeCoverageTracker.generationStepPre()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.experiments.CodeCoverageTracker.generationStepPre()V#Get(Ljava/util/LinkedList;,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,covClasses)#1
randoop.experiments.CodeCoverageTracker.generationStepPre()V#Invoke(STATIC,Lcov/Coverage;,clearCoverage,(Ljava/util/Collection;)V)#2
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Dup(1,0)#34
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(SPECIAL,Ljava/util/Date;,<init>,()V)#35
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/Object;)Ljava/lang/StringBuilder;)#36
cov.Coverage.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@8e8a441)#0
cov.Coverage.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
cov.Coverage.<clinit>()V#Constant(I,0)#2
cov.Coverage.<clinit>()V#ConditionalBranch(I,ne,6)#3
cov.Coverage.<clinit>()V#Constant(I,1)#4
cov.Coverage.<clinit>()V#Goto(7)#5
cov.Coverage.<clinit>()V#Put(Z,STATIC,Lcov/Coverage;,$assertionsDisabled)#7
cov.Coverage.<clinit>()V#Constant(Ljava/lang/String;,"line.separator")#8
cov.Coverage.<clinit>()V#Invoke(STATIC,Ljava/lang/System;,getProperty,(Ljava/lang/String;)Ljava/lang/String;)#9
cov.Coverage.<clinit>()V#Put(Ljava/lang/String;,STATIC,Lcov/Coverage;,lineSep)#10
cov.Coverage.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#11
cov.Coverage.<clinit>()V#Dup(1,0)#12
cov.Coverage.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#13
cov.Coverage.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lcov/Coverage;,isInstrumentedCached)#14
cov.Coverage.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#15
cov.Coverage.<clinit>()V#Dup(1,0)#16
cov.Coverage.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#17
cov.Coverage.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lcov/Coverage;,atomsToMembers)#18
cov.Coverage.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#19
cov.Coverage.<clinit>()V#Dup(1,0)#20
cov.Coverage.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#21
cov.Coverage.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lcov/Coverage;,membersToAtoms)#22
cov.Coverage.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#23
cov.Coverage.<clinit>()V#Dup(1,0)#24
cov.Coverage.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#25
cov.Coverage.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lcov/Coverage;,classesToAtoms)#26
cov.Coverage.<clinit>()V#New(Ljava/util/LinkedHashMap;,0)#27
cov.Coverage.<clinit>()V#Dup(1,0)#28
cov.Coverage.<clinit>()V#Invoke(SPECIAL,Ljava/util/LinkedHashMap;,<init>,()V)#29
cov.Coverage.<clinit>()V#Put(Ljava/util/Map;,STATIC,Lcov/Coverage;,atomInfoToAtoms)#30
cov.Coverage.<clinit>()V#Return(V)#31
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,0)#0
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#Invoke(INTERFACE,Ljava/util/Collection;,iterator,()Ljava/util/Iterator;)#1
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#LocalStore(Ljava/lang/Object;,2)#2
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#Goto(16)#3
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#LocalLoad(Ljava/lang/Object;,2)#16
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#17
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#Constant(I,0)#18
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#ConditionalBranch(I,ne,4)#19
cov.Coverage.clearCoverage(Ljava/util/Collection;)V#Return(V)#20
randoop.experiments.CodeCoverageTracker.generationStepPre()V#Return(V)#3
randoop.RandoopListenerManager.generationStepPre()V#Return(V)#15
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#59
randoop.AbstractGenerator.explore()V#Dup(1,0)#60
randoop.AbstractGenerator.explore()V#Get(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_steps)#61
randoop.AbstractGenerator.explore()V#Constant(I,1)#62
randoop.AbstractGenerator.explore()V#BinaryOp(I,add)#63
randoop.AbstractGenerator.explore()V#Put(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_steps)#64
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#65
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/AbstractGenerator;,step,()Lrandoop/ExecutableSequence;)#66
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"step")#0
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(STATIC,Ljava/lang/System;,nanoTime,()J)#2
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(J,1)#3
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(Lrandoop/ComponentManager;,NONSTATIC,Lrandoop/ForwardGenerator;,componentManager)#5
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/ComponentManager;,numGeneratedSequences,()I)#6
randoop.ComponentManager.numGeneratedSequences()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ComponentManager.numGeneratedSequences()I#Get(Lrandoop/SequenceCollection;,NONSTATIC,Lrandoop/ComponentManager;,gralComponents)#1
randoop.ComponentManager.numGeneratedSequences()I#Invoke(VIRTUAL,Lrandoop/SequenceCollection;,size,()I)#2
randoop.SequenceCollection.size()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.SequenceCollection.size()I#Get(I,NONSTATIC,Lrandoop/SequenceCollection;,numActivesequences)#1
randoop.SequenceCollection.size()I#Return(I)#2
randoop.ComponentManager.numGeneratedSequences()I#Return(I)#3
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(I,STATIC,Lrandoop/main/GenInputsAbstract;,clear)#7
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#BinaryOp(I,rem)#8
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(I,0)#9
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#ConditionalBranch(I,ne,16)#10
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"Not clear@step")#16
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#17
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(L;,null)#18
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,3)#19
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#20
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(SPECIAL,Lrandoop/ForwardGenerator;,createNewUniqueSequence,()Lrandoop/ExecutableSequence;)#21
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"createNewUniqueSequence")#0
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#2
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#3
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,7)#4
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(L;,null)#7
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,1)#8
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#9
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ForwardGenerator;,statements)#10
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/List;,isEmpty,()Z)#11
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#12
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,16)#13
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#16
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ForwardGenerator;,statements)#17
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Lrandoop/util/Randomness;,randomMember,(Ljava/util/List;)Ljava/lang/Object;)#18
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#Constant(L;,null)#1
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#ConditionalBranch(Ljava/lang/Object;,eq,7)#2
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#3
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/List;,isEmpty,()Z)#4
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#Constant(I,0)#5
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#ConditionalBranch(I,eq,12)#6
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#12
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#14
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#Invoke(STATIC,Lrandoop/util/Randomness;,nextRandomInt,(I)I)#15
randoop.util.Randomness.nextRandomInt(I)I#Get(I,STATIC,Lrandoop/util/Randomness;,totalCallsToRandom)#0
randoop.util.Randomness.nextRandomInt(I)I#Constant(I,1)#1
randoop.util.Randomness.nextRandomInt(I)I#BinaryOp(I,add)#2
randoop.util.Randomness.nextRandomInt(I)I#Put(I,STATIC,Lrandoop/util/Randomness;,totalCallsToRandom)#3
randoop.util.Randomness.nextRandomInt(I)I#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#4
randoop.util.Randomness.nextRandomInt(I)I#Constant(I,0)#5
randoop.util.Randomness.nextRandomInt(I)I#ConditionalBranch(I,eq,15)#6
randoop.util.Randomness.nextRandomInt(I)I#Get(Ljava/util/Random;,STATIC,Lrandoop/util/Randomness;,random)#15
randoop.util.Randomness.nextRandomInt(I)I#LocalLoad(I,0)#16
randoop.util.Randomness.nextRandomInt(I)I#Invoke(VIRTUAL,Ljava/util/Random;,nextInt,(I)I)#17
randoop.util.Randomness.nextRandomInt(I)I#Return(I)#18
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#16
randoop.util.Randomness.randomMember(Ljava/util/List;)Ljava/lang/Object;#Return(Ljava/lang/Object;)#17
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#CheckCast(Lrandoop/StatementKind;)#19
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,1)#20
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#21
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#22
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,33)#23
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#33
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,1)#34
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(SPECIAL,Lrandoop/ForwardGenerator;,selectInputs,(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;)#35
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"selectInputs")#0
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,1)#2
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(INTERFACE,Lrandoop/StatementKind;,getInputTypes,()Ljava/util/List;)#3
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RMethod.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RMethod;,inputTypesCached)#1
randoop.RMethod.getInputTypes()Ljava/util/List;#Constant(L;,null)#2
randoop.RMethod.getInputTypes()Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,ne,52)#3
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.RMethod.getInputTypes()Ljava/util/List;#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#5
randoop.RMethod.getInputTypes()Ljava/util/List;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getParameterTypes,()[Ljava/lang/Class;)#6
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalStore(Ljava/lang/Object;,1)#7
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#8
randoop.RMethod.getInputTypes()Ljava/util/List;#New(Ljava/util/ArrayList;,0)#9
randoop.RMethod.getInputTypes()Ljava/util/List;#Dup(1,0)#10
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#11
randoop.RMethod.getInputTypes()Ljava/util/List;#ArrayLength()#12
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.RMethod.getInputTypes()Ljava/util/List;#Invoke(VIRTUAL,Lrandoop/RMethod;,isStatic,()Z)#14
randoop.RMethod.isStatic()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RMethod.isStatic()Z#Get(Z,NONSTATIC,Lrandoop/RMethod;,isStaticComputed)#1
randoop.RMethod.isStatic()Z#Constant(I,0)#2
randoop.RMethod.isStatic()Z#ConditionalBranch(I,ne,13)#3
randoop.RMethod.isStatic()Z#LocalLoad(Ljava/lang/Object;,0)#4
randoop.RMethod.isStatic()Z#Constant(I,1)#5
randoop.RMethod.isStatic()Z#Put(Z,NONSTATIC,Lrandoop/RMethod;,isStaticComputed)#6
randoop.RMethod.isStatic()Z#LocalLoad(Ljava/lang/Object;,0)#7
randoop.RMethod.isStatic()Z#LocalLoad(Ljava/lang/Object;,0)#8
randoop.RMethod.isStatic()Z#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#9
randoop.RMethod.isStatic()Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getModifiers,()I)#10
randoop.RMethod.isStatic()Z#Invoke(STATIC,Ljava/lang/reflect/Modifier;,isStatic,(I)Z)#11
randoop.RMethod.isStatic()Z#Put(Z,NONSTATIC,Lrandoop/RMethod;,isStaticCached)#12
randoop.RMethod.isStatic()Z#LocalLoad(Ljava/lang/Object;,0)#13
randoop.RMethod.isStatic()Z#Get(Z,NONSTATIC,Lrandoop/RMethod;,isStaticCached)#14
randoop.RMethod.isStatic()Z#Return(I)#15
randoop.RMethod.getInputTypes()Ljava/util/List;#Constant(I,0)#15
randoop.RMethod.getInputTypes()Ljava/util/List;#ConditionalBranch(I,eq,19)#16
randoop.RMethod.getInputTypes()Ljava/util/List;#Constant(I,1)#19
randoop.RMethod.getInputTypes()Ljava/util/List;#BinaryOp(I,add)#20
randoop.RMethod.getInputTypes()Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#21
randoop.RMethod.getInputTypes()Ljava/util/List;#Put(Ljava/util/List;,NONSTATIC,Lrandoop/RMethod;,inputTypesCached)#22
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#23
randoop.RMethod.getInputTypes()Ljava/util/List;#Invoke(VIRTUAL,Lrandoop/RMethod;,isStatic,()Z)#24
randoop.RMethod.getInputTypes()Ljava/util/List;#Constant(I,0)#25
randoop.RMethod.getInputTypes()Ljava/util/List;#ConditionalBranch(I,ne,34)#26
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#27
randoop.RMethod.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RMethod;,inputTypesCached)#28
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#29
randoop.RMethod.getInputTypes()Ljava/util/List;#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#30
randoop.RMethod.getInputTypes()Ljava/util/List;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getDeclaringClass,()Ljava/lang/Class;)#31
randoop.RMethod.getInputTypes()Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#32
randoop.RMethod.getInputTypes()Ljava/util/List;#Pop(1)#33
randoop.RMethod.getInputTypes()Ljava/util/List;#Constant(I,0)#34
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalStore(I,2)#35
randoop.RMethod.getInputTypes()Ljava/util/List;#Goto(48)#36
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(I,2)#48
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#49
randoop.RMethod.getInputTypes()Ljava/util/List;#ArrayLength()#50
randoop.RMethod.getInputTypes()Ljava/util/List;#ConditionalBranch(I,lt,37)#51
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#52
randoop.RMethod.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RMethod;,inputTypesCached)#53
randoop.RMethod.getInputTypes()Ljava/util/List;#Return(Ljava/lang/Object;)#54
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,2)#4
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New(Ljava/util/ArrayList;,0)#5
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#6
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#7
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,3)#8
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#9
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(I,4)#10
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New(Ljava/util/ArrayList;,0)#11
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#12
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#13
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,5)#14
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New(Lrandoop/SubTypeSet;,0)#15
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#16
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#17
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(SPECIAL,Lrandoop/SubTypeSet;,<init>,(Z)V)#18
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,6)#19
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New(Lrandoop/util/MultiMap;,0)#20
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#21
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(SPECIAL,Lrandoop/util/MultiMap;,<init>,()V)#22
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,7)#23
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#24
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(I,8)#25
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Goto(524)#26
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,8)#524
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,2)#525
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#526
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,lt,27)#527
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,2)#27
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,8)#28
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#29
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#CheckCast(Ljava/lang/Class;)#30
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,9)#31
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,9)#32
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Lrandoop/util/Reflection;,isVisible,(Ljava/lang/Class;)Z)#33
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#34
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,43)#35
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,8)#43
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#44
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,57)#45
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,1)#46
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Instanceof(Lrandoop/RMethod;)#47
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#48
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,57)#49
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,1)#50
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#CheckCast(Lrandoop/RMethod;)#51
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Lrandoop/RMethod;,isStatic,()Z)#52
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#53
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,57)#54
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,1)#55
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Goto(58)#56
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(I,10)#58
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(D,STATIC,Lrandoop/main/GenInputsAbstract;,alias_ratio)#59
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(D,0.0)#60
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Comparison(D,cmpl)#61
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#62
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,136)#63
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"NO alias_ratio@selectInputs")#136
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#137
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(L;,null)#138
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,11)#139
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,always_use_ints_as_objects)#140
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#141
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,162)#142
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,9)#162
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Ljava/lang/Class;,isArray,()Z)#163
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#164
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,203)#165
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#203
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#204
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,214)#205
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,0)#214
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Lrandoop/ComponentManager;,NONSTATIC,Lrandoop/ForwardGenerator;,componentManager)#215
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,1)#216
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,8)#217
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Lrandoop/ComponentManager;,getSequencesForType,(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;)#218
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,1)#0
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Lrandoop/StatementKind;,getInputTypes,()Ljava/util/List;)#1
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalLoad(I,2)#2
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#3
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#CheckCast(Ljava/lang/Class;)#4
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,3)#5
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,0)#6
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Get(Lrandoop/SequenceCollection;,NONSTATIC,Lrandoop/ComponentManager;,gralComponents)#7
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,3)#8
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Constant(I,0)#9
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Invoke(VIRTUAL,Lrandoop/SequenceCollection;,getSequencesForType,(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;)#10
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,0)#41
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Get(Lrandoop/SubTypeSet;,NONSTATIC,Lrandoop/SequenceCollection;,typesWithSequencesMap)#42
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,1)#43
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(VIRTUAL,Lrandoop/SubTypeSet;,getMatches,(Ljava/lang/Class;)Ljava/util/Set;)#44
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Get(Lrandoop/util/IMultiMap;,NONSTATIC,Lrandoop/SubTypeSet;,subTypesWithsequences)#1
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Lrandoop/util/IMultiMap;,keySet,()Ljava/util/Set;)#2
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#3
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Set;,contains,(Ljava/lang/Object;)Z)#4
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Constant(I,0)#5
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(I,ne,10)#6
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#8
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Invoke(SPECIAL,Lrandoop/SubTypeSet;,addQueryType,(Ljava/lang/Class;)V)#9
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Constant(L;,null)#1
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Get(Lrandoop/util/IMultiMap;,NONSTATIC,Lrandoop/SubTypeSet;,subTypesWithsequences)#9
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Lrandoop/util/IMultiMap;,keySet,()Ljava/util/Set;)#10
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalStore(Ljava/lang/Object;,2)#11
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,2)#12
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#13
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Set;,contains,(Ljava/lang/Object;)Z)#14
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Constant(I,0)#15
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#ConditionalBranch(I,eq,18)#16
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#New(Ljava/util/LinkedHashSet;,0)#18
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Dup(1,0)#19
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#20
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalStore(Ljava/lang/Object;,3)#21
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,0)#22
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Get(Lrandoop/util/ISimpleSet;,NONSTATIC,Lrandoop/SubTypeSet;,typesWithsequences)#23
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Lrandoop/util/ISimpleSet;,getElements,()Ljava/util/Set;)#24
randoop.util.SimpleSet.getElements()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.SimpleSet.getElements()Ljava/util/Set;#Get(Ljava/util/LinkedHashSet;,NONSTATIC,Lrandoop/util/SimpleSet;,set)#1
randoop.util.SimpleSet.getElements()Ljava/util/Set;#Return(Ljava/lang/Object;)#2
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#25
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalStore(Ljava/lang/Object;,5)#26
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Goto(41)#27
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,5)#41
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#42
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Constant(I,0)#43
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#ConditionalBranch(I,ne,28)#44
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,5)#28
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#29
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#CheckCast(Ljava/lang/Class;)#30
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalStore(Ljava/lang/Object;,4)#31
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,4)#32
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#33
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(STATIC,Lrandoop/util/Reflection;,canBeUsedAs,(Ljava/lang/Class;Ljava/lang/Class;)Z)#34
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(L;,null)#1
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(Ljava/lang/Object;,eq,6)#2
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#3
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(L;,null)#4
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(Ljava/lang/Object;,ne,11)#5
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#11
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#12
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#13
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#14
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,18)#15
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#18
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#19
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#20
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#21
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,30)#22
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#30
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#31
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#32
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#33
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,40)#34
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#35
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#36
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#37
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#38
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,42)#39
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#New(Lplume/Pair;,0)#42
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Dup(1,0)#43
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#44
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#45
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(SPECIAL,Lplume/Pair;,<init>,(Ljava/lang/Object;Ljava/lang/Object;)V)#46
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,2)#47
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/Reflection;,canBeUsedCache)#48
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,2)#49
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#50
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#CheckCast(Ljava/lang/Boolean;)#51
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,3)#52
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,3)#53
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(L;,null)#54
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(Ljava/lang/Object;,ne,67)#55
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#56
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#57
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,canBeUsedAs0,(Ljava/lang/Class;Ljava/lang/Class;)Z)#58
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isArray,()Z)#1
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#2
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,47)#3
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#47
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#48
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#49
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,54)#50
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#51
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,boxedType,(Ljava/lang/Class;)Ljava/lang/Class;)#52
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,0)#53
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#54
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#55
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#56
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,61)#57
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#61
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,2)#62
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#63
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#64
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#65
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#66
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,71)#67
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#71
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isInterface,()Z)#72
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#73
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,89)#74
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#89
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isInterface,()Z)#90
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#91
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,104)#92
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#104
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#105
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,isSubclass,(Ljava/lang/Class;Ljava/lang/Class;)Z)#106
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#0
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#1
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,10)#2
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#10
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#11
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,20)#12
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#20
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#21
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,32)#22
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#32
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#33
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,44)#34
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#44
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#45
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,55)#46
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Z,STATIC,Lrandoop/util/Reflection;,$assertionsDisabled)#55
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#56
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,66)#57
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#66
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#67
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isAssignableFrom,(Ljava/lang/Class;)Z)#68
randoop.util.Reflection.isSubclass(Ljava/lang/Class;Ljava/lang/Class;)Z#Return(I)#69
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,2)#107
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(I,2)#108
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Return(I)#109
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,4)#59
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Get(Ljava/util/Map;,STATIC,Lrandoop/util/Reflection;,canBeUsedCache)#60
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,2)#61
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(I,4)#62
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#63
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#64
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Pop(1)#65
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Goto(70)#66
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(I,4)#70
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Return(I)#71
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Constant(I,0)#35
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#ConditionalBranch(I,eq,41)#36
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,3)#45
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#46
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalStore(Ljava/lang/Object;,5)#47
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Goto(58)#48
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,5)#58
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#59
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Constant(I,0)#60
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#ConditionalBranch(I,ne,49)#61
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Return(V)#62
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#10
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Get(Lrandoop/util/IMultiMap;,NONSTATIC,Lrandoop/SubTypeSet;,subTypesWithsequences)#11
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#12
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Lrandoop/util/IMultiMap;,getValues,(Ljava/lang/Object;)Ljava/util/Set;)#13
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#Get(Ljava/util/Map;,NONSTATIC,Lrandoop/util/MultiMap;,map)#1
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#3
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#CheckCast(Ljava/util/Set;)#4
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,2)#5
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#6
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#Constant(L;,null)#7
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#ConditionalBranch(Ljava/lang/Object;,ne,11)#8
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#Invoke(STATIC,Ljava/util/Collections;,emptySet,()Ljava/util/Set;)#9
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#Return(Ljava/lang/Object;)#10
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Invoke(STATIC,Ljava/util/Collections;,unmodifiableSet,(Ljava/util/Set;)Ljava/util/Set;)#14
randoop.SubTypeSet.getMatches(Ljava/lang/Class;)Ljava/util/Set;#Return(Ljava/lang/Object;)#15
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#45
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,5)#46
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Goto(60)#47
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,5)#60
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#61
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Constant(I,0)#62
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#ConditionalBranch(I,ne,48)#63
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#68
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Constant(I,0)#69
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#ConditionalBranch(I,eq,79)#70
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,4)#11
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,0)#12
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Get(Lrandoop/ClassLiterals;,NONSTATIC,Lrandoop/ComponentManager;,classLiterals)#13
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Constant(L;,null)#14
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#ConditionalBranch(Ljava/lang/Object;,ne,20)#15
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,0)#16
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Get(Lrandoop/PackageLiterals;,NONSTATIC,Lrandoop/ComponentManager;,packageLiterals)#17
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Constant(L;,null)#18
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#ConditionalBranch(Ljava/lang/Object;,eq,106)#19
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,4)#106
randoop.ComponentManager.getSequencesForType(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;#Return(Ljava/lang/Object;)#107
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,11)#219
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Z,STATIC,Lrandoop/ForwardGenerator;,$assertionsDisabled)#220
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#221
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,230)#222
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#230
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#231
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,242)#232
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,11)#242
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#243
randoop.util.ListOfLists.size()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ListOfLists.size()I#Get(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#1
randoop.util.ListOfLists.size()I#Return(I)#2
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#244
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,329)#245
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"selectinputs-evalforbid")#246
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#247
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,10)#248
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#249
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,254)#250
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,10)#254
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#255
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,262)#256
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#262
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#263
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,267)#264
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New(Lrandoop/InputsAndSuccessFlag;,0)#267
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#268
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#269
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(L;,null)#270
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(L;,null)#271
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(SPECIAL,Lrandoop/InputsAndSuccessFlag;,<init>,(ZLjava/util/List;Ljava/util/List;)V)#272
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#LocalLoad(I,1)#3
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#Put(Z,NONSTATIC,Lrandoop/InputsAndSuccessFlag;,success)#4
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#5
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#6
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/InputsAndSuccessFlag;,sequences)#7
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,3)#9
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/InputsAndSuccessFlag;,indices)#10
randoop.InputsAndSuccessFlag.<init>(ZLjava/util/List;Ljava/util/List;)V#Return(V)#11
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Return(Ljava/lang/Object;)#273
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,2)#36
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,2)#37
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Z,NONSTATIC,Lrandoop/InputsAndSuccessFlag;,success)#38
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#39
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,ne,48)#40
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#41
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#42
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,46)#43
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(L;,null)#46
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Return(Ljava/lang/Object;)#47
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,3)#22
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#23
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(L;,null)#24
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#ConditionalBranch(Ljava/lang/Object;,ne,28)#25
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(L;,null)#26
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Return(Ljava/lang/Object;)#27
randoop.AbstractGenerator.explore()V#LocalStore(Ljava/lang/Object;,1)#67
randoop.AbstractGenerator.explore()V#Get(Z,STATIC,Lrandoop/AbstractGenerator;,dump_sequences)#68
randoop.AbstractGenerator.explore()V#Constant(I,0)#69
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,eq,81)#70
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#81
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#82
randoop.AbstractGenerator.explore()V#Constant(L;,null)#83
randoop.AbstractGenerator.explore()V#ConditionalBranch(Ljava/lang/Object;,eq,89)#84
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#85
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#86
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,1)#87
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/RandoopListenerManager;,generationStepPost,(Lrandoop/ExecutableSequence;)V)#88
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RandoopListenerManager;,listeners)#1
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,3)#3
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#Goto(12)#4
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,3)#12
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#13
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#Constant(I,0)#14
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ne,5)#15
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,3)#5
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#CheckCast(Lrandoop/IEventListener;)#7
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,2)#8
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,2)#9
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Lrandoop/IEventListener;,generationStepPost,(Lrandoop/ExecutableSequence;)V)#11
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#New(Ljava/util/LinkedHashSet;,0)#0
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Dup(1,0)#1
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#2
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,2)#3
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,0)#4
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/LinkedList;,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,covClasses)#5
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lcov/Coverage;,getCoveredAtoms,(Ljava/util/Collection;)Ljava/util/Set;)#6
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#New(Ljava/util/LinkedHashSet;,0)#0
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#Dup(1,0)#1
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#2
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,1)#3
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#4
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Collection;,iterator,()Ljava/util/Iterator;)#5
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,3)#6
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#Goto(72)#7
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#72
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#73
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#Constant(I,0)#74
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#ConditionalBranch(I,ne,8)#75
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#76
cov.Coverage.getCoveredAtoms(Ljava/util/Collection;)Ljava/util/Set;#Return(Ljava/lang/Object;)#77
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#7
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,4)#8
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Goto(50)#9
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#50
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#51
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Constant(I,0)#52
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ne,10)#53
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#54
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Constant(L;,null)#55
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#ConditionalBranch(Ljava/lang/Object;,eq,130)#56
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Return(V)#130
randoop.RandoopListenerManager.generationStepPost(Lrandoop/ExecutableSequence;)V#Return(V)#16
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,1)#89
randoop.AbstractGenerator.explore()V#Constant(L;,null)#90
randoop.AbstractGenerator.explore()V#ConditionalBranch(Ljava/lang/Object;,ne,93)#91
randoop.AbstractGenerator.explore()V#Goto(210)#92
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#37
randoop.RMethod.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RMethod;,inputTypesCached)#38
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#39
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(I,2)#40
randoop.RMethod.getInputTypes()Ljava/util/List;#ArrayLoad(Ljava/lang/Object;)#41
randoop.RMethod.getInputTypes()Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#42
randoop.RMethod.getInputTypes()Ljava/util/List;#Pop(1)#43
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalLoad(I,2)#44
randoop.RMethod.getInputTypes()Ljava/util/List;#Constant(I,1)#45
randoop.RMethod.getInputTypes()Ljava/util/List;#BinaryOp(I,add)#46
randoop.RMethod.getInputTypes()Ljava/util/List;#LocalStore(I,2)#47
randoop.RMethod.getInputTypes()Ljava/util/List;#Constant(I,0)#17
randoop.RMethod.getInputTypes()Ljava/util/List;#Goto(20)#18
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#57
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#75
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,getInterfacesTransitive,(Ljava/lang/Class;)Ljava/util/Set;)#76
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#New(Ljava/util/LinkedHashSet;,0)#0
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Dup(1,0)#1
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#2
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,1)#3
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Invoke(VIRTUAL,Ljava/lang/Class;,getInterfaces,()[Ljava/lang/Class;)#5
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,2)#6
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Constant(I,0)#7
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,3)#8
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Goto(27)#9
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,3)#27
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#28
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#ArrayLength()#29
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(I,lt,10)#30
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#10
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#11
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,3)#12
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#ArrayLoad(Ljava/lang/Object;)#13
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#14
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Pop(1)#15
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#16
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#17
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,3)#18
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#ArrayLoad(Ljava/lang/Object;)#19
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Invoke(STATIC,Lrandoop/util/Reflection;,getInterfacesTransitive,(Ljava/lang/Class;)Ljava/util/Set;)#20
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#31
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Invoke(VIRTUAL,Ljava/lang/Class;,getSuperclass,()Ljava/lang/Class;)#32
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,3)#33
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#34
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Constant(L;,null)#35
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(Ljava/lang/Object;,eq,42)#36
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#42
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Return(Ljava/lang/Object;)#43
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Set;,addAll,(Ljava/util/Collection;)Z)#21
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Pop(1)#22
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,3)#23
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Constant(I,1)#24
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#BinaryOp(I,add)#25
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,3)#26
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#37
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#38
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Invoke(STATIC,Lrandoop/util/Reflection;,getInterfacesTransitive,(Ljava/lang/Class;)Ljava/util/Set;)#39
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Set;,addAll,(Ljava/util/Collection;)Z)#40
randoop.util.Reflection.getInterfacesTransitive(Ljava/lang/Class;)Ljava/util/Set;#Pop(1)#41
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,3)#77
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,3)#78
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#79
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Set;,contains,(Ljava/lang/Object;)Z)#80
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#81
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,86)#82
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#86
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,2)#87
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Goto(108)#88
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,forbid_null)#251
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#252
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,274)#253
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,forbid_null)#257
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#258
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,262)#259
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"forbid_null@selectinputs-evalforbid")#260
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#261
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Constant(Ljava/lang/String;,")")#37
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#38
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#39
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#40
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Pop(1)#41
randoop.util.ProgressDisplay.message()Ljava/lang/String;#LocalLoad(Ljava/lang/Object;,1)#42
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#43
randoop.util.ProgressDisplay.message()Ljava/lang/String;#Return(Ljava/lang/Object;)#44
randoop.util.ProgressDisplay.display()V#Invoke(VIRTUAL,Lrandoop/util/ProgressDisplay;,display,(Ljava/lang/String;)V)#9
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Get(J,STATIC,Lrandoop/main/GenInputsAbstract;,progressinterval)#0
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Constant(J,-1)#1
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Comparison(J,cmp)#2
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Constant(I,0)#3
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#ConditionalBranch(I,ne,6)#4
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,1)#6
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,2)#7
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Get(Ljava/lang/Object;,STATIC,Lrandoop/util/ProgressDisplay;,print_synchro)#8
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Dup(1,0)#9
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#LocalStore(Ljava/lang/Object;,3)#10
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Monitor(ENTER)#11
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#12
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#New(Ljava/lang/StringBuilder;,0)#13
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Dup(1,0)#14
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#15
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Get(Lrandoop/util/ProgressDisplay$Mode;,NONSTATIC,Lrandoop/util/ProgressDisplay;,outputMode)#16
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Get(Lrandoop/util/ProgressDisplay$Mode;,STATIC,Lrandoop/util/ProgressDisplay$Mode;,SINGLE_LINE_OVERWRITE)#17
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#ConditionalBranch(Ljava/lang/Object;,ne,21)#18
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Get(Ljava/lang/String;,STATIC,Lrandoop/Globals;,lineSep)#21
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Invoke(STATIC,Ljava/lang/String;,valueOf,(Ljava/lang/Object;)Ljava/lang/String;)#22
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#23
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,2)#24
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#25
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#26
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Invoke(VIRTUAL,Ljava/io/PrintStream;,print,(Ljava/lang/String;)V)#27
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#28
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Invoke(VIRTUAL,Ljava/io/PrintStream;,flush,()V)#29
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,3)#30
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Monitor(EXIT)#31
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Goto(36)#32
randoop.util.ProgressDisplay.display(Ljava/lang/String;)V#Return(V)#36
randoop.util.ProgressDisplay.display()V#Return(V)#10
randoop.util.ProgressDisplay.run()V#LocalLoad(Ljava/lang/Object;,0)#9
randoop.util.ProgressDisplay.run()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/util/ProgressDisplay;,listenerMgr)#10
randoop.util.ProgressDisplay.run()V#Constant(L;,null)#11
randoop.util.ProgressDisplay.run()V#ConditionalBranch(Ljava/lang/Object;,eq,16)#12
randoop.util.ProgressDisplay.run()V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.ProgressDisplay.run()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/util/ProgressDisplay;,listenerMgr)#14
randoop.util.ProgressDisplay.run()V#Invoke(VIRTUAL,Lrandoop/RandoopListenerManager;,progressThreadUpdateNotify,()V)#15
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RandoopListenerManager;,listeners)#1
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#LocalStore(Ljava/lang/Object;,2)#3
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#Goto(11)#4
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#LocalLoad(Ljava/lang/Object;,2)#11
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#12
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#Constant(I,0)#13
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#ConditionalBranch(I,ne,5)#14
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#LocalLoad(Ljava/lang/Object;,2)#5
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#CheckCast(Lrandoop/IEventListener;)#7
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#LocalStore(Ljava/lang/Object;,1)#8
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#Invoke(INTERFACE,Lrandoop/IEventListener;,progressThreadUpdate,()V)#10
randoop.experiments.CodeCoverageTracker.progressThreadUpdate()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.experiments.CodeCoverageTracker.progressThreadUpdate()V#Get(Ljava/util/Set;,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,branchesCovered)#1
randoop.experiments.CodeCoverageTracker.progressThreadUpdate()V#Invoke(INTERFACE,Ljava/util/Set;,size,()I)#2
randoop.experiments.CodeCoverageTracker.progressThreadUpdate()V#LocalLoad(Ljava/lang/Object;,0)#3
randoop.experiments.CodeCoverageTracker.progressThreadUpdate()V#Get(I,NONSTATIC,Lrandoop/experiments/CodeCoverageTracker;,lastNumBranches)#4
randoop.experiments.CodeCoverageTracker.progressThreadUpdate()V#ConditionalBranch(I,le,14)#5
randoop.experiments.CodeCoverageTracker.progressThreadUpdate()V#Return(V)#14
randoop.RandoopListenerManager.progressThreadUpdateNotify()V#Return(V)#15
randoop.util.ProgressDisplay.run()V#LocalLoad(Ljava/lang/Object;,0)#16
randoop.util.ProgressDisplay.run()V#Invoke(SPECIAL,Lrandoop/util/ProgressDisplay;,updateLastSeqGen,()V)#17
randoop.util.ProgressDisplay.updateLastSeqGen()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ProgressDisplay.updateLastSeqGen()V#Get(Lrandoop/AbstractGenerator;,NONSTATIC,Lrandoop/util/ProgressDisplay;,generator)#1
randoop.util.ProgressDisplay.updateLastSeqGen()V#Get(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_steps)#2
randoop.util.ProgressDisplay.updateLastSeqGen()V#Conversion(I,J)#3
randoop.util.ProgressDisplay.updateLastSeqGen()V#LocalStore(J,1)#4
randoop.util.ProgressDisplay.updateLastSeqGen()V#LocalLoad(J,1)#5
randoop.util.ProgressDisplay.updateLastSeqGen()V#LocalLoad(Ljava/lang/Object;,0)#6
randoop.util.ProgressDisplay.updateLastSeqGen()V#Get(J,NONSTATIC,Lrandoop/util/ProgressDisplay;,lastNumSeqs)#7
randoop.util.ProgressDisplay.updateLastSeqGen()V#Comparison(J,cmp)#8
randoop.util.ProgressDisplay.updateLastSeqGen()V#Constant(I,0)#9
randoop.util.ProgressDisplay.updateLastSeqGen()V#ConditionalBranch(I,le,17)#10
randoop.util.ProgressDisplay.updateLastSeqGen()V#LocalLoad(Ljava/lang/Object;,0)#11
randoop.util.ProgressDisplay.updateLastSeqGen()V#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#12
randoop.util.ProgressDisplay.updateLastSeqGen()V#Put(J,NONSTATIC,Lrandoop/util/ProgressDisplay;,lastNumSeqsIncrease)#13
randoop.util.ProgressDisplay.updateLastSeqGen()V#LocalLoad(Ljava/lang/Object;,0)#14
randoop.util.ProgressDisplay.updateLastSeqGen()V#LocalLoad(J,1)#15
randoop.util.ProgressDisplay.updateLastSeqGen()V#Put(J,NONSTATIC,Lrandoop/util/ProgressDisplay;,lastNumSeqs)#16
randoop.util.ProgressDisplay.updateLastSeqGen()V#Return(V)#17
randoop.util.ProgressDisplay.run()V#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#18
randoop.util.ProgressDisplay.run()V#LocalStore(J,1)#19
randoop.util.ProgressDisplay.run()V#LocalLoad(J,1)#20
randoop.util.ProgressDisplay.run()V#LocalLoad(Ljava/lang/Object;,0)#21
randoop.util.ProgressDisplay.run()V#Get(J,NONSTATIC,Lrandoop/util/ProgressDisplay;,lastNumSeqsIncrease)#22
randoop.util.ProgressDisplay.run()V#BinaryOp(J,sub)#23
randoop.util.ProgressDisplay.run()V#Get(I,STATIC,Lrandoop/util/ProgressDisplay;,exit_if_no_new_sequences_after_mseconds)#24
randoop.util.ProgressDisplay.run()V#Conversion(I,J)#25
randoop.util.ProgressDisplay.run()V#Comparison(J,cmp)#26
randoop.util.ProgressDisplay.run()V#Constant(I,0)#27
randoop.util.ProgressDisplay.run()V#ConditionalBranch(I,le,31)#28
randoop.util.ProgressDisplay.run()V#Get(J,STATIC,Lrandoop/main/GenInputsAbstract;,progressinterval)#31
randoop.util.ProgressDisplay.run()V#Invoke(STATIC,Lrandoop/util/ProgressDisplay;,sleep,(J)V)#32
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New(Lrandoop/InputsAndSuccessFlag;,0)#36
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#37
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#38
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(L;,null)#39
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(L;,null)#40
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(SPECIAL,Lrandoop/InputsAndSuccessFlag;,<init>,(ZLjava/util/List;Ljava/util/List;)V)#41
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Return(Ljava/lang/Object;)#42
randoop.RConstructor.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RConstructor.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RConstructor;,inputTypesCached)#1
randoop.RConstructor.getInputTypes()Ljava/util/List;#Constant(L;,null)#2
randoop.RConstructor.getInputTypes()Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,ne,13)#3
randoop.RConstructor.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.RConstructor.getInputTypes()Ljava/util/List;#New(Ljava/util/ArrayList;,0)#5
randoop.RConstructor.getInputTypes()Ljava/util/List;#Dup(1,0)#6
randoop.RConstructor.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.RConstructor.getInputTypes()Ljava/util/List;#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#8
randoop.RConstructor.getInputTypes()Ljava/util/List;#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,getParameterTypes,()[Ljava/lang/Class;)#9
randoop.RConstructor.getInputTypes()Ljava/util/List;#Invoke(STATIC,Ljava/util/Arrays;,asList,([Ljava/lang/Object;)Ljava/util/List;)#10
randoop.RConstructor.getInputTypes()Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(Ljava/util/Collection;)V)#11
randoop.RConstructor.getInputTypes()Ljava/util/List;#Put(Ljava/util/List;,NONSTATIC,Lrandoop/RConstructor;,inputTypesCached)#12
randoop.RConstructor.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.RConstructor.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RConstructor;,inputTypesCached)#14
randoop.RConstructor.getInputTypes()Ljava/util/List;#Return(Ljava/lang/Object;)#15
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New(Lrandoop/InputsAndSuccessFlag;,0)#528
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#529
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,1)#530
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,3)#531
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,5)#532
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(SPECIAL,Lrandoop/InputsAndSuccessFlag;,<init>,(ZLjava/util/List;Ljava/util/List;)V)#533
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Return(Ljava/lang/Object;)#534
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,2)#48
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/InputsAndSuccessFlag;,sequences)#49
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Lrandoop/Sequence;,concatenate,(Ljava/util/List;)Lrandoop/Sequence;)#50
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#New(Ljava/util/ArrayList;,0)#0
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Dup(1,0)#1
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#2
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,1)#3
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Constant(I,0)#4
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalStore(I,2)#5
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Constant(I,0)#6
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalStore(I,3)#7
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#8
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#9
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,5)#10
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Goto(31)#11
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,5)#31
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#32
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Constant(I,0)#33
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#ConditionalBranch(I,ne,12)#34
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#New(Lrandoop/Sequence;,0)#35
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Dup(1,0)#36
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#New(Lrandoop/util/ListOfLists;,0)#37
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Dup(1,0)#38
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#39
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/util/ListOfLists;,<init>,(Ljava/util/List;)V)#40
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(I,2)#41
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(I,3)#42
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/Sequence;,<init>,(Lrandoop/util/SimpleList;II)V)#43
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Return(Ljava/lang/Object;)#44
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,3)#51
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#New(Ljava/util/ArrayList;,0)#52
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Dup(1,0)#53
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#54
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,4)#55
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,2)#56
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/InputsAndSuccessFlag;,indices)#57
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#58
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,6)#59
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Goto(74)#60
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,6)#74
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#75
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#76
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,ne,61)#77
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#78
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,1)#79
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,4)#80
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,extend,(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;)#81
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#41
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Get(I,NONSTATIC,Lrandoop/Sequence;,savedNetSize)#42
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Constant(I,1)#43
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#BinaryOp(I,add)#44
randoop.RConstructor.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RConstructor.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/RConstructor;,outputTypeCached)#1
randoop.RConstructor.getOutputType()Ljava/lang/Class;#Constant(L;,null)#2
randoop.RConstructor.getOutputType()Ljava/lang/Class;#ConditionalBranch(Ljava/lang/Object;,ne,9)#3
randoop.RConstructor.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.RConstructor.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#5
randoop.RConstructor.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#6
randoop.RConstructor.getOutputType()Ljava/lang/Class;#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,getDeclaringClass,()Ljava/lang/Class;)#7
randoop.RConstructor.getOutputType()Ljava/lang/Class;#Put(Ljava/lang/Class;,NONSTATIC,Lrandoop/RConstructor;,outputTypeCached)#8
randoop.RConstructor.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#9
randoop.RConstructor.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/RConstructor;,outputTypeCached)#10
randoop.RConstructor.getOutputType()Ljava/lang/Class;#Return(Ljava/lang/Object;)#11
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,5)#82
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"heuristic-uniquesequence")#83
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#84
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,repeat_heuristic)#85
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#86
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,115)#87
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"NO_repeat_heuristic@heuristic-uniquesequence")#115
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#116
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,1)#117
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Lrandoop/StatementKind;,getInputTypes,()Ljava/util/List;)#118
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#119
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#120
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,ne,127)#121
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#122
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ForwardGenerator;,statements)#123
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,1)#124
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/List;,remove,(Ljava/lang/Object;)Z)#125
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Constant(I,1)#8
randoop.RConstructor.equals(Ljava/lang/Object;)Z#Return(I)#9
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Pop(1)#126
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"evaluating-maxsize")#127
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#128
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,5)#129
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#130
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(I,STATIC,Lrandoop/main/GenInputsAbstract;,maxsize)#131
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,le,153)#132
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"<maxsize@evaluating-maxsize")#153
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#154
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#155
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,5)#156
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/ForwardGenerator;,randoopConsistencyTests,(Lrandoop/Sequence;)V)#157
randoop.ForwardGenerator.randoopConsistencyTests(Lrandoop/Sequence;)V#Constant(Ljava/lang/String;,"randoopConsistencyTests")#0
randoop.ForwardGenerator.randoopConsistencyTests(Lrandoop/Sequence;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ForwardGenerator.randoopConsistencyTests(Lrandoop/Sequence;)V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#2
randoop.ForwardGenerator.randoopConsistencyTests(Lrandoop/Sequence;)V#Constant(I,0)#3
randoop.ForwardGenerator.randoopConsistencyTests(Lrandoop/Sequence;)V#ConditionalBranch(I,eq,113)#4
randoop.ForwardGenerator.randoopConsistencyTests(Lrandoop/Sequence;)V#Return(V)#113
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#158
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,allSequences)#159
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,5)#160
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Set;,contains,(Ljava/lang/Object;)Z)#161
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#162
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,173)#163
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#173
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,allSequences)#174
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,5)#175
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#176
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Pop(1)#177
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,2)#178
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/InputsAndSuccessFlag;,sequences)#179
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#180
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,7)#181
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Goto(191)#182
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,7)#191
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#192
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#193
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,ne,183)#194
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#195
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,5)#196
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/ForwardGenerator;,randoopConsistencyTest2,(Lrandoop/Sequence;)V)#197
randoop.ForwardGenerator.randoopConsistencyTest2(Lrandoop/Sequence;)V#Constant(Ljava/lang/String;,"randoopConsistencyTest2")#0
randoop.ForwardGenerator.randoopConsistencyTest2(Lrandoop/Sequence;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ForwardGenerator.randoopConsistencyTest2(Lrandoop/Sequence;)V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#2
randoop.ForwardGenerator.randoopConsistencyTest2(Lrandoop/Sequence;)V#Constant(I,0)#3
randoop.ForwardGenerator.randoopConsistencyTest2(Lrandoop/Sequence;)V#ConditionalBranch(I,eq,18)#4
randoop.ForwardGenerator.randoopConsistencyTest2(Lrandoop/Sequence;)V#Constant(Ljava/lang/String;,"NO debug_checks@randoopConsistencyTest2")#18
randoop.ForwardGenerator.randoopConsistencyTest2(Lrandoop/Sequence;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#19
randoop.ForwardGenerator.randoopConsistencyTest2(Lrandoop/Sequence;)V#Return(V)#20
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#198
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#199
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,210)#200
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,2)#210
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/InputsAndSuccessFlag;,sequences)#211
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#212
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,7)#213
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Goto(224)#214
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,7)#224
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#225
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#226
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,ne,215)#227
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#New(Lrandoop/ExecutableSequence;,0)#228
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Dup(1,0)#229
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,5)#230
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(SPECIAL,Lrandoop/ExecutableSequence;,<init>,(Lrandoop/Sequence;)V)#231
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Return(Ljava/lang/Object;)#232
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(Z,STATIC,Lrandoop/ForwardGenerator;,$assertionsDisabled)#28
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(I,0)#29
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#ConditionalBranch(I,ne,38)#30
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"donotexestep")#38
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#39
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,dontexecute)#40
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(I,0)#41
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,52)#42
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"NOT dontexecute@donotexestep")#52
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#53
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#54
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#55
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Put(Lrandoop/Sequence;,STATIC,Lrandoop/AbstractGenerator;,currSeq)#56
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(STATIC,Ljava/lang/System;,nanoTime,()J)#57
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(J,4)#58
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,4)#59
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,1)#60
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#BinaryOp(J,sub)#61
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(J,6)#62
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,4)#63
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(J,1)#64
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#65
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#66
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(Lrandoop/MultiVisitor;,NONSTATIC,Lrandoop/ForwardGenerator;,executionVisitor)#67
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,execute,(Lrandoop/ExecutionVisitor;)V)#68
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(INTERFACE,Lrandoop/ExecutionVisitor;,initialize,(Lrandoop/ExecutableSequence;)V)#5
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/MultiVisitor;,visitors)#1
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,3)#3
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#Goto(12)#4
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,3)#12
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#13
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,0)#14
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ne,5)#15
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,3)#5
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#CheckCast(Lrandoop/ExecutionVisitor;)#7
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,2)#8
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,2)#9
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Lrandoop/ExecutionVisitor;,initialize,(Lrandoop/ExecutableSequence;)V)#11
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checks)#1
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,clear,()V)#2
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checksResults)#4
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,clear,()V)#5
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,0)#6
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalStore(I,2)#7
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Goto(29)#8
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#29
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#30
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#31
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#32
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,lt,9)#33
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checks)#10
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#New(Ljava/util/ArrayList;,0)#11
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Dup(1,0)#12
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,1)#13
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#14
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#15
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Pop(1)#16
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#17
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checksResults)#18
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#New(Ljava/util/ArrayList;,0)#19
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Dup(1,0)#20
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,1)#21
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#22
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#23
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Pop(1)#24
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#25
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,1)#26
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#BinaryOp(I,add)#27
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalStore(I,2)#28
randoop.ContractCheckingVisitor.initialize(Lrandoop/ExecutableSequence;)V#Return(V)#34
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#0
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checks)#1
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,clear,()V)#2
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checksResults)#4
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,clear,()V)#5
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,0)#6
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalStore(I,2)#7
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Goto(29)#8
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#29
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#30
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#31
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#32
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,lt,9)#33
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checks)#10
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#New(Ljava/util/ArrayList;,0)#11
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Dup(1,0)#12
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,1)#13
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#14
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#15
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Pop(1)#16
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#17
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checksResults)#18
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#New(Ljava/util/ArrayList;,0)#19
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Dup(1,0)#20
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,1)#21
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#22
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#23
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Pop(1)#24
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#25
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Constant(I,1)#26
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#BinaryOp(I,add)#27
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#LocalStore(I,2)#28
randoop.RegressionCaptureVisitor.initialize(Lrandoop/ExecutableSequence;)V#Return(V)#34
randoop.MultiVisitor.initialize(Lrandoop/ExecutableSequence;)V#Return(V)#16
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,1)#34
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#35
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#36
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(INTERFACE,Lrandoop/ExecutionVisitor;,visitBefore,(Lrandoop/ExecutableSequence;I)V)#37
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/MultiVisitor;,visitors)#1
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,4)#3
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Goto(13)#4
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#13
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#14
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#15
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,5)#16
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#5
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#CheckCast(Lrandoop/ExecutionVisitor;)#7
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,3)#8
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,3)#9
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#11
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Lrandoop/ExecutionVisitor;,visitBefore,(Lrandoop/ExecutableSequence;I)V)#12
randoop.ContractCheckingVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Return(V)#0
randoop.RegressionCaptureVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Return(V)#0
randoop.MultiVisitor.visitBefore(Lrandoop/ExecutableSequence;I)V#Return(V)#17
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(Z,STATIC,Lrandoop/RConstructor;,$assertionsDisabled)#0
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#1
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,ne,13)#2
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New(Lrandoop/util/ConstructorReflectionCode;,0)#13
randoop.util.ReflectionCode.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@3d569805)#0
randoop.util.ReflectionCode.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.util.ReflectionCode.<clinit>()V#Constant(I,0)#2
randoop.util.ReflectionCode.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.util.ReflectionCode.<clinit>()V#Constant(I,1)#4
randoop.util.ReflectionCode.<clinit>()V#Goto(7)#5
randoop.util.ReflectionCode.<clinit>()V#Put(Z,STATIC,Lrandoop/util/ReflectionCode;,$assertionsDisabled)#7
randoop.util.ReflectionCode.<clinit>()V#Return(V)#8
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#14
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#15
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/RConstructor;,constructor)#16
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,1)#17
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/util/ConstructorReflectionCode;,<init>,(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V)#18
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#Invoke(SPECIAL,Lrandoop/util/ReflectionCode;,<init>,()V)#1
randoop.util.ReflectionCode.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ReflectionCode.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.ReflectionCode.<init>()V#Return(V)#2
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#Constant(L;,null)#3
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#10
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#Constant(L;,null)#11
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#ConditionalBranch(Ljava/lang/Object;,ne,18)#12
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#18
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#19
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#Put(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,constructor)#20
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#21
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#22
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#Put([Ljava/lang/Object;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,inputs)#23
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#24
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#Invoke(SPECIAL,Lrandoop/util/ConstructorReflectionCode;,checkRep,()V)#25
randoop.util.ConstructorReflectionCode.checkRep()V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#0
randoop.util.ConstructorReflectionCode.checkRep()V#Constant(I,0)#1
randoop.util.ConstructorReflectionCode.checkRep()V#ConditionalBranch(I,ne,4)#2
randoop.util.ConstructorReflectionCode.checkRep()V#Return(V)#3
randoop.util.ConstructorReflectionCode.<init>(Ljava/lang/reflect/Constructor;[Ljava/lang/Object;)V#Return(V)#26
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,3)#19
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,3)#20
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,2)#21
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Lrandoop/util/ReflectionExecutor;,executeReflectionCode,(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;)#22
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(L;,null)#0
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalStore(Ljava/lang/Object;,2)#1
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Invoke(STATIC,Ljava/lang/System;,nanoTime,()J)#2
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalStore(J,3)#3
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(Z,STATIC,Lrandoop/util/ReflectionExecutor;,usethreads)#4
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(I,0)#5
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#ConditionalBranch(I,eq,12)#6
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,1)#8
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Invoke(STATIC,Lrandoop/util/ReflectionExecutor;,executeReflectionCodeThreaded,(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;)#9
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#New(Lrandoop/util/RunnerThread;,0)#0
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Dup(1,0)#1
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(L;,null)#2
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Invoke(SPECIAL,Lrandoop/util/RunnerThread;,<init>,(Ljava/lang/ThreadGroup;)V)#3
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Constant(Ljava/lang/String;,"")#2
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Invoke(SPECIAL,Ljava/lang/Thread;,<init>,(Ljava/lang/ThreadGroup;Ljava/lang/String;)V)#3
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#LocalLoad(Ljava/lang/Object;,0)#4
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Constant(L;,null)#5
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Put(Lrandoop/util/ReflectionCode;,NONSTATIC,Lrandoop/util/RunnerThread;,code)#6
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#LocalLoad(Ljava/lang/Object;,0)#7
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Constant(I,0)#8
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Put(Z,NONSTATIC,Lrandoop/util/RunnerThread;,runFinished)#9
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#LocalLoad(Ljava/lang/Object;,0)#10
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Constant(L;,null)#11
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Put(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/util/RunnerThread;,exceptionThrown)#12
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,SETUP)#14
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#New(Lrandoop/util/RunnerThread$NextCallMustBe;,0)#0
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Dup(1,0)#1
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Constant(Ljava/lang/String;,"SETUP")#2
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Constant(I,0)#3
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/RunnerThread$NextCallMustBe;,<init>,(Ljava/lang/String;I)V)#4
randoop.util.RunnerThread$NextCallMustBe.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.RunnerThread$NextCallMustBe.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.util.RunnerThread$NextCallMustBe.<init>(Ljava/lang/String;I)V#LocalLoad(I,2)#2
randoop.util.RunnerThread$NextCallMustBe.<init>(Ljava/lang/String;I)V#Invoke(SPECIAL,Ljava/lang/Enum;,<init>,(Ljava/lang/String;I)V)#3
randoop.util.RunnerThread$NextCallMustBe.<init>(Ljava/lang/String;I)V#Return(V)#4
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Put(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,SETUP)#5
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#New(Lrandoop/util/RunnerThread$NextCallMustBe;,0)#6
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Dup(1,0)#7
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Constant(Ljava/lang/String;,"RUN")#8
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Constant(I,1)#9
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/RunnerThread$NextCallMustBe;,<init>,(Ljava/lang/String;I)V)#10
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Put(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,RUN)#11
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Constant(I,2)#12
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#New([Lrandoop/util/RunnerThread$NextCallMustBe;,1)#13
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Dup(1,0)#14
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Constant(I,0)#15
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,SETUP)#16
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#ArrayStore(Ljava/lang/Object;)#17
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Dup(1,0)#18
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Constant(I,1)#19
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,RUN)#20
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#ArrayStore(Ljava/lang/Object;)#21
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Put([Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,ENUM$VALUES)#22
randoop.util.RunnerThread$NextCallMustBe.<clinit>()V#Return(V)#23
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Put(Lrandoop/util/RunnerThread$NextCallMustBe;,NONSTATIC,Lrandoop/util/RunnerThread;,state)#15
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#LocalLoad(Ljava/lang/Object;,0)#16
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Invoke(STATIC,Lrandoop/util/RandoopUncaughtRunnerThreadExceptionHandler;,getHandler,()Ljava/lang/Thread$UncaughtExceptionHandler;)#17
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.<clinit>()V#New(Lrandoop/util/RandoopUncaughtRunnerThreadExceptionHandler;,0)#0
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.<clinit>()V#Dup(1,0)#1
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/RandoopUncaughtRunnerThreadExceptionHandler;,<init>,()V)#2
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.<init>()V#Return(V)#2
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.<clinit>()V#Put(Lrandoop/util/RandoopUncaughtRunnerThreadExceptionHandler;,STATIC,Lrandoop/util/RandoopUncaughtRunnerThreadExceptionHandler;,singleInstance)#3
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.<clinit>()V#Return(V)#4
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.getHandler()Ljava/lang/Thread$UncaughtExceptionHandler;#Get(Lrandoop/util/RandoopUncaughtRunnerThreadExceptionHandler;,STATIC,Lrandoop/util/RandoopUncaughtRunnerThreadExceptionHandler;,singleInstance)#0
randoop.util.RandoopUncaughtRunnerThreadExceptionHandler.getHandler()Ljava/lang/Thread$UncaughtExceptionHandler;#Return(Ljava/lang/Object;)#1
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Invoke(VIRTUAL,Lrandoop/util/RunnerThread;,setUncaughtExceptionHandler,(Ljava/lang/Thread$UncaughtExceptionHandler;)V)#18
randoop.util.RunnerThread.<init>(Ljava/lang/ThreadGroup;)V#Return(V)#19
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalStore(Ljava/lang/Object;,2)#4
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,2)#5
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,0)#6
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Invoke(VIRTUAL,Lrandoop/util/RunnerThread;,setup,(Lrandoop/util/ReflectionCode;)V)#7
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,NONSTATIC,Lrandoop/util/RunnerThread;,state)#1
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,SETUP)#2
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#ConditionalBranch(Ljava/lang/Object;,eq,8)#3
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#LocalLoad(Ljava/lang/Object;,1)#8
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#Constant(L;,null)#9
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#ConditionalBranch(Ljava/lang/Object;,ne,16)#10
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#LocalLoad(Ljava/lang/Object;,0)#16
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#LocalLoad(Ljava/lang/Object;,1)#17
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#Put(Lrandoop/util/ReflectionCode;,NONSTATIC,Lrandoop/util/RunnerThread;,code)#18
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#LocalLoad(Ljava/lang/Object;,0)#19
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,RUN)#20
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#Put(Lrandoop/util/RunnerThread$NextCallMustBe;,NONSTATIC,Lrandoop/util/RunnerThread;,state)#21
randoop.util.RunnerThread.setup(Lrandoop/util/ReflectionCode;)V#Return(V)#22
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,2)#8
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Invoke(VIRTUAL,Lrandoop/util/RunnerThread;,start,()V)#9
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,2)#10
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(I,STATIC,Lrandoop/util/ReflectionExecutor;,timeout)#11
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Conversion(I,J)#12
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Invoke(VIRTUAL,Lrandoop/util/RunnerThread;,join,(J)V)#13
randoop.util.RunnerThread.run()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.RunnerThread.run()V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,NONSTATIC,Lrandoop/util/RunnerThread;,state)#1
randoop.util.RunnerThread.run()V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,RUN)#2
randoop.util.RunnerThread.run()V#ConditionalBranch(Ljava/lang/Object;,eq,8)#3
randoop.util.RunnerThread.run()V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.RunnerThread.run()V#Constant(I,0)#9
randoop.util.RunnerThread.run()V#Put(Z,NONSTATIC,Lrandoop/util/RunnerThread;,runFinished)#10
randoop.util.RunnerThread.run()V#LocalLoad(Ljava/lang/Object;,0)#11
randoop.util.RunnerThread.run()V#Invoke(SPECIAL,Lrandoop/util/RunnerThread;,executeReflectionCode,()V)#12
randoop.util.RunnerThread.executeReflectionCode()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.RunnerThread.executeReflectionCode()V#Get(Lrandoop/util/ReflectionCode;,NONSTATIC,Lrandoop/util/RunnerThread;,code)#1
randoop.util.RunnerThread.executeReflectionCode()V#Invoke(VIRTUAL,Lrandoop/util/ReflectionCode;,runReflectionCode,()V)#2
randoop.util.ReflectionCode.runReflectionCode()V#Constant(L;,null)#0
randoop.util.ReflectionCode.runReflectionCode()V#LocalStore(Ljava/lang/Object;,1)#1
randoop.util.ReflectionCode.runReflectionCode()V#Constant(L;,null)#2
randoop.util.ReflectionCode.runReflectionCode()V#LocalStore(Ljava/lang/Object;,2)#3
randoop.util.ReflectionCode.runReflectionCode()V#Invoke(STATIC,Ljava/lang/System;,getSecurityManager,()Ljava/lang/SecurityManager;)#4
randoop.util.ReflectionCode.runReflectionCode()V#LocalStore(Ljava/lang/Object;,3)#5
randoop.util.ReflectionCode.runReflectionCode()V#LocalLoad(Ljava/lang/Object;,3)#6
randoop.util.ReflectionCode.runReflectionCode()V#Constant(L;,null)#7
randoop.util.ReflectionCode.runReflectionCode()V#ConditionalBranch(Ljava/lang/Object;,eq,22)#8
randoop.util.ReflectionCode.runReflectionCode()V#Get(Z,STATIC,Lrandoop/util/ReflectionCode;,$assertionsDisabled)#22
randoop.util.ReflectionCode.runReflectionCode()V#Constant(I,0)#23
randoop.util.ReflectionCode.runReflectionCode()V#ConditionalBranch(I,ne,51)#24
randoop.util.ReflectionCode.runReflectionCode()V#LocalLoad(Ljava/lang/Object;,0)#51
randoop.util.ReflectionCode.runReflectionCode()V#Invoke(VIRTUAL,Lrandoop/util/ReflectionCode;,runReflectionCodeRaw,()V)#52
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Lrandoop/util/ConstructorReflectionCode;,hasRunAlready,()Z)#1
randoop.util.ReflectionCode.hasRunAlready()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ReflectionCode.hasRunAlready()Z#Get(Z,NONSTATIC,Lrandoop/util/ReflectionCode;,runAlready)#1
randoop.util.ReflectionCode.hasRunAlready()Z#Return(I)#2
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Constant(I,0)#2
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(I,eq,15)#3
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#15
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Lrandoop/util/ConstructorReflectionCode;,setRunAlready,()V)#16
randoop.util.ReflectionCode.setRunAlready()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ReflectionCode.setRunAlready()V#Get(Z,NONSTATIC,Lrandoop/util/ReflectionCode;,runAlready)#1
randoop.util.ReflectionCode.setRunAlready()V#Constant(I,0)#2
randoop.util.ReflectionCode.setRunAlready()V#ConditionalBranch(I,eq,9)#3
randoop.util.ReflectionCode.setRunAlready()V#LocalLoad(Ljava/lang/Object;,0)#9
randoop.util.ReflectionCode.setRunAlready()V#Constant(I,1)#10
randoop.util.ReflectionCode.setRunAlready()V#Put(Z,NONSTATIC,Lrandoop/util/ReflectionCode;,runAlready)#11
randoop.util.ReflectionCode.setRunAlready()V#Return(V)#12
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#17
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,constructor)#18
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,isAccessible,()Z)#19
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Constant(I,0)#20
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(I,ne,35)#21
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#35
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#36
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/reflect/Constructor;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,constructor)#37
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#38
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Get([Ljava/lang/Object;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,inputs)#39
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Ljava/lang/reflect/Constructor;,newInstance,([Ljava/lang/Object;)Ljava/lang/Object;)#40
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Put(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,retval)#41
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Goto(66)#42
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#66
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,retval)#67
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Constant(L;,null)#68
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(Ljava/lang/Object;,eq,79)#69
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#70
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,exceptionThrown)#71
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Constant(L;,null)#72
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(Ljava/lang/Object;,eq,79)#73
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Return(V)#79
randoop.util.ReflectionCode.runReflectionCode()V#Goto(73)#53
randoop.util.ReflectionCode.runReflectionCode()V#LocalLoad(Ljava/lang/Object;,1)#73
randoop.util.ReflectionCode.runReflectionCode()V#Constant(L;,null)#74
randoop.util.ReflectionCode.runReflectionCode()V#ConditionalBranch(Ljava/lang/Object;,eq,89)#75
randoop.util.ReflectionCode.runReflectionCode()V#Return(V)#89
randoop.util.RunnerThread.executeReflectionCode()V#Goto(21)#3
randoop.util.RunnerThread.executeReflectionCode()V#Return(V)#21
randoop.util.RunnerThread.run()V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.RunnerThread.run()V#Constant(I,1)#14
randoop.util.RunnerThread.run()V#Put(Z,NONSTATIC,Lrandoop/util/RunnerThread;,runFinished)#15
randoop.util.RunnerThread.run()V#LocalLoad(Ljava/lang/Object;,0)#16
randoop.util.RunnerThread.run()V#Get(Lrandoop/util/RunnerThread$NextCallMustBe;,STATIC,Lrandoop/util/RunnerThread$NextCallMustBe;,SETUP)#17
randoop.util.RunnerThread.run()V#Put(Lrandoop/util/RunnerThread$NextCallMustBe;,NONSTATIC,Lrandoop/util/RunnerThread;,state)#18
randoop.util.RunnerThread.run()V#Return(V)#19
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,2)#14
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(Z,NONSTATIC,Lrandoop/util/RunnerThread;,runFinished)#15
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(I,0)#16
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#ConditionalBranch(I,ne,29)#17
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,2)#29
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/util/RunnerThread;,exceptionThrown)#30
randoop.util.ReflectionExecutor.executeReflectionCodeThreaded(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Return(Ljava/lang/Object;)#31
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalStore(Ljava/lang/Object;,2)#10
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Goto(16)#11
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Invoke(STATIC,Ljava/lang/System;,nanoTime,()J)#16
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(J,3)#17
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#BinaryOp(J,sub)#18
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalStore(J,5)#19
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,2)#20
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(L;,null)#21
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#ConditionalBranch(Ljava/lang/Object;,ne,44)#22
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(J,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_accum)#23
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(J,5)#24
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#BinaryOp(J,add)#25
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Put(J,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_accum)#26
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(Z,STATIC,Lrandoop/util/ReflectionExecutor;,$assertionsDisabled)#27
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(I,0)#28
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#ConditionalBranch(I,ne,39)#29
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(I,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_count)#39
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(I,1)#40
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#BinaryOp(I,add)#41
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Put(I,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_count)#42
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Goto(64)#43
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,2)#64
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Return(Ljava/lang/Object;)#65
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,4)#23
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,4)#24
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(L;,null)#25
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(Ljava/lang/Object;,ne,34)#26
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New(Lrandoop/NormalExecution;,0)#27
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#28
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,3)#29
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/ConstructorReflectionCode;,getReturnVariable,()Ljava/lang/Object;)#30
randoop.util.ConstructorReflectionCode.getReturnVariable()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ConstructorReflectionCode.getReturnVariable()Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/ConstructorReflectionCode;,hasRunAlready,()Z)#1
randoop.util.ConstructorReflectionCode.getReturnVariable()Ljava/lang/Object;#Constant(I,0)#2
randoop.util.ConstructorReflectionCode.getReturnVariable()Ljava/lang/Object;#ConditionalBranch(I,ne,9)#3
randoop.util.ConstructorReflectionCode.getReturnVariable()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#9
randoop.util.ConstructorReflectionCode.getReturnVariable()Ljava/lang/Object;#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,retval)#10
randoop.util.ConstructorReflectionCode.getReturnVariable()Ljava/lang/Object;#Return(Ljava/lang/Object;)#11
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(J,0)#31
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/NormalExecution;,<init>,(Ljava/lang/Object;J)V)#32
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#33
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,1)#70
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(Ljava/lang/Object;,0)#71
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,3)#72
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Invoke(INTERFACE,Lrandoop/ExecutionVisitor;,visitAfter,(Lrandoop/ExecutableSequence;I)V)#73
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/MultiVisitor;,visitors)#1
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,4)#3
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(13)#4
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#13
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#14
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#15
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,5)#16
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#5
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Lrandoop/ExecutionVisitor;)#7
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,3)#8
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,3)#9
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#11
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Lrandoop/ExecutionVisitor;,visitAfter,(Lrandoop/ExecutableSequence;I)V)#12
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#0
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(I,3)#1
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(38)#2
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#38
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#39
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,le,3)#40
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Z,STATIC,Lrandoop/ContractCheckingVisitor;,$assertionsDisabled)#3
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#4
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,17)#5
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#17
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#18
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ge,34)#19
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#34
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#35
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#BinaryOp(I,add)#36
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(I,3)#37
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,0)#41
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Z,NONSTATIC,Lrandoop/ContractCheckingVisitor;,checkAtEndOfExec)#42
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#43
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,53)#44
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#45
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#46
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#47
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#48
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#49
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#BinaryOp(I,sub)#50
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ge,53)#51
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#53
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#54
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#55
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Instanceof(Lrandoop/ExceptionalExecution;)#56
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#57
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,80)#58
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#80
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#81
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(STATIC,Lrandoop/ContractCheckingVisitor;,objectIndicesToCheck,(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;)#82
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#New(Lrandoop/util/MultiMap;,0)#0
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Dup(1,0)#1
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(SPECIAL,Lrandoop/util/MultiMap;,<init>,()V)#2
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalStore(Ljava/lang/Object;,2)#3
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Constant(I,0)#4
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalStore(I,3)#5
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Goto(62)#6
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(I,3)#62
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(I,1)#63
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#ConditionalBranch(I,le,7)#64
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(I,3)#8
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#9
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalStore(Ljava/lang/Object;,4)#10
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Get(Z,STATIC,Lrandoop/ContractCheckingVisitor;,$assertionsDisabled)#11
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Constant(I,0)#12
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#ConditionalBranch(I,ne,22)#13
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,0)#22
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#23
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(I,3)#24
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(VIRTUAL,Lrandoop/Sequence;,getStatementKind,(I)Lrandoop/StatementKind;)#25
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(INTERFACE,Lrandoop/StatementKind;,getOutputType,()Ljava/lang/Class;)#26
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalStore(Ljava/lang/Object;,5)#27
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,5)#28
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#29
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#30
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Constant(I,0)#31
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#ConditionalBranch(I,eq,34)#32
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,5)#34
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@523beb29)#35
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#36
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Constant(I,0)#37
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#ConditionalBranch(I,eq,40)#38
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,5)#40
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isPrimitive,(Ljava/lang/Class;)Z)#41
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Constant(I,0)#42
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#ConditionalBranch(I,eq,45)#43
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,4)#45
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#CheckCast(Lrandoop/NormalExecution;)#46
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#47
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalStore(Ljava/lang/Object;,6)#48
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,6)#49
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Constant(L;,null)#50
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#ConditionalBranch(Ljava/lang/Object;,ne,53)#51
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,2)#53
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,5)#54
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(I,3)#55
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#56
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Invoke(VIRTUAL,Lrandoop/util/MultiMap;,add,(Ljava/lang/Object;Ljava/lang/Object;)V)#57
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Get(Ljava/util/Map;,NONSTATIC,Lrandoop/util/MultiMap;,map)#1
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#3
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#CheckCast(Ljava/util/Set;)#4
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalStore(Ljava/lang/Object;,3)#5
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,3)#6
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Constant(L;,null)#7
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#ConditionalBranch(Ljava/lang/Object;,ne,20)#8
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#New(Ljava/util/LinkedHashSet;,0)#9
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Dup(1,0)#10
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Constant(I,1)#11
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,(I)V)#12
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalStore(Ljava/lang/Object;,3)#13
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#14
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Get(Ljava/util/Map;,NONSTATIC,Lrandoop/util/MultiMap;,map)#15
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#16
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,3)#17
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Invoke(INTERFACE,Ljava/util/Map;,put,(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;)#18
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Pop(1)#19
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,3)#20
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#21
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#22
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Pop(1)#23
randoop.util.MultiMap.add(Ljava/lang/Object;Ljava/lang/Object;)V#Return(V)#24
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(I,3)#58
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Constant(I,1)#59
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#BinaryOp(I,add)#60
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalStore(I,3)#61
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#LocalLoad(Ljava/lang/Object;,2)#65
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Return(Ljava/lang/Object;)#66
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,3)#83
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,3)#84
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/util/MultiMap;,keySet,()Ljava/util/Set;)#85
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#86
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,5)#87
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(127)#88
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,5)#127
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#128
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#129
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,89)#130
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,5)#89
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#90
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Ljava/lang/Class;)#91
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,4)#92
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,0)#93
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ContractCheckingVisitor;,contracts)#94
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#95
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,7)#96
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(123)#97
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,7)#123
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#124
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#125
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,98)#126
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,7)#98
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#99
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Lrandoop/ObjectContract;)#100
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,6)#101
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,6)#102
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Lrandoop/ObjectContract;,getArity,()I)#103
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#104
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,115)#105
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,0)#106
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#107
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,6)#108
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,3)#109
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#110
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/util/MultiMap;,getValues,(Ljava/lang/Object;)Ljava/util/Set;)#111
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#11
randoop.util.MultiMap.getValues(Ljava/lang/Object;)Ljava/util/Set;#Return(Ljava/lang/Object;)#12
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#112
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(SPECIAL,Lrandoop/ContractCheckingVisitor;,checkUnary,(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V)#113
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,3)#0
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#1
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,6)#2
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Goto(104)#3
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,6)#104
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#105
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#106
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,ne,4)#107
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,6)#4
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#5
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#CheckCast(Ljava/lang/Integer;)#6
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,5)#7
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,1)#8
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,5)#9
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Ljava/lang/Integer;,intValue,()I)#10
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#11
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,7)#12
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Get(Z,STATIC,Lrandoop/ContractCheckingVisitor;,$assertionsDisabled)#13
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#14
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,ne,25)#15
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,2)#25
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,1)#26
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#New([Ljava/lang/Object;,1)#27
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Dup(1,0)#28
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#29
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,7)#30
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#CheckCast(Lrandoop/NormalExecution;)#31
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#32
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ArrayStore(Ljava/lang/Object;)#33
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(STATIC,Lrandoop/ObjectContractUtils;,execute,(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;)#34
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#New(Lrandoop/ObjectContractUtils$1;,0)#0
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Dup(1,0)#1
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,1)#3
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/ObjectContractUtils$1;,<init>,(Lrandoop/ObjectContract;[Ljava/lang/Object;)V)#4
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#Put(Lrandoop/ObjectContract;,NONSTATIC,Lrandoop/ObjectContractUtils$1;,val$c)#2
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#3
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#4
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#Put([Ljava/lang/Object;,NONSTATIC,Lrandoop/ObjectContractUtils$1;,val$objs)#5
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#6
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#Invoke(SPECIAL,Lrandoop/util/ReflectionCode;,<init>,()V)#7
randoop.ObjectContractUtils$1.<init>(Lrandoop/ObjectContract;[Ljava/lang/Object;)V#Return(V)#8
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,2)#5
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#New(Lrandoop/util/Timer;,0)#6
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Dup(1,0)#7
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/util/Timer;,<init>,()V)#8
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,3)#9
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,3)#10
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/Timer;,startTiming,()V)#11
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,2)#12
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#13
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Lrandoop/util/ReflectionExecutor;,executeReflectionCode,(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;)#14
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#1
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Get(Lrandoop/ObjectContract;,NONSTATIC,Lrandoop/ObjectContractUtils$1;,val$c)#2
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#3
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Get([Ljava/lang/Object;,NONSTATIC,Lrandoop/ObjectContractUtils$1;,val$objs)#4
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Invoke(INTERFACE,Lrandoop/ObjectContract;,evaluate,([Ljava/lang/Object;)Z)#5
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#Get(Z,STATIC,Lrandoop/EqualsReflexive;,$assertionsDisabled)#0
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#1
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#ConditionalBranch(I,ne,14)#2
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#14
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#15
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#ArrayLoad(Ljava/lang/Object;)#16
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#17
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#Get(Z,STATIC,Lrandoop/EqualsReflexive;,$assertionsDisabled)#18
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#19
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#ConditionalBranch(I,ne,28)#20
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#28
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#29
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#30
randoop.EqualsReflexive.evaluate([Ljava/lang/Object;)Z#Return(I)#31
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#6
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Put(Ljava/lang/Object;,NONSTATIC,Lrandoop/ObjectContractUtils$1;,result)#7
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Goto(21)#8
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#21
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Invoke(VIRTUAL,Lrandoop/ObjectContractUtils$1;,setRunAlready,()V)#22
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Return(V)#23
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,4)#15
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,3)#16
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/Timer;,stopTiming,()V)#17
randoop.util.Timer.stopTiming()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Timer.stopTiming()V#Get(Z,NONSTATIC,Lrandoop/util/Timer;,running)#1
randoop.util.Timer.stopTiming()V#Constant(I,0)#2
randoop.util.Timer.stopTiming()V#ConditionalBranch(I,ne,9)#3
randoop.util.Timer.stopTiming()V#LocalLoad(Ljava/lang/Object;,0)#9
randoop.util.Timer.stopTiming()V#Dup(1,0)#10
randoop.util.Timer.stopTiming()V#Get(J,NONSTATIC,Lrandoop/util/Timer;,timeElapsed)#11
randoop.util.Timer.stopTiming()V#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#12
randoop.util.Timer.stopTiming()V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.Timer.stopTiming()V#Get(J,NONSTATIC,Lrandoop/util/Timer;,startTime)#14
randoop.util.Timer.stopTiming()V#BinaryOp(J,sub)#15
randoop.util.Timer.stopTiming()V#BinaryOp(J,add)#16
randoop.util.Timer.stopTiming()V#Put(J,NONSTATIC,Lrandoop/util/Timer;,timeElapsed)#17
randoop.util.Timer.stopTiming()V#LocalLoad(Ljava/lang/Object;,0)#18
randoop.util.Timer.stopTiming()V#Constant(I,0)#19
randoop.util.Timer.stopTiming()V#Put(Z,NONSTATIC,Lrandoop/util/Timer;,running)#20
randoop.util.Timer.stopTiming()V#Return(V)#21
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,4)#18
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Constant(L;,null)#19
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#ConditionalBranch(Ljava/lang/Object;,ne,25)#20
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,2)#21
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/ReflectionCode;,getExceptionThrown,()Ljava/lang/Throwable;)#22
randoop.ObjectContractUtils$1.getExceptionThrown()Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ObjectContractUtils$1.getExceptionThrown()Ljava/lang/Throwable;#Get(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/ObjectContractUtils$1;,exception)#1
randoop.ObjectContractUtils$1.getExceptionThrown()Ljava/lang/Throwable;#Return(Ljava/lang/Object;)#2
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Constant(L;,null)#23
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#ConditionalBranch(Ljava/lang/Object;,eq,33)#24
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#New(Lrandoop/NormalExecution;,0)#33
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Dup(1,0)#34
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,2)#35
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/ReflectionCode;,getReturnVariable,()Ljava/lang/Object;)#36
randoop.ObjectContractUtils$1.getReturnVariable()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ObjectContractUtils$1.getReturnVariable()Ljava/lang/Object;#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/ObjectContractUtils$1;,result)#1
randoop.ObjectContractUtils$1.getReturnVariable()Ljava/lang/Object;#Return(Ljava/lang/Object;)#2
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,3)#37
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/Timer;,getTimeElapsedMillis,()J)#38
randoop.util.Timer.getTimeElapsedMillis()J#LocalLoad(Ljava/lang/Object;,0)#12
randoop.util.Timer.getTimeElapsedMillis()J#Get(J,NONSTATIC,Lrandoop/util/Timer;,timeElapsed)#13
randoop.util.Timer.getTimeElapsedMillis()J#Return(J)#14
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/NormalExecution;,<init>,(Ljava/lang/Object;J)V)#39
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#40
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,8)#35
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,8)#36
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Instanceof(Lrandoop/NormalExecution;)#37
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#38
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,eq,51)#39
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,8)#40
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#CheckCast(Lrandoop/NormalExecution;)#41
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,9)#42
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,9)#43
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#44
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,1)#45
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#46
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#47
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#48
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,eq,82)#49
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Goto(104)#50
randoop.ContractCheckingVisitor.checkUnary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Return(V)#108
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(123)#114
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Get(Z,STATIC,Lrandoop/EqualsToNullRetFalse;,$assertionsDisabled)#0
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#1
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#ConditionalBranch(I,ne,14)#2
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#14
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#15
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#ArrayLoad(Ljava/lang/Object;)#16
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#17
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Get(Z,STATIC,Lrandoop/EqualsToNullRetFalse;,$assertionsDisabled)#18
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#19
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#ConditionalBranch(I,ne,28)#20
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#28
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Constant(L;,null)#29
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#30
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#31
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#ConditionalBranch(I,eq,35)#32
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Constant(I,1)#35
randoop.EqualsToNullRetFalse.evaluate([Ljava/lang/Object;)Z#Return(I)#36
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,0)#115
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#116
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,6)#117
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,3)#118
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#119
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/util/MultiMap;,getValues,(Ljava/lang/Object;)Ljava/util/Set;)#120
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#121
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(SPECIAL,Lrandoop/ContractCheckingVisitor;,checkBinary,(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V)#122
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,3)#0
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#1
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,6)#2
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Goto(165)#3
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,6)#165
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#166
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#167
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,ne,4)#168
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,6)#4
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#5
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#CheckCast(Ljava/lang/Integer;)#6
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,5)#7
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,3)#8
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#9
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,8)#10
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Goto(161)#11
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,8)#161
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#162
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#163
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,ne,12)#164
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,8)#12
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#13
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#CheckCast(Ljava/lang/Integer;)#14
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,7)#15
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,1)#16
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,5)#17
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Ljava/lang/Integer;,intValue,()I)#18
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#19
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,9)#20
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Get(Z,STATIC,Lrandoop/ContractCheckingVisitor;,$assertionsDisabled)#21
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#22
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,ne,33)#23
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,1)#33
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,7)#34
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Ljava/lang/Integer;,intValue,()I)#35
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#36
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,10)#37
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Get(Z,STATIC,Lrandoop/ContractCheckingVisitor;,$assertionsDisabled)#38
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#39
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,ne,50)#40
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#50
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#51
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,eq,70)#52
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,2)#70
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,2)#71
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#New([Ljava/lang/Object;,1)#72
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Dup(1,0)#73
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#74
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,9)#75
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#CheckCast(Lrandoop/NormalExecution;)#76
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#77
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ArrayStore(Ljava/lang/Object;)#78
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Dup(1,0)#79
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,1)#80
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,10)#81
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#CheckCast(Lrandoop/NormalExecution;)#82
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#83
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ArrayStore(Ljava/lang/Object;)#84
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(STATIC,Lrandoop/ObjectContractUtils;,execute,(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;)#85
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#1
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#ArrayLoad(Ljava/lang/Object;)#2
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#3
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#4
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Constant(I,1)#5
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#ArrayLoad(Ljava/lang/Object;)#6
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,3)#7
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#8
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,3)#9
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#10
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#11
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#ConditionalBranch(I,eq,22)#12
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#13
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,hashCode,()I)#14
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,3)#15
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,hashCode,()I)#16
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#ConditionalBranch(I,ne,20)#17
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Constant(I,1)#18
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Return(I)#19
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,11)#86
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(L;,null)#87
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,12)#88
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,11)#89
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Instanceof(Lrandoop/NormalExecution;)#90
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#91
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,eq,145)#92
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,11)#93
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#CheckCast(Lrandoop/NormalExecution;)#94
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalStore(Ljava/lang/Object;,13)#95
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#LocalLoad(Ljava/lang/Object;,13)#96
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#97
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,1)#98
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#99
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#100
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#101
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,eq,109)#102
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#103
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#104
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,eq,161)#105
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Return(V)#169
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#1
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#ArrayLoad(Ljava/lang/Object;)#2
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#3
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#4
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#Constant(I,1)#5
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#ArrayLoad(Ljava/lang/Object;)#6
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,3)#7
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#8
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,3)#9
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#10
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#Constant(I,0)#11
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#ConditionalBranch(I,eq,17)#12
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,3)#13
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#14
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#15
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#Return(I)#16
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Return(V)#131
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(Ljava/lang/String;,"visitAfter")#0
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#2
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#3
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#4
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#5
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#6
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#BinaryOp(I,sub)#7
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ge,10)#8
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#11
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasFailure,(I)Z)#12
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#13
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,16)#14
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#16
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasNonExecutedStatements,()Z)#17
randoop.ExecutableSequence.hasNonExecutedStatements()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#1
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#2
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Constant(I,1)#3
randoop.ExecutableSequence.hasNonExecutedStatements()Z#BinaryOp(I,sub)#4
randoop.ExecutableSequence.hasNonExecutedStatements()Z#LocalStore(I,1)#5
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Goto(19)#6
randoop.ExecutableSequence.hasNonExecutedStatements()Z#LocalLoad(I,1)#19
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Constant(I,0)#20
randoop.ExecutableSequence.hasNonExecutedStatements()Z#ConditionalBranch(I,ge,7)#21
randoop.ExecutableSequence.hasNonExecutedStatements()Z#LocalLoad(Ljava/lang/Object;,0)#7
randoop.ExecutableSequence.hasNonExecutedStatements()Z#LocalLoad(I,1)#8
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#9
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Instanceof(Lrandoop/NotExecuted;)#10
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Constant(I,0)#11
randoop.ExecutableSequence.hasNonExecutedStatements()Z#ConditionalBranch(I,eq,15)#12
randoop.ExecutableSequence.hasNonExecutedStatements()Z#LocalLoad(I,1)#15
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Constant(I,-1)#16
randoop.ExecutableSequence.hasNonExecutedStatements()Z#BinaryOp(I,add)#17
randoop.ExecutableSequence.hasNonExecutedStatements()Z#LocalStore(I,1)#18
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Constant(I,0)#22
randoop.ExecutableSequence.hasNonExecutedStatements()Z#Return(I)#23
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#18
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,21)#19
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#21
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(I,3)#22
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(371)#23
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#371
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#372
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#373
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#374
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,lt,24)#375
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#24
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#25
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#26
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getStatementKind,(I)Lrandoop/StatementKind;)#27
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,4)#28
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#29
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#30
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#31
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,5)#32
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,5)#33
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Instanceof(Lrandoop/NormalExecution;)#34
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#35
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,322)#36
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,5)#37
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Lrandoop/NormalExecution;)#38
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,6)#39
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#40
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Instanceof(Lrandoop/PrimitiveOrStringOrNullDecl;)#41
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#42
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,45)#43
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#45
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Lrandoop/StatementKind;,getOutputType,()Ljava/lang/Class;)#46
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,7)#47
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#48
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,7)#49
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#50
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#51
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,54)#52
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#54
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Instanceof(Lrandoop/RMethod;)#55
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#56
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,74)#57
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,6)#74
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#75
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,8)#76
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#77
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#78
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#79
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getVariable,(I)Lrandoop/Variable;)#80
randoop.Sequence.getVariable(I)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.getVariable(I)Lrandoop/Variable;#LocalLoad(I,1)#1
randoop.Sequence.getVariable(I)Lrandoop/Variable;#Invoke(VIRTUAL,Lrandoop/Sequence;,checkIndex,(I)V)#2
randoop.Sequence.getVariable(I)Lrandoop/Variable;#New(Lrandoop/Variable;,0)#3
randoop.Sequence.getVariable(I)Lrandoop/Variable;#Dup(1,0)#4
randoop.Sequence.getVariable(I)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,0)#5
randoop.Sequence.getVariable(I)Lrandoop/Variable;#LocalLoad(I,1)#6
randoop.Sequence.getVariable(I)Lrandoop/Variable;#Invoke(SPECIAL,Lrandoop/Variable;,<init>,(Lrandoop/Sequence;I)V)#7
randoop.Sequence.getVariable(I)Lrandoop/Variable;#Return(Ljava/lang/Object;)#8
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,9)#81
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,8)#82
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(L;,null)#83
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(Ljava/lang/Object;,ne,103)#84
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,8)#103
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#104
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isBoxedPrimitiveTypeOrString,(Ljava/lang/Class;)Z)#105
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#106
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,197)#107
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#197
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Instanceof(Lrandoop/RConstructor;)#198
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#199
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,218)#200
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#218
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#219
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#220
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getVariable,(I)Lrandoop/Variable;)#221
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,10)#222
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Ljava/util/Map;,STATIC,Lrandoop/RegressionCaptureVisitor;,observer_map)#223
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,10)#224
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Variable;,getType,()Ljava/lang/Class;)#225
randoop.Variable.getType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Variable.getType()Ljava/lang/Class;#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/Variable;,sequence)#1
randoop.Variable.getType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.Variable.getType()Ljava/lang/Class;#Get(I,NONSTATIC,Lrandoop/Variable;,index)#3
randoop.Variable.getType()Ljava/lang/Class;#Invoke(VIRTUAL,Lrandoop/Sequence;,getStatementKind,(I)Lrandoop/StatementKind;)#4
randoop.Variable.getType()Ljava/lang/Class;#Invoke(INTERFACE,Lrandoop/StatementKind;,getOutputType,()Ljava/lang/Class;)#5
randoop.Variable.getType()Ljava/lang/Class;#Return(Ljava/lang/Object;)#6
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#226
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Ljava/util/List;)#227
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,11)#228
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,11)#229
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(L;,null)#230
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(Ljava/lang/Object;,eq,367)#231
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#367
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#368
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#BinaryOp(I,add)#369
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(I,3)#370
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Return(V)#376
randoop.MultiVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Return(V)#17
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(STATIC,Ljava/lang/System;,nanoTime,()J)#69
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(J,4)#70
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#71
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,4)#72
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,1)#73
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#BinaryOp(J,sub)#74
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Put(J,NONSTATIC,Lrandoop/ExecutableSequence;,exectime)#75
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,4)#76
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(J,1)#77
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#78
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#79
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/ForwardGenerator;,processSequence,(Lrandoop/ExecutableSequence;)V)#80
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(Ljava/lang/String;,"processSequence")#0
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,offline)#2
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#3
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,16)#4
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(Ljava/lang/String;,"NOT offline@processSequence")#16
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#17
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#18
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasNonExecutedStatements,()Z)#19
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#20
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,31)#21
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#31
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasFailure,()Z)#32
randoop.ExecutableSequence.hasFailure()Z#Constant(I,0)#0
randoop.ExecutableSequence.hasFailure()Z#LocalStore(I,1)#1
randoop.ExecutableSequence.hasFailure()Z#Goto(14)#2
randoop.ExecutableSequence.hasFailure()Z#LocalLoad(I,1)#14
randoop.ExecutableSequence.hasFailure()Z#LocalLoad(Ljava/lang/Object;,0)#15
randoop.ExecutableSequence.hasFailure()Z#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#16
randoop.ExecutableSequence.hasFailure()Z#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#17
randoop.ExecutableSequence.hasFailure()Z#ConditionalBranch(I,lt,3)#18
randoop.ExecutableSequence.hasFailure()Z#LocalLoad(Ljava/lang/Object;,0)#3
randoop.ExecutableSequence.hasFailure()Z#LocalLoad(I,1)#4
randoop.ExecutableSequence.hasFailure()Z#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasFailure,(I)Z)#5
randoop.ExecutableSequence.hasFailure()Z#Constant(I,0)#6
randoop.ExecutableSequence.hasFailure()Z#ConditionalBranch(I,eq,10)#7
randoop.ExecutableSequence.hasFailure()Z#LocalLoad(I,1)#10
randoop.ExecutableSequence.hasFailure()Z#Constant(I,1)#11
randoop.ExecutableSequence.hasFailure()Z#BinaryOp(I,add)#12
randoop.ExecutableSequence.hasFailure()Z#LocalStore(I,1)#13
randoop.ExecutableSequence.hasFailure()Z#Constant(I,0)#19
randoop.ExecutableSequence.hasFailure()Z#Return(I)#20
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#33
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,44)#34
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#44
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,isNormalExecution,()Z)#45
randoop.ExecutableSequence.isNormalExecution()Z#Constant(I,0)#0
randoop.ExecutableSequence.isNormalExecution()Z#LocalStore(I,1)#1
randoop.ExecutableSequence.isNormalExecution()Z#Goto(14)#2
randoop.ExecutableSequence.isNormalExecution()Z#LocalLoad(I,1)#14
randoop.ExecutableSequence.isNormalExecution()Z#LocalLoad(Ljava/lang/Object;,0)#15
randoop.ExecutableSequence.isNormalExecution()Z#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#16
randoop.ExecutableSequence.isNormalExecution()Z#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#17
randoop.ExecutableSequence.isNormalExecution()Z#ConditionalBranch(I,lt,3)#18
randoop.ExecutableSequence.isNormalExecution()Z#LocalLoad(Ljava/lang/Object;,0)#3
randoop.ExecutableSequence.isNormalExecution()Z#LocalLoad(I,1)#4
randoop.ExecutableSequence.isNormalExecution()Z#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,isNormalExecution,(I)Z)#5
randoop.ExecutableSequence.isNormalExecution(I)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.isNormalExecution(I)Z#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#1
randoop.ExecutableSequence.isNormalExecution(I)Z#LocalLoad(I,1)#2
randoop.ExecutableSequence.isNormalExecution(I)Z#Invoke(VIRTUAL,Lrandoop/Sequence;,checkIndex,(I)V)#3
randoop.ExecutableSequence.isNormalExecution(I)Z#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ExecutableSequence.isNormalExecution(I)Z#LocalLoad(I,1)#5
randoop.ExecutableSequence.isNormalExecution(I)Z#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#6
randoop.ExecutableSequence.isNormalExecution(I)Z#Instanceof(Lrandoop/NormalExecution;)#7
randoop.ExecutableSequence.isNormalExecution(I)Z#Return(I)#8
randoop.ExecutableSequence.isNormalExecution()Z#Constant(I,0)#6
randoop.ExecutableSequence.isNormalExecution()Z#ConditionalBranch(I,ne,10)#7
randoop.ExecutableSequence.isNormalExecution()Z#LocalLoad(I,1)#10
randoop.ExecutableSequence.isNormalExecution()Z#Constant(I,1)#11
randoop.ExecutableSequence.isNormalExecution()Z#BinaryOp(I,add)#12
randoop.ExecutableSequence.isNormalExecution()Z#LocalStore(I,1)#13
randoop.ExecutableSequence.isNormalExecution()Z#Constant(I,1)#19
randoop.ExecutableSequence.isNormalExecution()Z#Return(I)#20
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#46
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ne,57)#47
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#57
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalStore(I,2)#58
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Goto(187)#59
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#187
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#188
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#189
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#190
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,lt,60)#191
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#60
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#61
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#62
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#CheckCast(Lrandoop/NormalExecution;)#63
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,3)#64
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,3)#65
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#66
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,4)#67
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#68
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(L;,null)#69
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(Ljava/lang/Object;,ne,89)#70
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#89
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#90
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,5)#91
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(Ljava/lang/String;,"processSequence-useobjcache")#92
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#93
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,5)#94
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isBoxedOrPrimitiveOrStringType,(Ljava/lang/Class;)Z)#95
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#Constant(I,0)#12
randoop.util.PrimitiveTypes.isBoxedOrPrimitiveOrStringType(Ljava/lang/Class;)Z#Return(I)#13
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#96
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,159)#97
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,use_object_cache)#159
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#160
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,170)#161
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#170
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#171
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,183)#172
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#183
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,1)#184
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#BinaryOp(I,add)#185
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalStore(I,2)#186
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Return(V)#192
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#81
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#82
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,hasActiveFlags,()Z)#83
randoop.Sequence.hasActiveFlags()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.hasActiveFlags()Z#Get(Ljava/util/BitSet;,NONSTATIC,Lrandoop/Sequence;,activeFlags)#1
randoop.Sequence.hasActiveFlags()Z#Invoke(VIRTUAL,Ljava/util/BitSet;,isEmpty,()Z)#2
randoop.Sequence.hasActiveFlags()Z#Constant(I,0)#3
randoop.Sequence.hasActiveFlags()Z#ConditionalBranch(I,eq,7)#4
randoop.Sequence.hasActiveFlags()Z#Constant(I,1)#7
randoop.Sequence.hasActiveFlags()Z#Return(I)#8
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Constant(I,0)#84
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,91)#85
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#86
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(Lrandoop/ComponentManager;,NONSTATIC,Lrandoop/ForwardGenerator;,componentManager)#87
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#88
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#89
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/ComponentManager;,addGeneratedSequence,(Lrandoop/Sequence;)V)#90
randoop.ComponentManager.addGeneratedSequence(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ComponentManager.addGeneratedSequence(Lrandoop/Sequence;)V#Get(Lrandoop/SequenceCollection;,NONSTATIC,Lrandoop/ComponentManager;,gralComponents)#1
randoop.ComponentManager.addGeneratedSequence(Lrandoop/Sequence;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.ComponentManager.addGeneratedSequence(Lrandoop/Sequence;)V#Invoke(VIRTUAL,Lrandoop/SequenceCollection;,add,(Lrandoop/Sequence;)V)#3
randoop.ComponentManager.addGeneratedSequence(Lrandoop/Sequence;)V#Return(V)#4
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Invoke(STATIC,Ljava/lang/System;,nanoTime,()J)#91
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(J,4)#92
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,6)#93
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,4)#94
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,1)#95
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#BinaryOp(J,sub)#96
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#BinaryOp(J,add)#97
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalStore(J,6)#98
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#99
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(J,6)#100
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Put(J,NONSTATIC,Lrandoop/ExecutableSequence;,gentime)#101
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#102
randoop.ForwardGenerator.step()Lrandoop/ExecutableSequence;#Return(Ljava/lang/Object;)#103
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,2)#57
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,3)#58
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,3)#59
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Set;,iterator,()Ljava/util/Iterator;)#60
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalStore(Ljava/lang/Object;,5)#61
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Goto(126)#62
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,5)#126
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#127
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#Constant(I,0)#128
randoop.experiments.CodeCoverageTracker.generationStepPost(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ne,63)#129
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#93
randoop.AbstractGenerator.explore()V#Dup(1,0)#94
randoop.AbstractGenerator.explore()V#Get(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_sequences_generated)#95
randoop.AbstractGenerator.explore()V#Constant(I,1)#96
randoop.AbstractGenerator.explore()V#BinaryOp(I,add)#97
randoop.AbstractGenerator.explore()V#Put(I,NONSTATIC,Lrandoop/AbstractGenerator;,num_sequences_generated)#98
randoop.AbstractGenerator.explore()V#New(Lrandoop/FailureSet;,0)#99
randoop.FailureSet.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@224ce532)#0
randoop.FailureSet.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.FailureSet.<clinit>()V#Constant(I,0)#2
randoop.FailureSet.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.FailureSet.<clinit>()V#Constant(I,1)#4
randoop.FailureSet.<clinit>()V#Goto(7)#5
randoop.FailureSet.<clinit>()V#Put(Z,STATIC,Lrandoop/FailureSet;,$assertionsDisabled)#7
randoop.FailureSet.<clinit>()V#Return(V)#8
randoop.AbstractGenerator.explore()V#Dup(1,0)#100
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,1)#101
randoop.AbstractGenerator.explore()V#Invoke(SPECIAL,Lrandoop/FailureSet;,<init>,(Lrandoop/ExecutableSequence;)V)#102
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#New(Ljava/util/LinkedHashSet;,0)#3
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#Dup(1,0)#4
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#5
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#Put(Ljava/util/Set;,NONSTATIC,Lrandoop/FailureSet;,failures)#6
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#7
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getFailureIndex,()I)#8
randoop.ExecutableSequence.getFailureIndex()I#Constant(I,0)#0
randoop.ExecutableSequence.getFailureIndex()I#LocalStore(I,1)#1
randoop.ExecutableSequence.getFailureIndex()I#Goto(14)#2
randoop.ExecutableSequence.getFailureIndex()I#LocalLoad(I,1)#14
randoop.ExecutableSequence.getFailureIndex()I#LocalLoad(Ljava/lang/Object;,0)#15
randoop.ExecutableSequence.getFailureIndex()I#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#16
randoop.ExecutableSequence.getFailureIndex()I#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#17
randoop.ExecutableSequence.getFailureIndex()I#ConditionalBranch(I,lt,3)#18
randoop.ExecutableSequence.getFailureIndex()I#LocalLoad(Ljava/lang/Object;,0)#3
randoop.ExecutableSequence.getFailureIndex()I#LocalLoad(I,1)#4
randoop.ExecutableSequence.getFailureIndex()I#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasFailure,(I)Z)#5
randoop.ExecutableSequence.getFailureIndex()I#Constant(I,0)#6
randoop.ExecutableSequence.getFailureIndex()I#ConditionalBranch(I,eq,10)#7
randoop.ExecutableSequence.getFailureIndex()I#LocalLoad(I,1)#10
randoop.ExecutableSequence.getFailureIndex()I#Constant(I,1)#11
randoop.ExecutableSequence.getFailureIndex()I#BinaryOp(I,add)#12
randoop.ExecutableSequence.getFailureIndex()I#LocalStore(I,1)#13
randoop.ExecutableSequence.getFailureIndex()I#Constant(I,-1)#19
randoop.ExecutableSequence.getFailureIndex()I#Return(I)#20
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#LocalStore(I,2)#9
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#10
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#Constant(I,0)#11
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ge,14)#12
randoop.FailureSet.<init>(Lrandoop/ExecutableSequence;)V#Return(V)#13
randoop.AbstractGenerator.explore()V#LocalStore(Ljava/lang/Object;,2)#103
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,2)#104
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/FailureSet;,getFailures,()Ljava/util/Set;)#105
randoop.FailureSet.getFailures()Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.FailureSet.getFailures()Ljava/util/Set;#Get(Ljava/util/Set;,NONSTATIC,Lrandoop/FailureSet;,failures)#1
randoop.FailureSet.getFailures()Ljava/util/Set;#Return(Ljava/lang/Object;)#2
randoop.AbstractGenerator.explore()V#Invoke(INTERFACE,Ljava/util/Set;,size,()I)#106
randoop.AbstractGenerator.explore()V#Constant(I,0)#107
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,le,115)#108
randoop.AbstractGenerator.explore()V#Get(Ljava/io/FileWriter;,STATIC,Lrandoop/main/GenInputsAbstract;,expfile)#115
randoop.AbstractGenerator.explore()V#Constant(L;,null)#116
randoop.AbstractGenerator.explore()V#ConditionalBranch(Ljava/lang/Object;,eq,129)#117
randoop.AbstractGenerator.explore()V#Constant(I,1)#129
randoop.AbstractGenerator.explore()V#LocalStore(I,3)#130
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#131
randoop.AbstractGenerator.explore()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/AbstractGenerator;,outputTestFilters)#132
randoop.AbstractGenerator.explore()V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#133
randoop.AbstractGenerator.explore()V#LocalStore(Ljava/lang/Object;,5)#134
randoop.AbstractGenerator.explore()V#Goto(149)#135
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,5)#149
randoop.AbstractGenerator.explore()V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#150
randoop.AbstractGenerator.explore()V#Constant(I,0)#151
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,ne,136)#152
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,5)#136
randoop.AbstractGenerator.explore()V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#137
randoop.AbstractGenerator.explore()V#CheckCast(Lrandoop/ITestFilter;)#138
randoop.AbstractGenerator.explore()V#LocalStore(Ljava/lang/Object;,4)#139
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,4)#140
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,1)#141
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,2)#142
randoop.AbstractGenerator.explore()V#Invoke(INTERFACE,Lrandoop/ITestFilter;,outputSequence,(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z)#143
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Constant(Ljava/lang/String;,"outputSequence")#0
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#LocalLoad(Ljava/lang/Object;,1)#2
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasNonExecutedStatements,()Z)#3
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Constant(I,0)#4
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#ConditionalBranch(I,eq,11)#5
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenInputsAbstract;,output_tests)#11
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Constant(Ljava/lang/String;,"all")#12
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Invoke(VIRTUAL,Ljava/lang/String;,equals,(Ljava/lang/Object;)Z)#13
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Constant(I,0)#14
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#ConditionalBranch(I,eq,20)#15
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Constant(Ljava/lang/String;,"output_tests==all@outputSequence")#16
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#17
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Constant(I,1)#18
randoop.DefaultTestFilter.outputSequence(Lrandoop/ExecutableSequence;Lrandoop/FailureSet;)Z#Return(I)#19
randoop.AbstractGenerator.explore()V#Constant(I,0)#144
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,ne,149)#145
randoop.AbstractGenerator.explore()V#LocalLoad(I,3)#153
randoop.AbstractGenerator.explore()V#Constant(I,0)#154
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,eq,161)#155
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#156
randoop.AbstractGenerator.explore()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/AbstractGenerator;,outSeqs)#157
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,1)#158
randoop.AbstractGenerator.explore()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#159
randoop.AbstractGenerator.explore()V#Pop(1)#160
randoop.AbstractGenerator.explore()V#Get(Z,STATIC,Lrandoop/AbstractGenerator;,dump_sequences)#161
randoop.AbstractGenerator.explore()V#Constant(I,0)#162
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,eq,187)#163
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#187
randoop.AbstractGenerator.explore()V#Constant(I,0)#188
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,eq,210)#189
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#58
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,boxedType,(Ljava/lang/Class;)Ljava/lang/Class;)#59
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,1)#60
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,1)#16
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Return(I)#17
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,3)#37
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,4)#38
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#39
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Pop(1)#40
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,5)#49
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#50
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#CheckCast(Ljava/lang/Class;)#51
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalStore(Ljava/lang/Object;,4)#52
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,0)#53
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Get(Lrandoop/util/IMultiMap;,NONSTATIC,Lrandoop/SubTypeSet;,subTypesWithsequences)#54
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#55
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,4)#56
randoop.SubTypeSet.addQueryType(Ljava/lang/Class;)V#Invoke(INTERFACE,Lrandoop/util/IMultiMap;,add,(Ljava/lang/Object;Ljava/lang/Object;)V)#57
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,5)#48
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#49
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#CheckCast(Ljava/lang/Class;)#50
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,4)#51
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,3)#52
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,0)#53
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Get(Ljava/util/Map;,NONSTATIC,Lrandoop/SequenceCollection;,activeSequences)#54
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,4)#55
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/Map;,get,(Ljava/lang/Object;)Ljava/lang/Object;)#56
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#CheckCast(Lrandoop/util/SimpleList;)#57
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#58
randoop.SequenceCollection.getSequencesForType(Ljava/lang/Class;Z)Lrandoop/util/SimpleList;#Pop(1)#59
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"selectinputs-null-ratio")#329
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#330
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,10)#331
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#332
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,387)#333
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(D,STATIC,Lrandoop/main/GenInputsAbstract;,null_ratio)#334
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(D,0.0)#335
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Comparison(D,cmpl)#336
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#337
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,387)#338
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"NOT null_ratio@selectinputs-null-ratio")#387
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#388
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(L;,null)#389
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,12)#390
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"selectInputs-smalltests")#391
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#392
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,small_tests)#393
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#394
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,403)#395
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"NO small_tests@selectInputs-smalltests")#403
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#404
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,11)#405
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Lrandoop/util/Randomness;,randomMember,(Lrandoop/util/SimpleList;)Ljava/lang/Object;)#406
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#Constant(L;,null)#1
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#ConditionalBranch(Ljava/lang/Object;,eq,7)#2
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#3
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#4
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#Constant(I,0)#5
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#ConditionalBranch(I,ne,12)#6
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#12
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#14
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#Invoke(STATIC,Lrandoop/util/Randomness;,nextRandomInt,(I)I)#15
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#16
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,1)#0
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Constant(I,0)#1
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#ConditionalBranch(I,lt,9)#2
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,1)#3
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Get(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#5
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Constant(I,1)#6
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#BinaryOp(I,sub)#7
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#ConditionalBranch(I,le,14)#8
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Constant(I,0)#14
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalStore(I,2)#15
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Constant(I,0)#16
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalStore(I,3)#17
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Goto(44)#18
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,3)#44
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#45
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Get([I,NONSTATIC,Lrandoop/util/ListOfLists;,accumulatedSize)#46
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#ArrayLength()#47
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#ConditionalBranch(I,lt,19)#48
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,1)#19
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#20
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Get([I,NONSTATIC,Lrandoop/util/ListOfLists;,accumulatedSize)#21
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,3)#22
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#ArrayLoad(I)#23
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#ConditionalBranch(I,ge,35)#24
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#25
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/util/ListOfLists;,lists)#26
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,3)#27
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#28
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#CheckCast(Lrandoop/util/SimpleList;)#29
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,1)#30
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,2)#31
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#BinaryOp(I,sub)#32
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#33
randoop.util.ArrayListSimpleList.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ArrayListSimpleList.get(I)Ljava/lang/Object;#Get(Ljava/util/ArrayList;,NONSTATIC,Lrandoop/util/ArrayListSimpleList;,theList)#1
randoop.util.ArrayListSimpleList.get(I)Ljava/lang/Object;#LocalLoad(I,1)#2
randoop.util.ArrayListSimpleList.get(I)Ljava/lang/Object;#Invoke(VIRTUAL,Ljava/util/ArrayList;,get,(I)Ljava/lang/Object;)#3
randoop.util.ArrayListSimpleList.get(I)Ljava/lang/Object;#Return(Ljava/lang/Object;)#4
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Return(Ljava/lang/Object;)#34
randoop.util.Randomness.randomMember(Lrandoop/util/SimpleList;)Ljava/lang/Object;#Return(Ljava/lang/Object;)#17
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#CheckCast(Lrandoop/Sequence;)#407
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,12)#408
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,COMPATIBLE_TYPE)#409
randoop.util.Reflection$Match.<clinit>()V#New(Lrandoop/util/Reflection$Match;,0)#0
randoop.util.Reflection$Match.<clinit>()V#Dup(1,0)#1
randoop.util.Reflection$Match.<clinit>()V#Constant(Ljava/lang/String;,"EXACT_TYPE")#2
randoop.util.Reflection$Match.<clinit>()V#Constant(I,0)#3
randoop.util.Reflection$Match.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/Reflection$Match;,<init>,(Ljava/lang/String;I)V)#4
randoop.util.Reflection$Match.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Reflection$Match.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.util.Reflection$Match.<init>(Ljava/lang/String;I)V#LocalLoad(I,2)#2
randoop.util.Reflection$Match.<init>(Ljava/lang/String;I)V#Invoke(SPECIAL,Ljava/lang/Enum;,<init>,(Ljava/lang/String;I)V)#3
randoop.util.Reflection$Match.<init>(Ljava/lang/String;I)V#Return(V)#4
randoop.util.Reflection$Match.<clinit>()V#Put(Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,EXACT_TYPE)#5
randoop.util.Reflection$Match.<clinit>()V#New(Lrandoop/util/Reflection$Match;,0)#6
randoop.util.Reflection$Match.<clinit>()V#Dup(1,0)#7
randoop.util.Reflection$Match.<clinit>()V#Constant(Ljava/lang/String;,"COMPATIBLE_TYPE")#8
randoop.util.Reflection$Match.<clinit>()V#Constant(I,1)#9
randoop.util.Reflection$Match.<clinit>()V#Invoke(SPECIAL,Lrandoop/util/Reflection$Match;,<init>,(Ljava/lang/String;I)V)#10
randoop.util.Reflection$Match.<clinit>()V#Put(Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,COMPATIBLE_TYPE)#11
randoop.util.Reflection$Match.<clinit>()V#Constant(I,2)#12
randoop.util.Reflection$Match.<clinit>()V#New([Lrandoop/util/Reflection$Match;,1)#13
randoop.util.Reflection$Match.<clinit>()V#Dup(1,0)#14
randoop.util.Reflection$Match.<clinit>()V#Constant(I,0)#15
randoop.util.Reflection$Match.<clinit>()V#Get(Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,EXACT_TYPE)#16
randoop.util.Reflection$Match.<clinit>()V#ArrayStore(Ljava/lang/Object;)#17
randoop.util.Reflection$Match.<clinit>()V#Dup(1,0)#18
randoop.util.Reflection$Match.<clinit>()V#Constant(I,1)#19
randoop.util.Reflection$Match.<clinit>()V#Get(Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,COMPATIBLE_TYPE)#20
randoop.util.Reflection$Match.<clinit>()V#ArrayStore(Ljava/lang/Object;)#21
randoop.util.Reflection$Match.<clinit>()V#Put([Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,ENUM$VALUES)#22
randoop.util.Reflection$Match.<clinit>()V#Return(V)#23
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,13)#410
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,12)#411
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,9)#412
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,13)#413
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Lrandoop/Sequence;,randomVariableForTypeLastStatement,(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;)#414
randoop.Sequence.randomVariableForTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.randomVariableForTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,1)#1
randoop.Sequence.randomVariableForTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,2)#2
randoop.Sequence.randomVariableForTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#Invoke(VIRTUAL,Lrandoop/Sequence;,randomVariableOfTypeLastStatement,(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;)#3
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,1)#1
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,2)#2
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#Invoke(VIRTUAL,Lrandoop/Sequence;,valuesAppearingInLastStatement,(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;)#3
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#0
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Constant(L;,null)#1
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,eq,6)#2
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#3
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Constant(L;,null)#4
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,ne,11)#5
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#New(Ljava/util/ArrayList;,0)#11
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Dup(1,0)#12
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementVariables)#14
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#15
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#16
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,3)#17
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Constant(I,0)#18
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalStore(I,4)#19
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Goto(55)#20
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(I,4)#55
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#56
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementVariables)#57
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#58
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#ConditionalBranch(I,lt,21)#59
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#21
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementVariables)#22
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(I,4)#23
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#24
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#CheckCast(Lrandoop/Variable;)#25
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,5)#26
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#27
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#28
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#29
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Get(I,NONSTATIC,Lrandoop/Variable;,index)#30
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#31
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#CheckCast(Lrandoop/Statement;)#32
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalStore(Ljava/lang/Object;,6)#33
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,6)#34
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(VIRTUAL,Lrandoop/Statement;,isVoidMethodCall,()Z)#35
randoop.Statement.isVoidMethodCall()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Statement.isVoidMethodCall()Z#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#1
randoop.Statement.isVoidMethodCall()Z#Invoke(INTERFACE,Lrandoop/StatementKind;,getOutputType,()Ljava/lang/Class;)#2
randoop.Statement.isVoidMethodCall()Z#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#3
randoop.Statement.isVoidMethodCall()Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#4
randoop.Statement.isVoidMethodCall()Z#Return(I)#5
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Constant(I,0)#36
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#ConditionalBranch(I,ne,51)#37
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#38
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,6)#39
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#40
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(INTERFACE,Lrandoop/StatementKind;,getOutputType,()Ljava/lang/Class;)#41
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,1)#42
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#43
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(SPECIAL,Lrandoop/Sequence;,varTypeMatches,(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z)#44
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#Invoke(STATIC,Lrandoop/Sequence;,$SWITCH_TABLE$randoop$util$Reflection$Match,()[I)#0
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Get([I,STATIC,Lrandoop/Sequence;,$SWITCH_TABLE$randoop$util$Reflection$Match)#0
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Dup(1,0)#1
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Constant(L;,null)#2
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#ConditionalBranch(Ljava/lang/Object;,eq,5)#3
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Pop(1)#5
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Invoke(STATIC,Lrandoop/util/Reflection$Match;,values,()[Lrandoop/util/Reflection$Match;)#6
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#Get([Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,ENUM$VALUES)#0
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#Dup(1,0)#1
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#LocalStore(Ljava/lang/Object;,0)#2
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#Constant(I,0)#3
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#ArrayLength()#5
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#Dup(1,0)#6
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#LocalStore(I,1)#7
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#New([Lrandoop/util/Reflection$Match;,1)#8
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#Dup(1,0)#9
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#LocalStore(Ljava/lang/Object;,2)#10
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#Constant(I,0)#11
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#LocalLoad(I,1)#12
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#Invoke(STATIC,Ljava/lang/System;,arraycopy,(Ljava/lang/Object;ILjava/lang/Object;II)V)#13
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#LocalLoad(Ljava/lang/Object;,2)#14
randoop.util.Reflection$Match.values()[Lrandoop/util/Reflection$Match;#Return(Ljava/lang/Object;)#15
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#ArrayLength()#7
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#New([I,1)#8
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#LocalStore(Ljava/lang/Object;,0)#9
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#LocalLoad(Ljava/lang/Object;,0)#10
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Get(Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,COMPATIBLE_TYPE)#11
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Invoke(VIRTUAL,Lrandoop/util/Reflection$Match;,ordinal,()I)#12
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Constant(I,2)#13
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#ArrayStore(I)#14
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Goto(17)#15
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#LocalLoad(Ljava/lang/Object;,0)#17
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Get(Lrandoop/util/Reflection$Match;,STATIC,Lrandoop/util/Reflection$Match;,EXACT_TYPE)#18
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Invoke(VIRTUAL,Lrandoop/util/Reflection$Match;,ordinal,()I)#19
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Constant(I,1)#20
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#ArrayStore(I)#21
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Goto(24)#22
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#LocalLoad(Ljava/lang/Object;,0)#24
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Dup(1,0)#25
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Put([I,STATIC,Lrandoop/Sequence;,$SWITCH_TABLE$randoop$util$Reflection$Match)#26
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Return(Ljava/lang/Object;)#27
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#LocalLoad(Ljava/lang/Object;,3)#1
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#Invoke(VIRTUAL,Lrandoop/util/Reflection$Match;,ordinal,()I)#2
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#ArrayLoad(I)#3
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#Switch(13,1,9,2,5)#4
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#LocalLoad(Ljava/lang/Object;,1)#5
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#LocalLoad(Ljava/lang/Object;,2)#6
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,canBeUsedAs,(Ljava/lang/Class;Ljava/lang/Class;)Z)#7
randoop.Sequence.varTypeMatches(Ljava/lang/Class;Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Z#Return(I)#8
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Constant(I,0)#45
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#ConditionalBranch(I,eq,51)#46
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#47
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,5)#48
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#49
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Pop(1)#50
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(I,4)#51
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Constant(I,1)#52
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#BinaryOp(I,add)#53
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalStore(I,4)#54
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#60
randoop.Sequence.valuesAppearingInLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Ljava/util/List;#Return(Ljava/lang/Object;)#61
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalStore(Ljava/lang/Object;,3)#4
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,3)#5
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#Invoke(INTERFACE,Ljava/util/List;,isEmpty,()Z)#6
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#Constant(I,0)#7
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#ConditionalBranch(I,eq,11)#8
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,3)#11
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#Invoke(STATIC,Lrandoop/util/Randomness;,randomMember,(Ljava/util/List;)Ljava/lang/Object;)#12
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#CheckCast(Lrandoop/Variable;)#13
randoop.Sequence.randomVariableOfTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#Return(Ljava/lang/Object;)#14
randoop.Sequence.randomVariableForTypeLastStatement(Ljava/lang/Class;Lrandoop/util/Reflection$Match;)Lrandoop/Variable;#Return(Ljava/lang/Object;)#4
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,14)#415
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,14)#416
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(L;,null)#417
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(Ljava/lang/Object;,ne,434)#418
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,8)#434
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#435
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,459)#436
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,1)#437
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Instanceof(Lrandoop/RMethod;)#438
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#439
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,459)#440
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"selectinputs-alias")#459
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#460
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(D,STATIC,Lrandoop/main/GenInputsAbstract;,alias_ratio)#461
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(D,0.0)#462
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Comparison(D,cmpl)#463
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#464
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,501)#465
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(Ljava/lang/String;,"NOT alias_ratio@selectinputs-alias")#501
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#502
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,5)#503
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,4)#504
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,14)#505
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(I,NONSTATIC,Lrandoop/Variable;,index)#506
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#BinaryOp(I,add)#507
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Ljava/lang/Integer;,valueOf,(I)Ljava/lang/Integer;)#508
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#509
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Pop(1)#510
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,3)#511
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,12)#512
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#513
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Pop(1)#514
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,4)#515
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,12)#516
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#517
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#BinaryOp(I,add)#518
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(I,4)#519
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,8)#520
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,1)#521
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#BinaryOp(I,add)#522
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(I,8)#523
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,5)#12
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#13
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#CheckCast(Lrandoop/Sequence;)#14
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,4)#15
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(I,2)#16
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,4)#17
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Get(I,NONSTATIC,Lrandoop/Sequence;,savedHashCode)#18
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#BinaryOp(I,add)#19
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalStore(I,2)#20
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(I,3)#21
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,4)#22
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Get(I,NONSTATIC,Lrandoop/Sequence;,savedNetSize)#23
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#BinaryOp(I,add)#24
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalStore(I,3)#25
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#26
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,4)#27
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#28
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#29
randoop.Sequence.concatenate(Ljava/util/List;)Lrandoop/Sequence;#Pop(1)#30
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,6)#61
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#62
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#CheckCast(Ljava/lang/Integer;)#63
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,5)#64
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,3)#65
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,5)#66
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Ljava/lang/Integer;,intValue,()I)#67
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,getVariable,(I)Lrandoop/Variable;)#68
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,7)#69
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,4)#70
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,7)#71
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#72
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Pop(1)#73
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#33
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(I,3)#34
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#35
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#CheckCast(Lrandoop/Variable;)#36
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/Variable;,sequence)#37
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#38
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,eq,74)#39
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,0)#74
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#75
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,2)#76
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(I,3)#77
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#78
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#CheckCast(Lrandoop/Variable;)#79
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Get(I,NONSTATIC,Lrandoop/Variable;,index)#80
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#81
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#CheckCast(Lrandoop/Statement;)#82
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#83
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Lrandoop/StatementKind;,getOutputType,()Ljava/lang/Class;)#84
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalStore(Ljava/lang/Object;,4)#85
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,4)#86
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Constant(L;,null)#87
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#ConditionalBranch(Ljava/lang/Object;,ne,119)#88
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,4)#119
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(Ljava/lang/Object;,1)#120
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Lrandoop/StatementKind;,getInputTypes,()Ljava/util/List;)#121
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(I,3)#122
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#123
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#CheckCast(Ljava/lang/Class;)#124
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Invoke(STATIC,Lrandoop/util/Reflection;,canBeUsedAs,(Ljava/lang/Class;Ljava/lang/Class;)Z)#125
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Constant(I,0)#126
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#ConditionalBranch(I,ne,178)#127
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalLoad(I,3)#178
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#Constant(I,1)#179
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#BinaryOp(I,add)#180
randoop.Sequence.checkInputs(Lrandoop/StatementKind;Ljava/util/List;)V#LocalStore(I,3)#181
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,5)#13
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#14
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#CheckCast(Lrandoop/Variable;)#15
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,4)#16
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,3)#17
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#18
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#19
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,4)#20
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(STATIC,Lrandoop/Sequence;,getRelativeIndexForVariable,(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;)#21
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#LocalLoad(Ljava/lang/Object;,1)#0
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#Get(I,NONSTATIC,Lrandoop/Variable;,index)#1
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#LocalLoad(I,0)#2
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#ConditionalBranch(I,lt,8)#3
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#New(Lrandoop/Sequence$RelativeNegativeIndex;,0)#8
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#Dup(1,0)#9
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#LocalLoad(I,0)#10
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#LocalLoad(Ljava/lang/Object;,1)#11
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#Get(I,NONSTATIC,Lrandoop/Variable;,index)#12
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#BinaryOp(I,sub)#13
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#UnaryOp(I,neg)#14
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#Invoke(SPECIAL,Lrandoop/Sequence$RelativeNegativeIndex;,<init>,(I)V)#15
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#LocalLoad(I,1)#2
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#Constant(I,0)#3
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#ConditionalBranch(I,lt,16)#4
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#LocalLoad(Ljava/lang/Object;,0)#16
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#LocalLoad(I,1)#17
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#Put(I,NONSTATIC,Lrandoop/Sequence$RelativeNegativeIndex;,index)#18
randoop.Sequence$RelativeNegativeIndex.<init>(I)V#Return(V)#19
randoop.Sequence.getRelativeIndexForVariable(ILrandoop/Variable;)Lrandoop/Sequence$RelativeNegativeIndex;#Return(Ljava/lang/Object;)#16
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#22
randoop.Sequence.extend(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;#Pop(1)#23
randoop.Statement.hashCode()I#LocalLoad(I,1)#13
randoop.Statement.hashCode()I#Constant(I,13)#14
randoop.Statement.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#15
randoop.Statement.hashCode()I#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#16
randoop.Statement.hashCode()I#LocalLoad(I,2)#17
randoop.Statement.hashCode()I#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#18
randoop.Statement.hashCode()I#CheckCast(Lrandoop/Sequence$RelativeNegativeIndex;)#19
randoop.Statement.hashCode()I#Get(I,NONSTATIC,Lrandoop/Sequence$RelativeNegativeIndex;,index)#20
randoop.Statement.hashCode()I#BinaryOp(I,xor)#21
randoop.Statement.hashCode()I#BinaryOp(I,add)#22
randoop.Statement.hashCode()I#LocalStore(I,1)#23
randoop.Statement.hashCode()I#LocalLoad(I,2)#24
randoop.Statement.hashCode()I#Constant(I,1)#25
randoop.Statement.hashCode()I#BinaryOp(I,add)#26
randoop.Statement.hashCode()I#LocalStore(I,2)#27
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,4)#13
randoop.Sequence.getInputs(I)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#14
randoop.Sequence.getInputs(I)Ljava/util/List;#CheckCast(Lrandoop/Sequence$RelativeNegativeIndex;)#15
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalStore(Ljava/lang/Object;,3)#16
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,2)#17
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#18
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(I,1)#19
randoop.Sequence.getInputs(I)Ljava/util/List;#LocalLoad(Ljava/lang/Object;,3)#20
randoop.Sequence.getInputs(I)Ljava/util/List;#Invoke(VIRTUAL,Lrandoop/Sequence;,getVariableForInput,(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;)#21
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#LocalLoad(I,1)#0
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,2)#1
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#Get(I,NONSTATIC,Lrandoop/Sequence$RelativeNegativeIndex;,index)#2
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#BinaryOp(I,add)#3
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#LocalStore(I,3)#4
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#LocalLoad(I,3)#5
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#Constant(I,0)#6
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#ConditionalBranch(I,ge,19)#7
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#New(Lrandoop/Variable;,0)#19
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#Dup(1,0)#20
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#LocalLoad(Ljava/lang/Object;,0)#21
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#LocalLoad(I,3)#22
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#Invoke(SPECIAL,Lrandoop/Variable;,<init>,(Lrandoop/Sequence;I)V)#23
randoop.Sequence.getVariableForInput(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;#Return(Ljava/lang/Object;)#24
randoop.Sequence.getInputs(I)Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#22
randoop.Sequence.getInputs(I)Ljava/util/List;#Pop(1)#23
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,2)#111
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(I,3)#112
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#113
randoop.Sequence.computeLastStatementInfo()V#CheckCast(Lrandoop/Variable;)#114
randoop.Sequence.computeLastStatementInfo()V#LocalStore(Ljava/lang/Object;,4)#115
randoop.Sequence.computeLastStatementInfo()V#Get(Z,STATIC,Lrandoop/Sequence;,$assertionsDisabled)#116
randoop.Sequence.computeLastStatementInfo()V#Constant(I,0)#117
randoop.Sequence.computeLastStatementInfo()V#ConditionalBranch(I,ne,134)#118
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#134
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementTypes)#135
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,4)#136
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/Variable;,getType,()Ljava/lang/Class;)#137
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#5
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/util/OneMoreElementList;,list)#6
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#LocalLoad(I,1)#7
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#8
randoop.util.OneMoreElementList.get(I)Ljava/lang/Object;#Return(Ljava/lang/Object;)#9
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#138
randoop.Sequence.computeLastStatementInfo()V#Pop(1)#139
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#140
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#141
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#142
randoop.Sequence.computeLastStatementInfo()V#Constant(I,1)#143
randoop.Sequence.computeLastStatementInfo()V#BinaryOp(I,sub)#144
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,1)#145
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#146
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(I,3)#147
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#148
randoop.Sequence.computeLastStatementInfo()V#CheckCast(Lrandoop/Sequence$RelativeNegativeIndex;)#149
randoop.Sequence.computeLastStatementInfo()V#Invoke(VIRTUAL,Lrandoop/Sequence;,getVariableForInput,(ILrandoop/Sequence$RelativeNegativeIndex;)Lrandoop/Variable;)#150
randoop.Sequence.computeLastStatementInfo()V#LocalStore(Ljava/lang/Object;,5)#151
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#152
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementVariables)#153
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,5)#154
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#155
randoop.Sequence.computeLastStatementInfo()V#Pop(1)#156
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(I,3)#157
randoop.Sequence.computeLastStatementInfo()V#Constant(I,1)#158
randoop.Sequence.computeLastStatementInfo()V#BinaryOp(I,add)#159
randoop.Sequence.computeLastStatementInfo()V#LocalStore(I,3)#160
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,7)#183
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#184
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#CheckCast(Lrandoop/Sequence;)#185
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,6)#186
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,6)#187
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#188
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Conversion(J,D)#189
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Put(D,NONSTATIC,Lrandoop/Sequence;,lastTimeUsed)#190
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,7)#215
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#216
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#CheckCast(Lrandoop/Sequence;)#217
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalStore(Ljava/lang/Object;,6)#218
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,0)#219
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Get(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,subsumed_sequences)#220
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#LocalLoad(Ljava/lang/Object;,6)#221
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#222
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Pop(1)#223
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Return(V)#52
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Return(V)#9
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(I,3)#8
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#9
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#CheckCast(Lrandoop/Variable;)#10
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/Variable;,getDeclIndex,()I)#11
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalStore(I,4)#12
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Get(Z,STATIC,Lrandoop/ExecutableSequence;,$assertionsDisabled)#13
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Constant(I,0)#14
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#ConditionalBranch(I,ne,31)#15
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,1)#31
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(I,4)#32
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#33
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#CheckCast(Lrandoop/NormalExecution;)#34
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalStore(Ljava/lang/Object;,5)#35
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,2)#36
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(I,3)#37
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,5)#38
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/NormalExecution;,getRuntimeValue,()Ljava/lang/Object;)#39
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#ArrayStore(Ljava/lang/Object;)#40
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalLoad(I,3)#41
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#Constant(I,1)#42
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#BinaryOp(I,add)#43
randoop.ExecutableSequence.getRuntimeValuesForVars(Ljava/util/List;Ljava/util/List;)[Ljava/lang/Object;#LocalStore(I,3)#44
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,4)#7
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(I,6)#8
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,5)#9
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(I,6)#10
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#ArrayLoad(Ljava/lang/Object;)#11
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#ArrayStore(Ljava/lang/Object;)#12
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(I,6)#13
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Constant(I,1)#14
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#BinaryOp(I,add)#15
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalStore(I,6)#16
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,4)#24
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(I,6)#25
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#ArrayLoad(Ljava/lang/Object;)#26
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Constant(L;,null)#27
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,63)#28
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalLoad(I,6)#63
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#Constant(I,1)#64
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#BinaryOp(I,add)#65
randoop.ExecutableSequence.getRuntimeInputs(Lrandoop/Sequence;Ljava/util/List;ILjava/util/List;[Ljava/lang/Object;)Z#LocalStore(I,6)#66
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Z,STATIC,Lrandoop/ContractCheckingVisitor;,$assertionsDisabled)#20
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#21
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,34)#22
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Goto(58)#44
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(367)#44
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#98
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#99
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,111)#100
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#111
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#112
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#113
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,clearActiveFlag,(I)V)#114
randoop.Sequence.clearActiveFlag(I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.clearActiveFlag(I)V#Get(Ljava/util/BitSet;,NONSTATIC,Lrandoop/Sequence;,activeFlags)#1
randoop.Sequence.clearActiveFlag(I)V#LocalLoad(I,1)#2
randoop.Sequence.clearActiveFlag(I)V#Invoke(VIRTUAL,Ljava/util/BitSet;,clear,(I)V)#3
randoop.Sequence.clearActiveFlag(I)V#Return(V)#4
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#115
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Instanceof(Ljava/lang/String;)#116
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#117
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,126)#118
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#126
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalStore(I,6)#127
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#128
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Instanceof(Ljava/lang/String;)#129
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#130
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,139)#131
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#139
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalStore(I,7)#140
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(I,6)#141
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#142
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ne,183)#143
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(I,7)#144
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#145
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ne,183)#146
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,0)#147
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Get(Ljava/util/Set;,NONSTATIC,Lrandoop/ForwardGenerator;,runtimePrimitivesSeen)#148
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#149
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#150
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#151
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,183)#152
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,3)#25
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#26
randoop.SubTypeSet.add(Ljava/lang/Class;)V#CheckCast(Ljava/lang/Class;)#27
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalStore(Ljava/lang/Object;,2)#28
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#29
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,2)#30
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(STATIC,Lrandoop/util/Reflection;,canBeUsedAs,(Ljava/lang/Class;Ljava/lang/Class;)Z)#31
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Constant(I,0)#32
randoop.SubTypeSet.add(Ljava/lang/Class;)V#ConditionalBranch(I,eq,47)#33
randoop.Sequence.$SWITCH_TABLE$randoop$util$Reflection$Match()[I#Return(Ljava/lang/Object;)#4
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,1)#441
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#CheckCast(Lrandoop/RMethod;)#442
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Lrandoop/RMethod;,isStatic,()Z)#443
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#444
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,ne,459)#445
randoop.RMethod.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RMethod.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/RMethod;,outputTypeCached)#1
randoop.RMethod.getOutputType()Ljava/lang/Class;#Constant(L;,null)#2
randoop.RMethod.getOutputType()Ljava/lang/Class;#ConditionalBranch(Ljava/lang/Object;,ne,9)#3
randoop.RMethod.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.RMethod.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#5
randoop.RMethod.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#6
randoop.RMethod.getOutputType()Ljava/lang/Class;#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getReturnType,()Ljava/lang/Class;)#7
randoop.RMethod.getOutputType()Ljava/lang/Class;#Put(Ljava/lang/Class;,NONSTATIC,Lrandoop/RMethod;,outputTypeCached)#8
randoop.RMethod.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#9
randoop.RMethod.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/RMethod;,outputTypeCached)#10
randoop.RMethod.getOutputType()Ljava/lang/Class;#Return(Ljava/lang/Object;)#11
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(Z,STATIC,Lrandoop/RMethod;,$assertionsDisabled)#0
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#1
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,ne,13)#2
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(L;,null)#13
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,3)#14
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#15
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/RMethod;,getInputTypes,()Ljava/util/List;)#16
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(INTERFACE,Ljava/util/List;,size,()I)#17
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(I,4)#18
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#19
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(I,5)#20
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#21
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/RMethod;,isStatic,()Z)#22
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#23
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,ne,35)#24
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,4)#35
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New([Ljava/lang/Object;,1)#36
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,6)#37
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#38
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(I,7)#39
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Goto(53)#40
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,7)#53
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,6)#54
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ArrayLength()#55
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,lt,41)#56
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,6)#41
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,7)#42
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,1)#43
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,7)#44
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,5)#45
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#BinaryOp(I,add)#46
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ArrayLoad(Ljava/lang/Object;)#47
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ArrayStore(Ljava/lang/Object;)#48
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,7)#49
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,1)#50
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#BinaryOp(I,add)#51
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(I,7)#52
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New(Lrandoop/util/MethodReflectionCode;,0)#57
randoop.util.MethodReflectionCode.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@7b61aaa4)#0
randoop.util.MethodReflectionCode.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.util.MethodReflectionCode.<clinit>()V#Constant(I,0)#2
randoop.util.MethodReflectionCode.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.util.MethodReflectionCode.<clinit>()V#Constant(I,1)#4
randoop.util.MethodReflectionCode.<clinit>()V#Goto(7)#5
randoop.util.MethodReflectionCode.<clinit>()V#Put(Z,STATIC,Lrandoop/util/MethodReflectionCode;,$assertionsDisabled)#7
randoop.util.MethodReflectionCode.<clinit>()V#Return(V)#8
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#58
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#59
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#60
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,3)#61
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,6)#62
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/util/MethodReflectionCode;,<init>,(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V)#63
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#Invoke(SPECIAL,Lrandoop/util/ReflectionCode;,<init>,()V)#1
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#Constant(L;,null)#3
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,3)#10
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#Constant(L;,null)#11
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#ConditionalBranch(Ljava/lang/Object;,ne,18)#12
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#18
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,2)#19
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#Put(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,receiver)#20
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#21
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,1)#22
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#Put(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,method)#23
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#24
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,3)#25
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#Put([Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,inputs)#26
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#LocalLoad(Ljava/lang/Object;,0)#27
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#Invoke(SPECIAL,Lrandoop/util/MethodReflectionCode;,checkRep,()V)#28
randoop.util.MethodReflectionCode.checkRep()V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,debug_checks)#0
randoop.util.MethodReflectionCode.checkRep()V#Constant(I,0)#1
randoop.util.MethodReflectionCode.checkRep()V#ConditionalBranch(I,ne,4)#2
randoop.util.MethodReflectionCode.checkRep()V#Return(V)#3
randoop.util.MethodReflectionCode.<init>(Ljava/lang/reflect/Method;Ljava/lang/Object;[Ljava/lang/Object;)V#Return(V)#29
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,7)#64
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#65
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#66
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(I,NONSTATIC,Lrandoop/RMethod;,calls_num)#67
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,1)#68
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#BinaryOp(I,add)#69
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Put(I,NONSTATIC,Lrandoop/RMethod;,calls_num)#70
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Ljava/lang/System;,nanoTime,()J)#71
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(J,8)#72
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,7)#73
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,2)#74
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Lrandoop/util/ReflectionExecutor;,executeReflectionCode,(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;)#75
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Lrandoop/util/MethodReflectionCode;,hasRunAlready,()Z)#1
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Constant(I,0)#2
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(I,eq,15)#3
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#15
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Lrandoop/util/MethodReflectionCode;,setRunAlready,()V)#16
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#17
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,method)#18
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,isAccessible,()Z)#19
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Constant(I,0)#20
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(I,ne,35)#21
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get(Z,STATIC,Lrandoop/util/MethodReflectionCode;,$assertionsDisabled)#35
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Constant(I,0)#36
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(I,ne,46)#37
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#46
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#47
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,method)#48
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#49
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,receiver)#50
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#51
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get([Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,inputs)#52
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,invoke,(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;)#53
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Put(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,retval)#54
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#55
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,receiver)#56
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Constant(L;,null)#57
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(Ljava/lang/Object;,ne,104)#58
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#59
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Invoke(SPECIAL,Lrandoop/util/MethodReflectionCode;,isInstanceMethod,()Z)#60
randoop.util.MethodReflectionCode.isInstanceMethod()Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.MethodReflectionCode.isInstanceMethod()Z#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,method)#1
randoop.util.MethodReflectionCode.isInstanceMethod()Z#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,getModifiers,()I)#2
randoop.util.MethodReflectionCode.isInstanceMethod()Z#Invoke(STATIC,Ljava/lang/reflect/Modifier;,isStatic,(I)Z)#3
randoop.util.MethodReflectionCode.isInstanceMethod()Z#Constant(I,0)#4
randoop.util.MethodReflectionCode.isInstanceMethod()Z#ConditionalBranch(I,eq,8)#5
randoop.util.MethodReflectionCode.isInstanceMethod()Z#Constant(I,0)#6
randoop.util.MethodReflectionCode.isInstanceMethod()Z#Goto(9)#7
randoop.util.MethodReflectionCode.isInstanceMethod()Z#Return(I)#9
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Constant(I,0)#61
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(I,eq,104)#62
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#104
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,retval)#105
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Constant(L;,null)#106
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(Ljava/lang/Object;,eq,117)#107
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#108
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,exceptionThrown)#109
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Constant(L;,null)#110
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(Ljava/lang/Object;,eq,117)#111
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Return(V)#117
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,10)#76
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#77
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#78
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(J,NONSTATIC,Lrandoop/RMethod;,calls_time)#79
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Ljava/lang/System;,nanoTime,()J)#80
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(J,8)#81
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#BinaryOp(J,sub)#82
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#BinaryOp(J,add)#83
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Put(J,NONSTATIC,Lrandoop/RMethod;,calls_time)#84
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,10)#85
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(L;,null)#86
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(Ljava/lang/Object;,ne,95)#87
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New(Lrandoop/NormalExecution;,0)#88
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#89
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,7)#90
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/MethodReflectionCode;,getReturnVariable,()Ljava/lang/Object;)#91
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Invoke(VIRTUAL,Lrandoop/util/MethodReflectionCode;,hasRunAlready,()Z)#1
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Constant(I,0)#2
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#ConditionalBranch(I,ne,9)#3
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#9
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,receiver)#10
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Constant(L;,null)#11
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#ConditionalBranch(Ljava/lang/Object;,ne,33)#12
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#13
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,retval)#14
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Constant(L;,null)#15
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#ConditionalBranch(Ljava/lang/Object;,eq,33)#16
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#17
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Invoke(SPECIAL,Lrandoop/util/MethodReflectionCode;,isInstanceMethod,()Z)#18
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Constant(I,0)#19
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#ConditionalBranch(I,eq,33)#20
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#33
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,retval)#34
randoop.util.MethodReflectionCode.getReturnVariable()Ljava/lang/Object;#Return(Ljava/lang/Object;)#35
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(J,0)#92
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/NormalExecution;,<init>,(Ljava/lang/Object;J)V)#93
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#94
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,4)#58
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Lrandoop/RMethod;)#59
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/RMethod;,getMethod,()Ljava/lang/reflect/Method;)#60
randoop.RMethod.getMethod()Ljava/lang/reflect/Method;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RMethod.getMethod()Ljava/lang/reflect/Method;#Get(Ljava/lang/reflect/Method;,NONSTATIC,Lrandoop/RMethod;,method)#1
randoop.RMethod.getMethod()Ljava/lang/reflect/Method;#Return(Ljava/lang/Object;)#2
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,8)#61
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,8)#62
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Ljava/lang/reflect/Method;,STATIC,Lrandoop/RegressionCaptureVisitor;,objectHashCode)#63
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,equals,(Ljava/lang/Object;)Z)#64
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#65
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,68)#66
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,8)#68
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Ljava/lang/reflect/Method;,STATIC,Lrandoop/RegressionCaptureVisitor;,objectToString)#69
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Ljava/lang/reflect/Method;,equals,(Ljava/lang/Object;)Z)#70
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#71
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,74)#72
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#201
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#202
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#New(Lrandoop/ObjectCheck;,0)#203
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Dup(1,0)#204
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#New(Lrandoop/IsNotNull;,0)#205
randoop.IsNotNull.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@e08db59a)#0
randoop.IsNotNull.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.IsNotNull.<clinit>()V#Constant(I,0)#2
randoop.IsNotNull.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.IsNotNull.<clinit>()V#Constant(I,1)#4
randoop.IsNotNull.<clinit>()V#Goto(7)#5
randoop.IsNotNull.<clinit>()V#Put(Z,STATIC,Lrandoop/IsNotNull;,$assertionsDisabled)#7
randoop.IsNotNull.<clinit>()V#Return(V)#8
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Dup(1,0)#206
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(SPECIAL,Lrandoop/IsNotNull;,<init>,()V)#207
randoop.IsNotNull.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.IsNotNull.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.IsNotNull.<init>()V#Return(V)#2
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#208
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#209
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#New([Lrandoop/Variable;,1)#210
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Dup(1,0)#211
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#212
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,9)#213
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ArrayStore(Ljava/lang/Object;)#214
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(SPECIAL,Lrandoop/ObjectCheck;,<init>,(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V)#215
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Constant(L;,null)#3
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,3)#10
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#ArrayLength()#11
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,1)#12
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Invoke(INTERFACE,Lrandoop/ObjectContract;,getArity,()I)#13
randoop.IsNotNull.getArity()I#Constant(I,1)#0
randoop.IsNotNull.getArity()I#Return(I)#1
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#ConditionalBranch(I,eq,20)#14
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,0)#20
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(I,2)#21
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Put(I,NONSTATIC,Lrandoop/ObjectCheck;,stmt_no)#22
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,0)#23
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,1)#24
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Put(Lrandoop/ObjectContract;,NONSTATIC,Lrandoop/ObjectCheck;,contract)#25
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,0)#26
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,3)#27
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#ArrayLength()#28
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#New([Lrandoop/Variable;,1)#29
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Put([Lrandoop/Variable;,NONSTATIC,Lrandoop/ObjectCheck;,vars)#30
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Constant(I,0)#31
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalStore(I,4)#32
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,3)#33
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Dup(1,0)#34
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalStore(Ljava/lang/Object;,8)#35
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#ArrayLength()#36
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalStore(I,7)#37
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Constant(I,0)#38
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalStore(I,6)#39
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Goto(58)#40
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(I,6)#58
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(I,7)#59
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#ConditionalBranch(I,lt,41)#60
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,8)#41
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(I,6)#42
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#ArrayLoad(Ljava/lang/Object;)#43
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalStore(Ljava/lang/Object;,5)#44
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,0)#45
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Get([Lrandoop/Variable;,NONSTATIC,Lrandoop/ObjectCheck;,vars)#46
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(I,4)#47
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(I,4)#48
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Constant(I,1)#49
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#BinaryOp(I,add)#50
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalStore(I,4)#51
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(Ljava/lang/Object;,5)#52
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#ArrayStore(Ljava/lang/Object;)#53
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalLoad(I,6)#54
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Constant(I,1)#55
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#BinaryOp(I,add)#56
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#LocalStore(I,6)#57
randoop.ObjectCheck.<init>(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V#Return(V)#61
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#216
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,addCheck,(ILrandoop/Check;Z)V)#217
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#1
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(I,1)#2
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Invoke(VIRTUAL,Lrandoop/Sequence;,checkIndex,(I)V)#3
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(Ljava/lang/Object;,2)#4
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Instanceof(Lrandoop/ExpectedExceptionCheck;)#5
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Constant(I,0)#6
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#ConditionalBranch(I,eq,26)#7
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(Ljava/lang/Object;,0)#26
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checks)#27
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(I,1)#28
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#29
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#CheckCast(Ljava/util/List;)#30
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(Ljava/lang/Object;,2)#31
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#32
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Pop(1)#33
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(Ljava/lang/Object;,0)#34
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checksResults)#35
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(I,1)#36
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#37
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#CheckCast(Ljava/util/List;)#38
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(I,3)#39
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Invoke(STATIC,Ljava/lang/Boolean;,valueOf,(Z)Ljava/lang/Boolean;)#40
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#41
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Pop(1)#42
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Return(V)#43
randoop.ExecutableSequence.hasFailure(I)Z#LocalLoad(Ljava/lang/Object;,3)#8
randoop.ExecutableSequence.hasFailure(I)Z#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#9
randoop.ExecutableSequence.hasFailure(I)Z#CheckCast(Ljava/lang/Boolean;)#10
randoop.ExecutableSequence.hasFailure(I)Z#Invoke(VIRTUAL,Ljava/lang/Boolean;,booleanValue,()Z)#11
randoop.ExecutableSequence.hasFailure(I)Z#LocalStore(I,2)#12
randoop.ExecutableSequence.hasFailure(I)Z#LocalLoad(I,2)#13
randoop.ExecutableSequence.hasFailure(I)Z#Constant(I,0)#14
randoop.ExecutableSequence.hasFailure(I)Z#ConditionalBranch(I,ne,18)#15
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#93
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5f790dbb)#94
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#95
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#96
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,101)#97
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#101
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,2)#102
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Goto(108)#103
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,12)#446
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,14)#447
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Lrandoop/Sequence;,getCreatingStatement,(Lrandoop/Variable;)Lrandoop/StatementKind;)#448
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#LocalLoad(Ljava/lang/Object;,1)#0
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/Variable;,sequence)#1
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#ConditionalBranch(Ljava/lang/Object;,eq,9)#3
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#LocalLoad(Ljava/lang/Object;,0)#9
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#Get(Lrandoop/util/SimpleList;,NONSTATIC,Lrandoop/Sequence;,statements)#10
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#LocalLoad(Ljava/lang/Object;,1)#11
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#Get(I,NONSTATIC,Lrandoop/Variable;,index)#12
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,get,(I)Ljava/lang/Object;)#13
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#CheckCast(Lrandoop/Statement;)#14
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#Get(Lrandoop/StatementKind;,NONSTATIC,Lrandoop/Statement;,statement)#15
randoop.Sequence.getCreatingStatement(Lrandoop/Variable;)Lrandoop/StatementKind;#Return(Ljava/lang/Object;)#16
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Instanceof(Lrandoop/PrimitiveOrStringOrNullDecl;)#449
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#450
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,459)#451
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#35
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Get([I,NONSTATIC,Lrandoop/util/ListOfLists;,accumulatedSize)#36
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,3)#37
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#ArrayLoad(I)#38
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalStore(I,2)#39
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalLoad(I,3)#40
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#Constant(I,1)#41
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#BinaryOp(I,add)#42
randoop.util.ListOfLists.get(I)Ljava/lang/Object;#LocalStore(I,3)#43
randoop.Sequence.computeLastStatementInfo()V#LocalLoad(Ljava/lang/Object;,0)#32
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Sequence;,lastStatementTypes)#33
randoop.Sequence.computeLastStatementInfo()V#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#34
randoop.Sequence.computeLastStatementInfo()V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#35
randoop.Sequence.computeLastStatementInfo()V#Pop(1)#36
randoop.Sequence.computeLastStatementInfo()V#Goto(45)#37
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,1)#25
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#26
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ArrayLoad(Ljava/lang/Object;)#27
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,3)#28
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,4)#29
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,-1)#30
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#BinaryOp(I,add)#31
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(I,4)#32
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,1)#33
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(I,5)#34
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Goto(58)#33
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(367)#53
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#71
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#72
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,84)#73
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#84
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#85
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(I,2)#86
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,clearActiveFlag,(I)V)#87
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Goto(183)#88
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,1)#83
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,2)#84
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Goto(108)#85
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,3)#67
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Boolean;,booleanValue,()Z)#68
randoop.util.Reflection.canBeUsedAs(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,4)#69
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,0)#34
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Get(Lrandoop/util/IMultiMap;,NONSTATIC,Lrandoop/SubTypeSet;,subTypesWithsequences)#35
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,2)#36
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Lrandoop/util/IMultiMap;,getValues,(Ljava/lang/Object;)Ljava/util/Set;)#37
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#38
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Ljava/util/Set;,contains,(Ljava/lang/Object;)Z)#39
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Constant(I,0)#40
randoop.SubTypeSet.add(Ljava/lang/Class;)V#ConditionalBranch(I,ne,47)#41
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,0)#42
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Get(Lrandoop/util/IMultiMap;,NONSTATIC,Lrandoop/SubTypeSet;,subTypesWithsequences)#43
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,2)#44
randoop.SubTypeSet.add(Ljava/lang/Class;)V#LocalLoad(Ljava/lang/Object;,1)#45
randoop.SubTypeSet.add(Ljava/lang/Class;)V#Invoke(INTERFACE,Lrandoop/util/IMultiMap;,add,(Ljava/lang/Object;Ljava/lang/Object;)V)#46
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,8)#108
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Instanceof(Ljava/lang/String;)#109
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#110
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,129)#111
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#129
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#130
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#131
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getInputs,(I)Ljava/util/List;)#132
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/List;,size,()I)#133
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#134
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,le,165)#135
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#136
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#137
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#138
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Sequence;,getInputs,(I)Ljava/util/List;)#139
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#140
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#141
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Lrandoop/Variable;)#142
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,10)#143
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,10)#144
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Variable;,getType,()Ljava/lang/Class;)#145
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@711fe40)#146
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(Ljava/lang/Object;,ne,165)#147
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,9)#165
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/Variable;,getType,()Ljava/lang/Class;)#166
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#167
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#168
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,173)#169
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/PrimValue$PrintMode;,STATIC,Lrandoop/PrimValue$PrintMode;,EQUALSEQUALS)#170
randoop.PrimValue$PrintMode.<clinit>()V#New(Lrandoop/PrimValue$PrintMode;,0)#0
randoop.PrimValue$PrintMode.<clinit>()V#Dup(1,0)#1
randoop.PrimValue$PrintMode.<clinit>()V#Constant(Ljava/lang/String;,"EQUALSEQUALS")#2
randoop.PrimValue$PrintMode.<clinit>()V#Constant(I,0)#3
randoop.PrimValue$PrintMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/PrimValue$PrintMode;,<init>,(Ljava/lang/String;I)V)#4
randoop.PrimValue$PrintMode.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.PrimValue$PrintMode.<init>(Ljava/lang/String;I)V#LocalLoad(Ljava/lang/Object;,1)#1
randoop.PrimValue$PrintMode.<init>(Ljava/lang/String;I)V#LocalLoad(I,2)#2
randoop.PrimValue$PrintMode.<init>(Ljava/lang/String;I)V#Invoke(SPECIAL,Ljava/lang/Enum;,<init>,(Ljava/lang/String;I)V)#3
randoop.PrimValue$PrintMode.<init>(Ljava/lang/String;I)V#Return(V)#4
randoop.PrimValue$PrintMode.<clinit>()V#Put(Lrandoop/PrimValue$PrintMode;,STATIC,Lrandoop/PrimValue$PrintMode;,EQUALSEQUALS)#5
randoop.PrimValue$PrintMode.<clinit>()V#New(Lrandoop/PrimValue$PrintMode;,0)#6
randoop.PrimValue$PrintMode.<clinit>()V#Dup(1,0)#7
randoop.PrimValue$PrintMode.<clinit>()V#Constant(Ljava/lang/String;,"EQUALSMETHOD")#8
randoop.PrimValue$PrintMode.<clinit>()V#Constant(I,1)#9
randoop.PrimValue$PrintMode.<clinit>()V#Invoke(SPECIAL,Lrandoop/PrimValue$PrintMode;,<init>,(Ljava/lang/String;I)V)#10
randoop.PrimValue$PrintMode.<clinit>()V#Put(Lrandoop/PrimValue$PrintMode;,STATIC,Lrandoop/PrimValue$PrintMode;,EQUALSMETHOD)#11
randoop.PrimValue$PrintMode.<clinit>()V#Constant(I,2)#12
randoop.PrimValue$PrintMode.<clinit>()V#New([Lrandoop/PrimValue$PrintMode;,1)#13
randoop.PrimValue$PrintMode.<clinit>()V#Dup(1,0)#14
randoop.PrimValue$PrintMode.<clinit>()V#Constant(I,0)#15
randoop.PrimValue$PrintMode.<clinit>()V#Get(Lrandoop/PrimValue$PrintMode;,STATIC,Lrandoop/PrimValue$PrintMode;,EQUALSEQUALS)#16
randoop.PrimValue$PrintMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#17
randoop.PrimValue$PrintMode.<clinit>()V#Dup(1,0)#18
randoop.PrimValue$PrintMode.<clinit>()V#Constant(I,1)#19
randoop.PrimValue$PrintMode.<clinit>()V#Get(Lrandoop/PrimValue$PrintMode;,STATIC,Lrandoop/PrimValue$PrintMode;,EQUALSMETHOD)#20
randoop.PrimValue$PrintMode.<clinit>()V#ArrayStore(Ljava/lang/Object;)#21
randoop.PrimValue$PrintMode.<clinit>()V#Put([Lrandoop/PrimValue$PrintMode;,STATIC,Lrandoop/PrimValue$PrintMode;,ENUM$VALUES)#22
randoop.PrimValue$PrintMode.<clinit>()V#Return(V)#23
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,10)#171
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(175)#172
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#New(Lrandoop/ObjectCheck;,0)#175
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Dup(1,0)#176
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#New(Lrandoop/PrimValue;,0)#177
randoop.PrimValue.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@531508ff)#0
randoop.PrimValue.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.PrimValue.<clinit>()V#Constant(I,0)#2
randoop.PrimValue.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.PrimValue.<clinit>()V#Constant(I,1)#4
randoop.PrimValue.<clinit>()V#Goto(7)#5
randoop.PrimValue.<clinit>()V#Put(Z,STATIC,Lrandoop/PrimValue;,$assertionsDisabled)#7
randoop.PrimValue.<clinit>()V#Return(V)#8
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Dup(1,0)#178
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,8)#179
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,10)#180
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(SPECIAL,Lrandoop/PrimValue;,<init>,(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V)#181
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#Constant(L;,null)#3
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#11
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isBoxedPrimitiveTypeOrString,(Ljava/lang/Class;)Z)#12
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#Constant(I,0)#13
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#ConditionalBranch(I,ne,27)#14
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#LocalLoad(Ljava/lang/Object;,0)#27
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#LocalLoad(Ljava/lang/Object;,1)#28
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#Put(Ljava/lang/Object;,NONSTATIC,Lrandoop/PrimValue;,value)#29
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#LocalLoad(Ljava/lang/Object;,0)#30
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#LocalLoad(Ljava/lang/Object;,2)#31
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#Put(Lrandoop/PrimValue$PrintMode;,NONSTATIC,Lrandoop/PrimValue;,printMode)#32
randoop.PrimValue.<init>(Ljava/lang/Object;Lrandoop/PrimValue$PrintMode;)V#Return(V)#33
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#182
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#183
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#New([Lrandoop/Variable;,1)#184
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Dup(1,0)#185
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#186
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,9)#187
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ArrayStore(Ljava/lang/Object;)#188
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(SPECIAL,Lrandoop/ObjectCheck;,<init>,(Lrandoop/ObjectContract;I[Lrandoop/Variable;)V)#189
randoop.PrimValue.getArity()I#Constant(I,1)#0
randoop.PrimValue.getArity()I#Return(I)#1
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,11)#190
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#191
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#192
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,11)#193
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#194
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,addCheck,(ILrandoop/Check;Z)V)#195
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(367)#196
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Constant(I,1)#9
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Return(I)#10
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,4)#102
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#103
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(INTERFACE,Ljava/util/List;,size,()I)#104
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,5)#105
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#106
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(INTERFACE,Ljava/util/List;,size,()I)#107
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,eq,127)#108
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,0)#127
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(I,6)#128
randoop.Sequence.equals(Ljava/lang/Object;)Z#Goto(166)#129
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(I,6)#166
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,4)#167
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#168
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(INTERFACE,Ljava/util/List;,size,()I)#169
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,lt,130)#170
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(I,3)#171
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,1)#172
randoop.Sequence.equals(Ljava/lang/Object;)Z#BinaryOp(I,add)#173
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(I,3)#174
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,4)#130
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#131
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(I,6)#132
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#133
randoop.Sequence.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/Sequence$RelativeNegativeIndex;)#134
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,5)#135
randoop.Sequence.equals(Ljava/lang/Object;)Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/Statement;,inputs)#136
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(I,6)#137
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#138
randoop.Sequence.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Lrandoop/Sequence$RelativeNegativeIndex;,equals,(Ljava/lang/Object;)Z)#139
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#Instanceof(Lrandoop/Sequence$RelativeNegativeIndex;)#1
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#Constant(I,0)#2
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,6)#3
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#6
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#Get(I,NONSTATIC,Lrandoop/Sequence$RelativeNegativeIndex;,index)#7
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#8
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/Sequence$RelativeNegativeIndex;)#9
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#Get(I,NONSTATIC,Lrandoop/Sequence$RelativeNegativeIndex;,index)#10
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,14)#11
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#Constant(I,1)#12
randoop.Sequence$RelativeNegativeIndex.equals(Ljava/lang/Object;)Z#Return(I)#13
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,0)#140
randoop.Sequence.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,162)#141
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalLoad(I,6)#162
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,1)#163
randoop.Sequence.equals(Ljava/lang/Object;)Z#BinaryOp(I,add)#164
randoop.Sequence.equals(Ljava/lang/Object;)Z#LocalStore(I,6)#165
randoop.RMethod.equals(Ljava/lang/Object;)Z#Constant(I,1)#9
randoop.RMethod.equals(Ljava/lang/Object;)Z#Return(I)#10
randoop.Sequence.equals(Ljava/lang/Object;)Z#Constant(I,1)#180
randoop.Sequence.equals(Ljava/lang/Object;)Z#Return(I)#181
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,"discard existing")#164
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#165
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#166
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#167
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,171)#168
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(L;,null)#171
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Return(Ljava/lang/Object;)#172
randoop.RMethod.equals(Ljava/lang/Object;)Z#Constant(I,0)#4
randoop.RMethod.equals(Ljava/lang/Object;)Z#Return(I)#5
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalStore(Ljava/lang/Object;,1)#81
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#82
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,1)#83
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Ljava/lang/reflect/InvocationTargetException;,getCause,()Ljava/lang/Throwable;)#84
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Put(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,exceptionThrown)#85
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,1)#86
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Throw()#87
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalStore(Ljava/lang/Object;,2)#88
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#89
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/MethodReflectionCode;,retval)#90
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Constant(L;,null)#91
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(Ljava/lang/Object;,eq,102)#92
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,2)#102
randoop.util.MethodReflectionCode.runReflectionCodeRaw()V#Throw()#103
randoop.util.ReflectionCode.runReflectionCode()V#LocalStore(Ljava/lang/Object;,4)#54
randoop.util.ReflectionCode.runReflectionCode()V#LocalLoad(Ljava/lang/Object;,1)#55
randoop.util.ReflectionCode.runReflectionCode()V#Constant(L;,null)#56
randoop.util.ReflectionCode.runReflectionCode()V#ConditionalBranch(Ljava/lang/Object;,eq,71)#57
randoop.util.ReflectionCode.runReflectionCode()V#LocalLoad(Ljava/lang/Object;,4)#71
randoop.util.ReflectionCode.runReflectionCode()V#Throw()#72
randoop.util.RunnerThread.executeReflectionCode()V#LocalStore(Ljava/lang/Object;,1)#10
randoop.util.RunnerThread.executeReflectionCode()V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.util.RunnerThread.executeReflectionCode()V#Instanceof(Ljava/lang/reflect/InvocationTargetException;)#12
randoop.util.RunnerThread.executeReflectionCode()V#Constant(I,0)#13
randoop.util.RunnerThread.executeReflectionCode()V#ConditionalBranch(I,eq,18)#14
randoop.util.RunnerThread.executeReflectionCode()V#LocalLoad(Ljava/lang/Object;,1)#15
randoop.util.RunnerThread.executeReflectionCode()V#Invoke(VIRTUAL,Ljava/lang/Throwable;,getCause,()Ljava/lang/Throwable;)#16
randoop.util.RunnerThread.executeReflectionCode()V#LocalStore(Ljava/lang/Object;,1)#17
randoop.util.RunnerThread.executeReflectionCode()V#LocalLoad(Ljava/lang/Object;,0)#18
randoop.util.RunnerThread.executeReflectionCode()V#LocalLoad(Ljava/lang/Object;,1)#19
randoop.util.RunnerThread.executeReflectionCode()V#Put(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/util/RunnerThread;,exceptionThrown)#20
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(J,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_accum)#44
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#LocalLoad(J,5)#45
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#BinaryOp(J,add)#46
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Put(J,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_accum)#47
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(Z,STATIC,Lrandoop/util/ReflectionExecutor;,$assertionsDisabled)#48
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(I,0)#49
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#ConditionalBranch(I,ne,60)#50
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Get(I,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_count)#60
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Constant(I,1)#61
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#BinaryOp(I,add)#62
randoop.util.ReflectionExecutor.executeReflectionCode(Lrandoop/util/ReflectionCode;Ljava/io/PrintStream;)Ljava/lang/Throwable;#Put(I,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_count)#63
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New(Lrandoop/ExceptionalExecution;,0)#95
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#96
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,10)#97
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(J,0)#98
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/ExceptionalExecution;,<init>,(Ljava/lang/Throwable;J)V)#99
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#Invoke(SPECIAL,Lrandoop/ExecutionOutcome;,<init>,()V)#1
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#Constant(L;,null)#3
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#ConditionalBranch(Ljava/lang/Object;,ne,9)#4
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#LocalLoad(Ljava/lang/Object;,0)#9
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#LocalLoad(Ljava/lang/Object;,1)#10
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#Put(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/ExceptionalExecution;,exception)#11
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#LocalLoad(Ljava/lang/Object;,0)#12
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#LocalLoad(J,2)#13
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#Put(J,NONSTATIC,Lrandoop/ExceptionalExecution;,executionTime)#14
randoop.ExceptionalExecution.<init>(Ljava/lang/Throwable;J)V#Return(V)#15
randoop.RMethod.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#100
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#59
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,2)#60
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,getResult,(I)Lrandoop/ExecutionOutcome;)#61
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Lrandoop/ExceptionalExecution;)#62
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,3)#63
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,0)#64
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,3)#65
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(SPECIAL,Lrandoop/ContractCheckingVisitor;,failureRevealingException,(Lrandoop/ExceptionalExecution;)Z)#66
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Lrandoop/ExceptionalExecution;,getException,()Ljava/lang/Throwable;)#1
randoop.ExceptionalExecution.getException()Ljava/lang/Throwable;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExceptionalExecution.getException()Ljava/lang/Throwable;#Get(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/ExceptionalExecution;,exception)#1
randoop.ExceptionalExecution.getException()Ljava/lang/Throwable;#Return(Ljava/lang/Object;)#2
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#2
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@be9cbe01)#3
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#4
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Constant(I,0)#5
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#ConditionalBranch(I,eq,9)#6
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#LocalLoad(Ljava/lang/Object;,1)#9
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Lrandoop/ExceptionalExecution;,getException,()Ljava/lang/Throwable;)#10
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#11
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@c1a231b4)#12
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#13
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Constant(I,0)#14
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#ConditionalBranch(I,eq,18)#15
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#LocalLoad(Ljava/lang/Object;,1)#18
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Lrandoop/ExceptionalExecution;,getException,()Ljava/lang/Throwable;)#19
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#20
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@d9e62f5c)#21
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#22
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Constant(I,0)#23
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#ConditionalBranch(I,eq,27)#24
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Constant(I,0)#27
randoop.ContractCheckingVisitor.failureRevealingException(Lrandoop/ExceptionalExecution;)Z#Return(I)#28
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#67
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,79)#68
randoop.ContractCheckingVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Return(V)#79
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,5)#322
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Instanceof(Lrandoop/ExceptionalExecution;)#323
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#324
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,346)#325
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,5)#326
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Lrandoop/ExceptionalExecution;)#327
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,6)#328
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,6)#329
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExceptionalExecution;,getException,()Ljava/lang/Throwable;)#330
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,7)#331
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,7)#332
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Instanceof(Lrandoop/TimeOutException;)#333
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#334
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,ne,367)#335
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,1)#336
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#337
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#New(Lrandoop/ExpectedExceptionCheck;,0)#338
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Dup(1,0)#339
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,7)#340
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(I,3)#341
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(SPECIAL,Lrandoop/ExpectedExceptionCheck;,<init>,(Ljava/lang/Throwable;I)V)#342
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#LocalLoad(Ljava/lang/Object;,1)#2
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#Constant(L;,null)#3
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#ConditionalBranch(Ljava/lang/Object;,ne,10)#4
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#LocalLoad(Ljava/lang/Object;,0)#10
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#12
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#Put(Ljava/lang/Class;,NONSTATIC,Lrandoop/ExpectedExceptionCheck;,exceptionClass)#13
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#LocalLoad(Ljava/lang/Object;,0)#14
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#LocalLoad(I,2)#15
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#Put(I,NONSTATIC,Lrandoop/ExpectedExceptionCheck;,statementIdx)#16
randoop.ExpectedExceptionCheck.<init>(Ljava/lang/Throwable;I)V#Return(V)#17
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,1)#343
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,addCheck,(ILrandoop/Check;Z)V)#344
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(Ljava/lang/Object;,0)#8
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#LocalLoad(I,1)#9
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@521137f9)#10
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Invoke(VIRTUAL,Lrandoop/ExecutableSequence;,hasCheck,(ILjava/lang/Class;)Z)#11
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#1
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalLoad(I,1)#2
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Invoke(VIRTUAL,Lrandoop/Sequence;,checkIndex,(I)V)#3
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ExecutableSequence;,checks)#5
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalLoad(I,1)#6
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/List;,get,(I)Ljava/lang/Object;)#7
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#CheckCast(Ljava/util/List;)#8
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#9
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,4)#10
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Goto(24)#11
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,4)#24
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#25
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Constant(I,0)#26
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#ConditionalBranch(I,ne,12)#27
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Constant(I,0)#28
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Return(I)#29
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#Constant(I,0)#12
randoop.ExecutableSequence.addCheck(ILrandoop/Check;Z)V#ConditionalBranch(I,eq,26)#13
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Goto(367)#345
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#LocalLoad(I,2)#81
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Constant(I,0)#82
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#ConditionalBranch(I,eq,85)#83
randoop.ExecutableSequence.execute(Lrandoop/ExecutionVisitor;Z)V#Goto(100)#84
randoop.ExecutableSequence.isNormalExecution()Z#Constant(I,0)#8
randoop.ExecutableSequence.isNormalExecution()Z#Return(I)#9
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#48
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#49
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,53)#50
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,1)#53
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Get(Lrandoop/Sequence;,NONSTATIC,Lrandoop/ExecutableSequence;,sequence)#54
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/Sequence;,clearAllActiveFlags,()V)#55
randoop.Sequence.clearAllActiveFlags()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.Sequence.clearAllActiveFlags()V#Get(Ljava/util/BitSet;,NONSTATIC,Lrandoop/Sequence;,activeFlags)#1
randoop.Sequence.clearAllActiveFlags()V#Constant(I,0)#2
randoop.Sequence.clearAllActiveFlags()V#LocalLoad(Ljava/lang/Object;,0)#3
randoop.Sequence.clearAllActiveFlags()V#Invoke(VIRTUAL,Lrandoop/Sequence;,size,()I)#4
randoop.Sequence.clearAllActiveFlags()V#Invoke(VIRTUAL,Ljava/util/BitSet;,clear,(II)V)#5
randoop.Sequence.clearAllActiveFlags()V#Return(V)#6
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Return(V)#56
randoop.Sequence.hasActiveFlags()Z#Constant(I,0)#5
randoop.Sequence.hasActiveFlags()Z#Goto(8)#6
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,4)#12
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#13
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#CheckCast(Lrandoop/Check;)#14
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,3)#15
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,3)#16
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#17
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,2)#18
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,canBeUsedAs,(Ljava/lang/Class;Ljava/lang/Class;)Z)#19
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#Constant(I,0)#20
randoop.ExecutableSequence.hasCheck(ILjava/lang/Class;)Z#ConditionalBranch(I,eq,24)#21
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,0)#166
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Lrandoop/ComponentManager;,NONSTATIC,Lrandoop/ForwardGenerator;,componentManager)#167
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,1)#168
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(I,8)#169
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(VIRTUAL,Lrandoop/ComponentManager;,getSequencesForType,(Lrandoop/StatementKind;I)Lrandoop/util/SimpleList;)#170
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,12)#171
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#172
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#173
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ConditionalBranch(I,eq,183)#174
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,0)#183
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Get(Lrandoop/ComponentManager;,NONSTATIC,Lrandoop/ForwardGenerator;,componentManager)#184
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,9)#185
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(STATIC,Lrandoop/HelperSequenceCreator;,createSequence,(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;)#186
randoop.HelperSequenceCreator.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@b472320d)#0
randoop.HelperSequenceCreator.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.HelperSequenceCreator.<clinit>()V#Constant(I,0)#2
randoop.HelperSequenceCreator.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.HelperSequenceCreator.<clinit>()V#Constant(I,1)#4
randoop.HelperSequenceCreator.<clinit>()V#Goto(7)#5
randoop.HelperSequenceCreator.<clinit>()V#Put(Z,STATIC,Lrandoop/HelperSequenceCreator;,$assertionsDisabled)#7
randoop.HelperSequenceCreator.<clinit>()V#Return(V)#8
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Constant(Ljava/lang/String;,"createSequence")#0
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,1)#2
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Invoke(VIRTUAL,Ljava/lang/Class;,isArray,()Z)#3
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Constant(I,0)#4
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#ConditionalBranch(I,ne,10)#5
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Constant(L;,null)#10
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,2)#11
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,1)#12
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Invoke(VIRTUAL,Ljava/lang/Class;,getComponentType,()Ljava/lang/Class;)#13
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#14
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Constant(I,0)#15
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#ConditionalBranch(I,eq,22)#16
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,1)#17
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Invoke(VIRTUAL,Ljava/lang/Class;,getComponentType,()Ljava/lang/Class;)#18
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Invoke(STATIC,Lrandoop/HelperSequenceCreator;,randPrimitiveArray,(Ljava/lang/Class;)Lrandoop/Sequence;)#19
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Get(Z,STATIC,Lrandoop/HelperSequenceCreator;,$assertionsDisabled)#0
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Constant(I,0)#1
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#ConditionalBranch(I,ne,11)#2
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#11
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(STATIC,Lrandoop/SeedSequences;,getSeeds,(Ljava/lang/Class;)Ljava/util/Set;)#12
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#New(Ljava/util/LinkedHashSet;,0)#0
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Dup(1,0)#1
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Invoke(SPECIAL,Ljava/util/LinkedHashSet;,<init>,()V)#2
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,1)#3
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Get(Ljava/util/List;,STATIC,Lrandoop/SeedSequences;,primitiveSeeds)#4
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#5
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,3)#6
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Goto(22)#7
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#22
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#23
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Constant(I,0)#24
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(I,ne,8)#25
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,3)#8
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#9
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(Ljava/lang/Object;,2)#10
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,0)#11
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#12
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Invoke(STATIC,Lrandoop/SeedSequences;,isOk,(Ljava/lang/Class;Ljava/lang/Object;)Z)#13
randoop.SeedSequences.isOk(Ljava/lang/Class;Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.SeedSequences.isOk(Ljava/lang/Class;Ljava/lang/Object;)Z#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,isBoxedPrimitiveTypeOrString,(Ljava/lang/Class;)Z)#1
randoop.SeedSequences.isOk(Ljava/lang/Class;Ljava/lang/Object;)Z#Constant(I,0)#2
randoop.SeedSequences.isOk(Ljava/lang/Class;Ljava/lang/Object;)Z#ConditionalBranch(I,eq,7)#3
randoop.SeedSequences.isOk(Ljava/lang/Class;Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#7
randoop.SeedSequences.isOk(Ljava/lang/Class;Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#8
randoop.SeedSequences.isOk(Ljava/lang/Class;Ljava/lang/Object;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,canBePassedAsArgument,(Ljava/lang/Object;Ljava/lang/Class;)Z)#9
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Constant(L;,null)#1
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#ConditionalBranch(Ljava/lang/Object;,eq,8)#2
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#3
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Get(Ljava/lang/Class;,STATIC,Ljava/lang/Void;,TYPE)#4
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#5
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Constant(I,0)#6
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,19)#7
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#19
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Constant(L;,null)#20
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#ConditionalBranch(Ljava/lang/Object;,ne,24)#21
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#24
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#25
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#26
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Invoke(STATIC,Lrandoop/util/Reflection;,canBeUsedAs,(Ljava/lang/Class;Ljava/lang/Class;)Z)#27
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,1)#68
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,2)#69
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Goto(108)#70
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Constant(I,0)#28
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,32)#29
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Constant(I,1)#32
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Return(I)#33
randoop.SeedSequences.isOk(Ljava/lang/Class;Ljava/lang/Object;)Z#Return(I)#10
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalStore(I,4)#14
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(I,4)#15
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Constant(I,0)#16
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#ConditionalBranch(I,eq,22)#17
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#18
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,2)#19
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Invoke(INTERFACE,Ljava/util/Set;,add,(Ljava/lang/Object;)Z)#20
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Pop(1)#21
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Constant(I,0)#30
randoop.util.Reflection.canBePassedAsArgument(Ljava/lang/Object;Ljava/lang/Class;)Z#Return(I)#31
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#LocalLoad(Ljava/lang/Object;,1)#26
randoop.SeedSequences.getSeeds(Ljava/lang/Class;)Ljava/util/Set;#Return(Ljava/lang/Object;)#27
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,1)#13
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Constant(I,4)#14
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(STATIC,Lrandoop/util/Randomness;,nextRandomInt,(I)I)#15
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(I,2)#16
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#New(Lrandoop/Sequence;,0)#17
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Dup(1,0)#18
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/Sequence;,<init>,()V)#19
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,3)#20
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#New(Ljava/util/ArrayList;,0)#21
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Dup(1,0)#22
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#23
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,4)#24
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Constant(I,0)#25
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(I,5)#26
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Goto(44)#27
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(I,5)#44
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(I,2)#45
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#ConditionalBranch(I,lt,28)#46
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,1)#28
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(STATIC,Lrandoop/util/Randomness;,randomSetMember,(Ljava/util/Collection;)Ljava/lang/Object;)#29
randoop.util.Randomness.randomSetMember(Ljava/util/Collection;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.Randomness.randomSetMember(Ljava/util/Collection;)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/Collection;,size,()I)#1
randoop.util.Randomness.randomSetMember(Ljava/util/Collection;)Ljava/lang/Object;#Invoke(STATIC,Lrandoop/util/Randomness;,nextRandomInt,(I)I)#2
randoop.util.Randomness.randomSetMember(Ljava/util/Collection;)Ljava/lang/Object;#LocalStore(I,1)#3
randoop.util.Randomness.randomSetMember(Ljava/util/Collection;)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.util.Randomness.randomSetMember(Ljava/util/Collection;)Ljava/lang/Object;#LocalLoad(I,1)#5
randoop.util.Randomness.randomSetMember(Ljava/util/Collection;)Ljava/lang/Object;#Invoke(STATIC,Lrandoop/util/CollectionsExt;,getNthIteratedElement,(Ljava/util/Collection;I)Ljava/lang/Object;)#6
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#Constant(L;,null)#1
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/Collection;,isEmpty,()Z)#9
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#Constant(I,0)#10
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#ConditionalBranch(I,eq,17)#11
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#LocalLoad(I,1)#17
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#18
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/Collection;,size,()I)#19
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#ConditionalBranch(I,lt,37)#20
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#37
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/Collection;,iterator,()Ljava/util/Iterator;)#38
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#LocalLoad(I,1)#39
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#Invoke(STATIC,Lrandoop/util/CollectionsExt;,getNthIteratedElement,(Ljava/util/Iterator;I)Ljava/lang/Object;)#40
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalLoad(I,1)#0
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Constant(I,0)#1
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#ConditionalBranch(I,ge,16)#2
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Constant(I,0)#16
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalStore(I,2)#17
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,0)#18
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalStore(Ljava/lang/Object;,3)#19
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Goto(34)#20
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,3)#34
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#35
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Constant(I,0)#36
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#ConditionalBranch(I,ne,21)#37
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalLoad(I,2)#21
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalLoad(I,1)#22
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#ConditionalBranch(I,ne,27)#23
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,3)#27
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#28
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Pop(1)#29
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalLoad(I,2)#30
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Constant(I,1)#31
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#BinaryOp(I,add)#32
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalStore(I,2)#33
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#LocalLoad(Ljava/lang/Object;,3)#24
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#25
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Iterator;I)Ljava/lang/Object;#Return(Ljava/lang/Object;)#26
randoop.util.CollectionsExt.getNthIteratedElement(Ljava/util/Collection;I)Ljava/lang/Object;#Return(Ljava/lang/Object;)#41
randoop.util.Randomness.randomSetMember(Ljava/util/Collection;)Ljava/lang/Object;#Return(Ljava/lang/Object;)#7
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,6)#30
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,3)#31
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#New(Lrandoop/PrimitiveOrStringOrNullDecl;,0)#32
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Dup(1,0)#33
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#34
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,6)#35
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/PrimitiveOrStringOrNullDecl;,<init>,(Ljava/lang/Class;Ljava/lang/Object;)V)#36
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,4)#37
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,extend,(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;)#38
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,3)#39
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(I,5)#40
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Constant(I,1)#41
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#BinaryOp(I,add)#42
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(I,5)#43
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#New(Ljava/util/ArrayList;,0)#47
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Dup(1,0)#48
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,()V)#49
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,5)#50
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Constant(I,0)#51
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(I,6)#52
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Goto(64)#53
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(I,6)#64
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(I,2)#65
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#ConditionalBranch(I,lt,54)#66
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,5)#54
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,3)#55
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(I,6)#56
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,getVariable,(I)Lrandoop/Variable;)#57
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#58
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Pop(1)#59
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(I,6)#60
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Constant(I,1)#61
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#BinaryOp(I,add)#62
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(I,6)#63
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,3)#67
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#New(Lrandoop/ArrayDeclaration;,0)#68
randoop.ArrayDeclaration.<clinit>()V#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@f3620b69)#0
randoop.ArrayDeclaration.<clinit>()V#Invoke(VIRTUAL,Ljava/lang/Class;,desiredAssertionStatus,()Z)#1
randoop.ArrayDeclaration.<clinit>()V#Constant(I,0)#2
randoop.ArrayDeclaration.<clinit>()V#ConditionalBranch(I,ne,6)#3
randoop.ArrayDeclaration.<clinit>()V#Constant(I,1)#4
randoop.ArrayDeclaration.<clinit>()V#Goto(7)#5
randoop.ArrayDeclaration.<clinit>()V#Put(Z,STATIC,Lrandoop/ArrayDeclaration;,$assertionsDisabled)#7
randoop.ArrayDeclaration.<clinit>()V#Return(V)#8
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Dup(1,0)#69
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,0)#70
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(I,2)#71
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(SPECIAL,Lrandoop/ArrayDeclaration;,<init>,(Ljava/lang/Class;I)V)#72
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#Constant(I,0)#3
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#Put(Z,NONSTATIC,Lrandoop/ArrayDeclaration;,hashCodeComputed)#4
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#LocalLoad(Ljava/lang/Object;,1)#5
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#Constant(L;,null)#6
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#ConditionalBranch(Ljava/lang/Object;,ne,13)#7
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#LocalLoad(I,2)#13
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#Constant(I,0)#14
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#ConditionalBranch(I,ge,27)#15
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#LocalLoad(Ljava/lang/Object;,0)#27
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#LocalLoad(Ljava/lang/Object;,1)#28
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#Put(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,elementType)#29
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#LocalLoad(Ljava/lang/Object;,0)#30
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#LocalLoad(I,2)#31
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#Put(I,NONSTATIC,Lrandoop/ArrayDeclaration;,length)#32
randoop.ArrayDeclaration.<init>(Ljava/lang/Class;I)V#Return(V)#33
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,5)#73
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Invoke(VIRTUAL,Lrandoop/Sequence;,extend,(Lrandoop/StatementKind;Ljava/util/List;)Lrandoop/Sequence;)#74
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ArrayDeclaration;,inputTypesCached)#1
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Constant(L;,null)#2
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#ConditionalBranch(Ljava/lang/Object;,ne,33)#3
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#New(Ljava/util/ArrayList;,0)#5
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Dup(1,0)#6
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#7
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,length)#8
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#9
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Put(Ljava/util/List;,NONSTATIC,Lrandoop/ArrayDeclaration;,inputTypesCached)#10
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Constant(I,0)#11
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalStore(I,1)#12
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Goto(24)#13
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(I,1)#24
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#25
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,length)#26
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#ConditionalBranch(I,lt,14)#27
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#14
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ArrayDeclaration;,inputTypesCached)#15
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#16
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,elementType)#17
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#18
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Pop(1)#19
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(I,1)#20
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Constant(I,1)#21
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#BinaryOp(I,add)#22
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalStore(I,1)#23
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#28
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#29
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ArrayDeclaration;,inputTypesCached)#30
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Invoke(STATIC,Ljava/util/Collections;,unmodifiableList,(Ljava/util/List;)Ljava/util/List;)#31
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Put(Ljava/util/List;,NONSTATIC,Lrandoop/ArrayDeclaration;,inputTypesCached)#32
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#LocalLoad(Ljava/lang/Object;,0)#33
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Get(Ljava/util/List;,NONSTATIC,Lrandoop/ArrayDeclaration;,inputTypesCached)#34
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Invoke(STATIC,Ljava/util/Collections;,unmodifiableList,(Ljava/util/List;)Ljava/util/List;)#35
randoop.ArrayDeclaration.getInputTypes()Ljava/util/List;#Return(Ljava/lang/Object;)#36
randoop.ArrayDeclaration.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ArrayDeclaration.hashCode()I#Get(Z,NONSTATIC,Lrandoop/ArrayDeclaration;,hashCodeComputed)#1
randoop.ArrayDeclaration.hashCode()I#Constant(I,0)#2
randoop.ArrayDeclaration.hashCode()I#ConditionalBranch(I,ne,21)#3
randoop.ArrayDeclaration.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ArrayDeclaration.hashCode()I#Constant(I,1)#5
randoop.ArrayDeclaration.hashCode()I#Put(Z,NONSTATIC,Lrandoop/ArrayDeclaration;,hashCodeComputed)#6
randoop.ArrayDeclaration.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#7
randoop.ArrayDeclaration.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#8
randoop.ArrayDeclaration.hashCode()I#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,elementType)#9
randoop.ArrayDeclaration.hashCode()I#Invoke(VIRTUAL,Ljava/lang/Object;,hashCode,()I)#10
randoop.ArrayDeclaration.hashCode()I#Put(I,NONSTATIC,Lrandoop/ArrayDeclaration;,hashCodeCached)#11
randoop.ArrayDeclaration.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#12
randoop.ArrayDeclaration.hashCode()I#Dup(1,0)#13
randoop.ArrayDeclaration.hashCode()I#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,hashCodeCached)#14
randoop.ArrayDeclaration.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#15
randoop.ArrayDeclaration.hashCode()I#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,length)#16
randoop.ArrayDeclaration.hashCode()I#Constant(I,17)#17
randoop.ArrayDeclaration.hashCode()I#BinaryOp(I,mul)#18
randoop.ArrayDeclaration.hashCode()I#BinaryOp(I,add)#19
randoop.ArrayDeclaration.hashCode()I#Put(I,NONSTATIC,Lrandoop/ArrayDeclaration;,hashCodeCached)#20
randoop.ArrayDeclaration.hashCode()I#LocalLoad(Ljava/lang/Object;,0)#21
randoop.ArrayDeclaration.hashCode()I#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,hashCodeCached)#22
randoop.ArrayDeclaration.hashCode()I#Return(I)#23
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#0
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,outputTypeCached)#1
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Constant(L;,null)#2
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#ConditionalBranch(Ljava/lang/Object;,ne,11)#3
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#4
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#5
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,elementType)#6
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Constant(I,0)#7
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Invoke(STATIC,Ljava/lang/reflect/Array;,newInstance,(Ljava/lang/Class;I)Ljava/lang/Object;)#8
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Invoke(VIRTUAL,Ljava/lang/Object;,getClass,()Ljava/lang/Class;)#9
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Put(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,outputTypeCached)#10
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#LocalLoad(Ljava/lang/Object;,0)#11
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,outputTypeCached)#12
randoop.ArrayDeclaration.getOutputType()Ljava/lang/Class;#Return(Ljava/lang/Object;)#13
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalStore(Ljava/lang/Object;,3)#75
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#LocalLoad(Ljava/lang/Object;,3)#76
randoop.HelperSequenceCreator.randPrimitiveArray(Ljava/lang/Class;)Lrandoop/Sequence;#Return(Ljava/lang/Object;)#77
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,2)#20
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Goto(123)#21
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Get(Z,STATIC,Lrandoop/HelperSequenceCreator;,$assertionsDisabled)#123
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Constant(I,0)#124
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#ConditionalBranch(I,ne,133)#125
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#New(Lrandoop/util/ArrayListSimpleList;,0)#133
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Dup(1,0)#134
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Invoke(SPECIAL,Lrandoop/util/ArrayListSimpleList;,<init>,()V)#135
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalStore(Ljava/lang/Object;,3)#136
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,3)#137
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,2)#138
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Invoke(VIRTUAL,Lrandoop/util/ArrayListSimpleList;,add,(Ljava/lang/Object;)Z)#139
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Pop(1)#140
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#LocalLoad(Ljava/lang/Object;,3)#141
randoop.HelperSequenceCreator.createSequence(Lrandoop/ComponentManager;Ljava/lang/Class;)Lrandoop/util/SimpleList;#Return(Ljava/lang/Object;)#142
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,13)#187
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New(Lrandoop/util/ListOfLists;,0)#188
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#189
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,2)#190
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#New([Lrandoop/util/SimpleList;,1)#191
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#192
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,0)#193
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,12)#194
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ArrayStore(Ljava/lang/Object;)#195
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Dup(1,0)#196
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Constant(I,1)#197
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalLoad(Ljava/lang/Object;,13)#198
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#ArrayStore(Ljava/lang/Object;)#199
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Invoke(SPECIAL,Lrandoop/util/ListOfLists;,<init>,([Lrandoop/util/SimpleList;)V)#200
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Invoke(SPECIAL,Lrandoop/util/SimpleList;,<init>,()V)#1
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,0)#2
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#New(Ljava/util/ArrayList;,0)#3
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Dup(1,0)#4
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,1)#5
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ArrayLength()#6
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Invoke(SPECIAL,Ljava/util/ArrayList;,<init>,(I)V)#7
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Put(Ljava/util/List;,NONSTATIC,Lrandoop/util/ListOfLists;,lists)#8
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Dup(1,0)#10
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalStore(Ljava/lang/Object;,5)#11
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ArrayLength()#12
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalStore(I,4)#13
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Constant(I,0)#14
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalStore(I,3)#15
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Goto(30)#16
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(I,3)#30
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(I,4)#31
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ConditionalBranch(I,lt,17)#32
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,5)#17
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(I,3)#18
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ArrayLoad(Ljava/lang/Object;)#19
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalStore(Ljava/lang/Object;,2)#20
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,0)#21
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/util/ListOfLists;,lists)#22
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,2)#23
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Invoke(INTERFACE,Ljava/util/List;,add,(Ljava/lang/Object;)Z)#24
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Pop(1)#25
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(I,3)#26
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Constant(I,1)#27
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#BinaryOp(I,add)#28
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalStore(I,3)#29
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,0)#33
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,1)#34
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ArrayLength()#35
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#New([I,1)#36
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Put([I,NONSTATIC,Lrandoop/util/ListOfLists;,accumulatedSize)#37
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,0)#38
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Constant(I,0)#39
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Put(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#40
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Constant(I,0)#41
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalStore(I,2)#42
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Goto(73)#43
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(I,2)#73
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,1)#74
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ArrayLength()#75
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ConditionalBranch(I,lt,44)#76
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,1)#44
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(I,2)#45
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ArrayLoad(Ljava/lang/Object;)#46
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalStore(Ljava/lang/Object;,3)#47
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,3)#48
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Constant(L;,null)#49
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ConditionalBranch(Ljava/lang/Object;,ne,56)#50
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,0)#56
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Dup(1,0)#57
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Get(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#58
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,3)#59
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Invoke(VIRTUAL,Lrandoop/util/SimpleList;,size,()I)#60
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#BinaryOp(I,add)#61
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Put(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#62
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,0)#63
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Get([I,NONSTATIC,Lrandoop/util/ListOfLists;,accumulatedSize)#64
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(I,2)#65
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(Ljava/lang/Object;,0)#66
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Get(I,NONSTATIC,Lrandoop/util/ListOfLists;,totalelements)#67
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#ArrayStore(I)#68
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalLoad(I,2)#69
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Constant(I,1)#70
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#BinaryOp(I,add)#71
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#LocalStore(I,2)#72
randoop.util.ListOfLists.<init>([Lrandoop/util/SimpleList;)V#Return(V)#77
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#LocalStore(Ljava/lang/Object;,11)#201
randoop.ForwardGenerator.selectInputs(Lrandoop/StatementKind;)Lrandoop/InputsAndSuccessFlag;#Goto(220)#202
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,1)#0
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ArrayLength()#1
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#2
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,length)#3
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,le,22)#4
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#22
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(J,3)#23
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(Z,STATIC,Lrandoop/ArrayDeclaration;,$assertionsDisabled)#24
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#25
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,ne,36)#26
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#36
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,elementType)#37
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,0)#38
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,length)#39
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Ljava/lang/reflect/Array;,newInstance,(Ljava/lang/Class;I)Ljava/lang/Object;)#40
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(Ljava/lang/Object;,5)#41
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,0)#42
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(I,6)#43
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Goto(55)#44
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,6)#55
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,1)#56
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ArrayLength()#57
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ConditionalBranch(I,lt,45)#58
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,5)#45
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,6)#46
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,1)#47
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,6)#48
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#ArrayLoad(Ljava/lang/Object;)#49
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Ljava/lang/reflect/Array;,set,(Ljava/lang/Object;ILjava/lang/Object;)V)#50
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(I,6)#51
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(I,1)#52
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#BinaryOp(I,add)#53
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(I,6)#54
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(STATIC,Ljava/lang/System;,currentTimeMillis,()J)#59
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(J,3)#60
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#BinaryOp(J,sub)#61
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalStore(J,6)#62
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New(Lrandoop/NormalExecution;,0)#63
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#64
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,5)#65
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(J,6)#66
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/NormalExecution;,<init>,(Ljava/lang/Object;J)V)#67
randoop.ArrayDeclaration.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#68
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#4
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(Ljava/lang/Class;,com.ibm.wala.shrikeBT.ConstantInstruction$ClassToken@5f790dbb)#5
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#6
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#7
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,11)#8
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#11
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isArray,()Z)#12
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#13
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,ne,17)#14
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#15
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Return(I)#16
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,0)#153
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Get(Lrandoop/ComponentManager;,NONSTATIC,Lrandoop/ForwardGenerator;,componentManager)#154
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#155
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lrandoop/PrimitiveOrStringOrNullDecl;,sequenceForPrimitive,(Ljava/lang/Object;)Lrandoop/Sequence;)#156
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(VIRTUAL,Lrandoop/ComponentManager;,addGeneratedSequence,(Lrandoop/Sequence;)V)#157
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Goto(183)#158
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,0)#17
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,getComponentType,()Ljava/lang/Class;)#18
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,2)#19
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,1)#20
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,getComponentType,()Ljava/lang/Class;)#21
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(Ljava/lang/Object;,3)#22
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,2)#23
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#24
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#25
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,37)#26
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,3)#27
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Class;,isPrimitive,()Z)#28
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,0)#29
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#ConditionalBranch(I,eq,35)#30
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,2)#31
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalLoad(Ljava/lang/Object;,3)#32
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#33
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Return(I)#34
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Constant(I,1)#22
randoop.EqualsHashcode.evaluate([Ljava/lang/Object;)Z#Return(I)#23
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#Constant(I,1)#17
randoop.EqualsSymmetric.evaluate([Ljava/lang/Object;)Z#Return(I)#18
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,1)#98
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#LocalStore(I,2)#99
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Goto(108)#100
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Constant(I,1)#9
randoop.util.Reflection.canBeUsedAs0(Ljava/lang/Class;Ljava/lang/Class;)Z#Return(I)#10
randoop.ContractCheckingVisitor.objectIndicesToCheck(Lrandoop/ExecutableSequence;I)Lrandoop/util/MultiMap;#Goto(58)#39
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,8)#112
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#CheckCast(Ljava/lang/String;)#113
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,10)#114
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,10)#115
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,looksLikeObjectToString,(Ljava/lang/String;)Z)#116
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#0
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#Constant(L;,null)#1
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,ne,8)#2
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#8
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,length,()I)#9
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#LocalStore(I,1)#10
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#LocalLoad(I,1)#11
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#Constant(I,3)#12
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#ConditionalBranch(I,ge,16)#13
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#LocalLoad(Ljava/lang/Object;,0)#16
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#Constant(Ljava/lang/String;,".*@[0-9a-h]{1,8}.*")#17
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#Invoke(VIRTUAL,Ljava/lang/String;,matches,(Ljava/lang/String;)Z)#18
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#Return(I)#19
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(I,0)#117
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,eq,120)#118
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalLoad(Ljava/lang/Object;,10)#120
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(VIRTUAL,Ljava/lang/String;,length,()I)#121
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(I,STATIC,Lrandoop/main/GenInputsAbstract;,string_maxlen)#122
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#ConditionalBranch(I,le,127)#123
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Constant(Ljava/lang/String;,"NOT string_maxlen@visitAfter")#127
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#128
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#Get(Lrandoop/PrimValue$PrintMode;,STATIC,Lrandoop/PrimValue$PrintMode;,EQUALSMETHOD)#173
randoop.RegressionCaptureVisitor.visitAfter(Lrandoop/ExecutableSequence;I)V#LocalStore(Ljava/lang/Object;,10)#174
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#119
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#CheckCast(Ljava/lang/String;)#120
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,looksLikeObjectToString,(Ljava/lang/String;)Z)#121
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#122
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,eq,126)#123
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#LocalLoad(Ljava/lang/Object;,4)#132
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#CheckCast(Ljava/lang/String;)#133
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Invoke(STATIC,Lrandoop/util/PrimitiveTypes;,stringLengthOK,(Ljava/lang/String;)Z)#134
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#Constant(I,0)#135
randoop.ForwardGenerator.processSequence(Lrandoop/ExecutableSequence;)V#ConditionalBranch(I,ne,139)#136
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#Constant(I,0)#14
randoop.util.PrimitiveTypes.looksLikeObjectToString(Ljava/lang/String;)Z#Return(I)#15
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Constant(I,0)#4
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Return(I)#5
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#0
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Instanceof(Lrandoop/ArrayDeclaration;)#1
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Constant(I,0)#2
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,6)#3
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#6
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#7
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#ConditionalBranch(Ljava/lang/Object;,ne,11)#8
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Constant(I,1)#9
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Return(I)#10
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Constant(I,0)#4
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Return(I)#5
randoop.util.ProgressDisplay.run()V#Goto(0)#33
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalStore(Ljava/lang/Object;,1)#43
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#44
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,1)#45
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Invoke(VIRTUAL,Ljava/lang/reflect/InvocationTargetException;,getCause,()Ljava/lang/Throwable;)#46
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Put(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,exceptionThrown)#47
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,1)#48
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Throw()#49
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalStore(Ljava/lang/Object;,2)#50
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#51
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Get(Ljava/lang/Object;,NONSTATIC,Lrandoop/util/ConstructorReflectionCode;,retval)#52
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Constant(L;,null)#53
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#ConditionalBranch(Ljava/lang/Object;,eq,64)#54
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,2)#64
randoop.util.ConstructorReflectionCode.runReflectionCodeRaw()V#Throw()#65
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#New(Lrandoop/ExceptionalExecution;,0)#34
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Dup(1,0)#35
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,4)#36
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Constant(J,0)#37
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/ExceptionalExecution;,<init>,(Ljava/lang/Throwable;J)V)#38
randoop.RConstructor.execute([Ljava/lang/Object;Ljava/io/PrintStream;)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#39
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,1)#11
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#CheckCast(Lrandoop/ArrayDeclaration;)#12
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalStore(Ljava/lang/Object;,2)#13
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#14
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,elementType)#15
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#16
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Get(Ljava/lang/Class;,NONSTATIC,Lrandoop/ArrayDeclaration;,elementType)#17
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Invoke(VIRTUAL,Ljava/lang/Object;,equals,(Ljava/lang/Object;)Z)#18
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Constant(I,0)#19
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,ne,23)#20
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,0)#23
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,length)#24
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#LocalLoad(Ljava/lang/Object;,2)#25
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Get(I,NONSTATIC,Lrandoop/ArrayDeclaration;,length)#26
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#ConditionalBranch(I,eq,30)#27
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Constant(I,1)#30
randoop.ArrayDeclaration.equals(Ljava/lang/Object;)Z#Return(I)#31
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(Ljava/lang/String;,">maxsize@evaluating-maxsize")#133
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#134
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#135
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(I,0)#136
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#ConditionalBranch(I,eq,151)#137
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Constant(L;,null)#151
randoop.ForwardGenerator.createNewUniqueSequence()Lrandoop/ExecutableSequence;#Return(Ljava/lang/Object;)#152
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Constant(I,1)#28
randoop.PrimitiveOrStringOrNullDecl.equals(Ljava/lang/Object;)Z#Return(I)#29
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#LocalStore(Ljava/lang/Object;,1)#9
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#10
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,1)#11
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Put(Ljava/lang/Throwable;,NONSTATIC,Lrandoop/ObjectContractUtils$1;,exception)#12
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#LocalLoad(Ljava/lang/Object;,0)#13
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Invoke(VIRTUAL,Lrandoop/ObjectContractUtils$1;,setRunAlready,()V)#14
randoop.ObjectContractUtils$1.runReflectionCodeRaw()V#Goto(23)#15
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#New(Lrandoop/ExceptionalExecution;,0)#25
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Dup(1,0)#26
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,2)#27
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/ReflectionCode;,getExceptionThrown,()Ljava/lang/Throwable;)#28
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#LocalLoad(Ljava/lang/Object;,3)#29
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(VIRTUAL,Lrandoop/util/Timer;,getTimeElapsedMillis,()J)#30
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Invoke(SPECIAL,Lrandoop/ExceptionalExecution;,<init>,(Ljava/lang/Throwable;J)V)#31
randoop.ObjectContractUtils.execute(Lrandoop/ObjectContract;[Ljava/lang/Object;)Lrandoop/ExecutionOutcome;#Return(Ljava/lang/Object;)#32
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Invoke(STATIC,Lrandoop/util/Log;,isLoggingOn,()Z)#145
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#146
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,eq,150)#147
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Get(Z,STATIC,Lrandoop/ContractCheckingVisitor;,$assertionsDisabled)#150
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#Constant(I,0)#151
randoop.ContractCheckingVisitor.checkBinary(Lrandoop/ExecutableSequence;Lrandoop/ObjectContract;Ljava/util/Set;I)V#ConditionalBranch(I,ne,161)#152
randoop.AbstractGenerator.stop()Z#Constant(I,1)#33
randoop.AbstractGenerator.stop()Z#Return(I)#34
randoop.AbstractGenerator.explore()V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,noprogressdisplay)#214
randoop.AbstractGenerator.explore()V#Constant(I,0)#215
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,ne,228)#216
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#217
randoop.AbstractGenerator.explore()V#Get(Lrandoop/util/ProgressDisplay;,NONSTATIC,Lrandoop/AbstractGenerator;,progressDisplay)#218
randoop.AbstractGenerator.explore()V#Constant(L;,null)#219
randoop.AbstractGenerator.explore()V#ConditionalBranch(Ljava/lang/Object;,eq,228)#220
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#221
randoop.AbstractGenerator.explore()V#Get(Lrandoop/util/ProgressDisplay;,NONSTATIC,Lrandoop/AbstractGenerator;,progressDisplay)#222
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/util/ProgressDisplay;,display,()V)#223
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#224
randoop.AbstractGenerator.explore()V#Get(Lrandoop/util/ProgressDisplay;,NONSTATIC,Lrandoop/AbstractGenerator;,progressDisplay)#225
randoop.AbstractGenerator.explore()V#Constant(I,1)#226
randoop.AbstractGenerator.explore()V#Put(Z,NONSTATIC,Lrandoop/util/ProgressDisplay;,shouldStop)#227
randoop.AbstractGenerator.explore()V#Get(Z,STATIC,Lrandoop/main/GenInputsAbstract;,noprogressdisplay)#228
randoop.AbstractGenerator.explore()V#Constant(I,0)#229
randoop.AbstractGenerator.explore()V#ConditionalBranch(I,ne,287)#230
randoop.AbstractGenerator.explore()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#231
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,()V)#232
randoop.AbstractGenerator.explore()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#233
randoop.AbstractGenerator.explore()V#New(Ljava/lang/StringBuilder;,0)#234
randoop.AbstractGenerator.explore()V#Dup(1,0)#235
randoop.AbstractGenerator.explore()V#Constant(Ljava/lang/String;,"Normal method executions:")#236
randoop.AbstractGenerator.explore()V#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#237
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Lrandoop/util/ReflectionExecutor;,normalExecs,()I)#238
randoop.util.ReflectionExecutor.normalExecs()I#Get(I,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_count)#0
randoop.util.ReflectionExecutor.normalExecs()I#Return(I)#1
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(I)Ljava/lang/StringBuilder;)#239
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#240
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#241
randoop.AbstractGenerator.explore()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#242
randoop.AbstractGenerator.explore()V#New(Ljava/lang/StringBuilder;,0)#243
randoop.AbstractGenerator.explore()V#Dup(1,0)#244
randoop.AbstractGenerator.explore()V#Constant(Ljava/lang/String;,"Exceptional method executions:")#245
randoop.AbstractGenerator.explore()V#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#246
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Lrandoop/util/ReflectionExecutor;,excepExecs,()I)#247
randoop.util.ReflectionExecutor.excepExecs()I#Get(I,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_count)#0
randoop.util.ReflectionExecutor.excepExecs()I#Return(I)#1
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(I)Ljava/lang/StringBuilder;)#248
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#249
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#250
randoop.AbstractGenerator.explore()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#251
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,()V)#252
randoop.AbstractGenerator.explore()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#253
randoop.AbstractGenerator.explore()V#New(Ljava/lang/StringBuilder;,0)#254
randoop.AbstractGenerator.explore()V#Dup(1,0)#255
randoop.AbstractGenerator.explore()V#Constant(Ljava/lang/String;,"Average method execution time (normal termination):     ")#256
randoop.AbstractGenerator.explore()V#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#257
randoop.AbstractGenerator.explore()V#Constant(Ljava/lang/String;,"%.3g")#258
randoop.AbstractGenerator.explore()V#Constant(I,1)#259
randoop.AbstractGenerator.explore()V#New([Ljava/lang/Object;,1)#260
randoop.AbstractGenerator.explore()V#Dup(1,0)#261
randoop.AbstractGenerator.explore()V#Constant(I,0)#262
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Lrandoop/util/ReflectionExecutor;,normalExecAvgMillis,()D)#263
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#Get(J,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_accum)#0
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#Conversion(J,D)#1
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#Get(I,STATIC,Lrandoop/util/ReflectionExecutor;,normal_exec_count)#2
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#Conversion(I,D)#3
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#BinaryOp(D,div)#4
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#Constant(D,10.0)#5
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#Constant(D,6.0)#6
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#Invoke(STATIC,Ljava/lang/Math;,pow,(DD)D)#7
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#BinaryOp(D,div)#8
randoop.util.ReflectionExecutor.normalExecAvgMillis()D#Return(D)#9
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Ljava/lang/Double;,valueOf,(D)Ljava/lang/Double;)#264
randoop.AbstractGenerator.explore()V#ArrayStore(Ljava/lang/Object;)#265
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Ljava/lang/String;,format,(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;)#266
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#267
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#268
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#269
randoop.AbstractGenerator.explore()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#270
randoop.AbstractGenerator.explore()V#New(Ljava/lang/StringBuilder;,0)#271
randoop.AbstractGenerator.explore()V#Dup(1,0)#272
randoop.AbstractGenerator.explore()V#Constant(Ljava/lang/String;,"Average method execution time (exceptional termination):")#273
randoop.AbstractGenerator.explore()V#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#274
randoop.AbstractGenerator.explore()V#Constant(Ljava/lang/String;,"%.3g")#275
randoop.AbstractGenerator.explore()V#Constant(I,1)#276
randoop.AbstractGenerator.explore()V#New([Ljava/lang/Object;,1)#277
randoop.AbstractGenerator.explore()V#Dup(1,0)#278
randoop.AbstractGenerator.explore()V#Constant(I,0)#279
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Lrandoop/util/ReflectionExecutor;,excepExecAvgMillis,()D)#280
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#Get(J,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_accum)#0
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#Conversion(J,D)#1
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#Get(I,STATIC,Lrandoop/util/ReflectionExecutor;,excep_exec_count)#2
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#Conversion(I,D)#3
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#BinaryOp(D,div)#4
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#Constant(D,10.0)#5
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#Constant(D,6.0)#6
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#Invoke(STATIC,Ljava/lang/Math;,pow,(DD)D)#7
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#BinaryOp(D,div)#8
randoop.util.ReflectionExecutor.excepExecAvgMillis()D#Return(D)#9
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Ljava/lang/Double;,valueOf,(D)Ljava/lang/Double;)#281
randoop.AbstractGenerator.explore()V#ArrayStore(Ljava/lang/Object;)#282
randoop.AbstractGenerator.explore()V#Invoke(STATIC,Ljava/lang/String;,format,(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;)#283
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#284
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#285
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#286
randoop.util.ProgressDisplay.run()V#LocalLoad(Ljava/lang/Object;,0)#4
randoop.util.ProgressDisplay.run()V#Invoke(VIRTUAL,Lrandoop/util/ProgressDisplay;,clear,()V)#5
randoop.util.ProgressDisplay.clear()V#Get(J,STATIC,Lrandoop/main/GenInputsAbstract;,progressinterval)#0
randoop.util.ProgressDisplay.clear()V#Constant(J,-1)#1
randoop.util.ProgressDisplay.clear()V#Comparison(J,cmp)#2
randoop.util.ProgressDisplay.clear()V#Constant(I,0)#3
randoop.util.ProgressDisplay.clear()V#ConditionalBranch(I,ne,6)#4
randoop.util.ProgressDisplay.clear()V#Constant(Ljava/lang/String;,"")#6
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#287
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#288
randoop.util.ProgressDisplay.clear()V#Get(I,STATIC,Lrandoop/util/ProgressDisplay;,progresswidth)#7
randoop.AbstractGenerator.explore()V#Constant(L;,null)#289
randoop.util.ProgressDisplay.clear()V#Constant(I,1)#8
randoop.AbstractGenerator.explore()V#ConditionalBranch(Ljava/lang/Object;,eq,294)#290
randoop.util.ProgressDisplay.clear()V#BinaryOp(I,sub)#9
randoop.AbstractGenerator.explore()V#LocalLoad(Ljava/lang/Object;,0)#291
randoop.util.ProgressDisplay.clear()V#Invoke(STATIC,Lplume/UtilMDE;,rpad,(Ljava/lang/String;I)Ljava/lang/String;)#10
randoop.AbstractGenerator.explore()V#Get(Lrandoop/RandoopListenerManager;,NONSTATIC,Lrandoop/AbstractGenerator;,listenerMgr)#292
randoop.AbstractGenerator.explore()V#Invoke(VIRTUAL,Lrandoop/RandoopListenerManager;,explorationEnd,()V)#293
randoop.RandoopListenerManager.explorationEnd()V#LocalLoad(Ljava/lang/Object;,0)#0
randoop.RandoopListenerManager.explorationEnd()V#Get(Ljava/util/List;,NONSTATIC,Lrandoop/RandoopListenerManager;,listeners)#1
randoop.RandoopListenerManager.explorationEnd()V#Invoke(INTERFACE,Ljava/util/List;,iterator,()Ljava/util/Iterator;)#2
randoop.RandoopListenerManager.explorationEnd()V#LocalStore(Ljava/lang/Object;,2)#3
randoop.RandoopListenerManager.explorationEnd()V#Goto(11)#4
randoop.RandoopListenerManager.explorationEnd()V#LocalLoad(Ljava/lang/Object;,2)#11
randoop.RandoopListenerManager.explorationEnd()V#Invoke(INTERFACE,Ljava/util/Iterator;,hasNext,()Z)#12
randoop.RandoopListenerManager.explorationEnd()V#Constant(I,0)#13
randoop.RandoopListenerManager.explorationEnd()V#ConditionalBranch(I,ne,5)#14
randoop.RandoopListenerManager.explorationEnd()V#LocalLoad(Ljava/lang/Object;,2)#5
randoop.RandoopListenerManager.explorationEnd()V#Invoke(INTERFACE,Ljava/util/Iterator;,next,()Ljava/lang/Object;)#6
randoop.RandoopListenerManager.explorationEnd()V#CheckCast(Lrandoop/IEventListener;)#7
randoop.RandoopListenerManager.explorationEnd()V#LocalStore(Ljava/lang/Object;,1)#8
randoop.RandoopListenerManager.explorationEnd()V#LocalLoad(Ljava/lang/Object;,1)#9
randoop.RandoopListenerManager.explorationEnd()V#Invoke(INTERFACE,Lrandoop/IEventListener;,explorationEnd,()V)#10
randoop.experiments.CodeCoverageTracker.explorationEnd()V#Return(V)#0
randoop.RandoopListenerManager.explorationEnd()V#Return(V)#15
randoop.AbstractGenerator.explore()V#Return(V)#294
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,output_branches)#838
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#839
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,eq,894)#840
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,output_covmap)#894
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#895
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,eq,925)#896
randoop.util.ProgressDisplay.clear()V#LocalStore(Ljava/lang/Object;,1)#11
randoop.util.ProgressDisplay.clear()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#12
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,output_components)#925
randoop.util.ProgressDisplay.clear()V#New(Ljava/lang/StringBuilder;,0)#13
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#926
randoop.util.ProgressDisplay.clear()V#Dup(1,0)#14
randoop.util.ProgressDisplay.clear()V#Constant(Ljava/lang/String;,"")#15
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,eq,990)#927
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"output_components==null@handle")#990
randoop.util.ProgressDisplay.clear()V#Invoke(SPECIAL,Ljava/lang/StringBuilder;,<init>,(Ljava/lang/String;)V)#16
randoop.util.ProgressDisplay.clear()V#LocalLoad(Ljava/lang/Object;,1)#17
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#991
randoop.util.ProgressDisplay.clear()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,append,(Ljava/lang/String;)Ljava/lang/StringBuilder;)#18
randoop.util.ProgressDisplay.clear()V#Invoke(VIRTUAL,Ljava/lang/StringBuilder;,toString,()Ljava/lang/String;)#19
randoop.util.ProgressDisplay.clear()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,print,(Ljava/lang/String;)V)#20
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Ljava/lang/String;,STATIC,Lrandoop/main/GenTests;,check_valid_objects)#992
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(L;,null)#993
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(Ljava/lang/Object;,eq,1054)#994
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Get(Z,STATIC,Lrandoop/main/GenTests;,dont_output_tests)#1054
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,0)#1055
randoop.main.GenTests.handle([Ljava/lang/String;)Z#ConditionalBranch(I,eq,1061)#1056
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(Ljava/lang/String;,"dont_output_tests@handle")#1057
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Invoke(STATIC,Linstrument/Tracer;,trace,(Ljava/lang/String;)V)#1058
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Constant(I,1)#1059
randoop.main.GenTests.handle([Ljava/lang/String;)Z#Return(I)#1060
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalStore(I,6)#98
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,6)#99
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#100
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,ne,200)#101
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#LocalLoad(I,6)#200
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Constant(I,0)#201
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#ConditionalBranch(I,ne,217)#202
randoop.main.Main.nonStaticMain([Ljava/lang/String;)V#Return(V)#217
randoop.main.Main.main([Ljava/lang/String;)V#Return(V)#7
randoop.util.ProgressDisplay.clear()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#21
randoop.util.ProgressDisplay.clear()V#Constant(Ljava/lang/String;,"")#22
randoop.util.ProgressDisplay.clear()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,print,(Ljava/lang/String;)V)#23
randoop.util.ProgressDisplay.clear()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#24
randoop.util.ProgressDisplay.clear()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,flush,()V)#25
randoop.util.ProgressDisplay.clear()V#Return(V)#26
randoop.util.ProgressDisplay.run()V#Return(V)#6
