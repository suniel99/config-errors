test.baseline.diagnoser.Main.<clinit>()V#Constant(I,-1)#0
test.baseline.diagnoser.Main.<clinit>()V#Put(I,STATIC,Ltest/baseline/diagnoser/Main;,option1)#1
test.baseline.diagnoser.Main.<clinit>()V#Constant(I,-1)#2
test.baseline.diagnoser.Main.<clinit>()V#Put(I,STATIC,Ltest/baseline/diagnoser/Main;,option2)#3
test.baseline.diagnoser.Main.<clinit>()V#Constant(I,-1)#4
test.baseline.diagnoser.Main.<clinit>()V#Put(I,STATIC,Ltest/baseline/diagnoser/Main;,option3)#5
test.baseline.diagnoser.Main.<clinit>()V#Return(V)#6
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#0
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#ArrayLength()#1
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Constant(I,3)#2
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#ConditionalBranch(I,lt,20)#3
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#20
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#ArrayLength()#21
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Constant(I,2)#22
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#ConditionalBranch(I,lt,35)#23
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#35
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#ArrayLength()#36
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Constant(I,1)#37
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#ConditionalBranch(I,lt,44)#38
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#LocalLoad(Ljava/lang/Object;,0)#39
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Constant(I,0)#40
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#ArrayLoad(Ljava/lang/Object;)#41
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Invoke(STATIC,Ljava/lang/Integer;,parseInt,(Ljava/lang/String;)I)#42
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Put(I,STATIC,Ltest/baseline/diagnoser/Main;,option1)#43
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#New(Ltest/baseline/diagnoser/Main;,0)#44
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Dup(1,0)#45
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Invoke(SPECIAL,Ltest/baseline/diagnoser/Main;,<init>,()V)#46
test.baseline.diagnoser.Main.<init>()V#LocalLoad(Ljava/lang/Object;,0)#0
test.baseline.diagnoser.Main.<init>()V#Invoke(SPECIAL,Ljava/lang/Object;,<init>,()V)#1
test.baseline.diagnoser.Main.<init>()V#Return(V)#2
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Invoke(VIRTUAL,Ltest/baseline/diagnoser/Main;,nonStaticMain,()V)#47
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option1)#0
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#1
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,5)#2
test.baseline.diagnoser.Main.nonStaticMain()V#LocalLoad(Ljava/lang/Object;,0)#3
test.baseline.diagnoser.Main.nonStaticMain()V#Invoke(SPECIAL,Ltest/baseline/diagnoser/Main;,callPrint1,()V)#4
test.baseline.diagnoser.Main.callPrint1()V#Get(Ljava/io/PrintStream;,STATIC,Ljava/lang/System;,out)#0
test.baseline.diagnoser.Main.callPrint1()V#Constant(Ljava/lang/String;,"print-callprint-1")#1
test.baseline.diagnoser.Main.callPrint1()V#Invoke(VIRTUAL,Ljava/io/PrintStream;,println,(Ljava/lang/String;)V)#2
test.baseline.diagnoser.Main.callPrint1()V#Return(V)#3
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option2)#5
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#6
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,10)#7
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option3)#10
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#11
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,15)#12
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option1)#15
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#16
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,26)#17
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option3)#18
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#19
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,26)#20
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option1)#26
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#27
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,37)#28
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option2)#29
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#30
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,37)#31
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option1)#37
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#38
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,51)#39
test.baseline.diagnoser.Main.nonStaticMain()V#Get(I,STATIC,Ltest/baseline/diagnoser/Main;,option2)#40
test.baseline.diagnoser.Main.nonStaticMain()V#Constant(I,0)#41
test.baseline.diagnoser.Main.nonStaticMain()V#ConditionalBranch(I,le,51)#42
test.baseline.diagnoser.Main.nonStaticMain()V#Return(V)#51
test.baseline.diagnoser.Main.main([Ljava/lang/String;)V#Return(V)#48
